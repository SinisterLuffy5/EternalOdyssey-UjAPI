package YDWETimerPattern initializer YDWETimerPattern__Init

import ACG_Globals
import YDWE_Base

//library YDWETimerPattern:
//***************************************************
//* �� - Matrix ����ģ�庯��
//*--------------------
//* ���ߣ�Warft_TigerCN  �����Ż���Fetrix_sai
//***************************************************
    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    //                                       Timer Pattern Union                                              //
    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    function YDWETimerPattern__SingleMagic takes unit sour,unit targ,real x,real y,real h,integer uid,integer aid,integer lv,integer order returns nothing
        local unit dummy= CreateUnit(GetOwningPlayer(sour), uid, x, y, GetUnitFacing(sour))
        call UnitApplyTimedLife(dummy, 'BHwe', 1.0)
        call UnitAddAbility(dummy, aid)
        call SetUnitAbilityLevel(dummy, aid, lv)
        call SetUnitFlyHeight(dummy, h, 0.0)
        call IssueTargetOrderById(dummy, order, targ)
        //debug call BJDebugMsg("Target order")
        set dummy=null
    endfunction
    function YDWETimerPattern__GetUnitZ takes unit u returns real
        call MoveLocation(YDWETimerPattern__yd_loc, GetUnitX(u), GetUnitY(u))
        return GetUnitFlyHeight(u) + GetLocationZ(YDWETimerPattern__yd_loc)
    endfunction
    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    //                                            Filter Funcs                                                //
    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    function YDWETimerPattern__EnemyFilter takes unit u,unit caster returns boolean
        return IsUnitType(u, UNIT_TYPE_MAGIC_IMMUNE) == false and IsUnitType(u, UNIT_TYPE_RESISTANT) == false and IsUnitType(u, UNIT_TYPE_SLEEPING) == false and GetUnitState(u, UNIT_STATE_LIFE) > 0.405 and IsUnitType(u, UNIT_TYPE_STRUCTURE) == false and IsUnitIllusion(u) == false and IsUnitHidden(u) == false and IsUnitEnemy(u, GetOwningPlayer(caster)) and IsUnitVisible(u, GetOwningPlayer(caster))
    endfunction
    function YDWETimerPattern__TreeFilter takes nothing returns boolean
        local integer id= GetDestructableTypeId(GetFilterDestructable())
        return id == 'LTlt' or id == 'ATtr' or id == 'BTtw' or id == 'KTtw' or id == 'YTft' or id == 'JTct' or id == 'YTst' or id == 'YTct' or id == 'YTwt' or id == 'JTtw' or id == 'DTsh' or id == 'FTtw' or id == 'CTtr' or id == 'ITtw' or id == 'NTtw' or id == 'OTtw' or id == 'ZTtw' or id == 'WTst' or id == 'GTsh' or id == 'VTlt' or id == 'WTtw' or id == 'ATtc' or id == 'BTtc' or id == 'CTtc' or id == 'ITtc' or id == 'NTtc' or id == 'ZTtc'
    endfunction
    function YDWETimerPattern__DamageFilter takes nothing returns boolean
        local unit u= GetFilterUnit()
        local integer d= YDWETimerPattern__tmp_data
        if not ( IsUnitInGroup(u, s__YDWETimerPattern__Thread_g[d]) ) and s__YDWETimerPattern__Thread_switch[d] != 0 and YDWETimerPattern__EnemyFilter(u , s__YDWETimerPattern__Thread_caster[d]) then
            call UnitDamageTarget(s__YDWETimerPattern__Thread_caster[d], u, s__YDWETimerPattern__Thread_amount[d], true, true, bj_lastSetAttackType, bj_lastSetDamageType, bj_lastSetWeaponType)
            call DestroyEffect(AddSpecialEffectTarget(s__YDWETimerPattern__Thread_dsfx[d], u, s__YDWETimerPattern__Thread_part[d]))
            if s__YDWETimerPattern__Thread_skills[d] > '0000' and s__YDWETimerPattern__Thread_skills[d] != 0 and s__YDWETimerPattern__Thread_order[d] > 0 and s__YDWETimerPattern__Thread_order[d] != 0 then
                call YDWETimerPattern__SingleMagic(s__YDWETimerPattern__Thread_caster[d] , u , s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[d]] , s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[d]] , GetUnitFlyHeight(s__YDWETimerPattern__Thread_obj[d]) , s__YDWETimerPattern__Thread_unitid[d] , s__YDWETimerPattern__Thread_skills[d] , s__YDWETimerPattern__Thread_level[d] , s__YDWETimerPattern__Thread_order[d])
            endif
            if not ( s__YDWETimerPattern__Thread_recycle[d] ) then
                //debug call BJDebugMsg("|cff00ff00[YDWE] Timer Pattern : |r A one-time.")
                set s__YDWETimerPattern__Thread_switch[d]=0
            endif
            set s__YDWETimerPattern__Thread_target[d]=u
            //call GroupAddUnit(d.g, u)
            set u=null
            return true
        endif
        set u=null
        return false
    endfunction
    function YDWETimerPattern__TreeKill takes nothing returns nothing
        local destructable d= GetEnumDestructable()
        if GetWidgetLife(d) > 0.405 then
            call KillDestructable(d)
        endif
        set d=null
    endfunction

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                         Major Structure Code                                           //
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

//Struct method generated initializers/callers:
public function sa__YDWETimerPattern__Thread_onDestroy takes nothing returns boolean
local integer self=f__arg_this
            call RemoveSavedInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((s__YDWETimerPattern__Thread_obj[self])))))))) // INLINED!!
            call RemoveSavedInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((s__YDWETimerPattern__Thread_t[self])))))))) // INLINED!!
            call GroupClear(s__YDWETimerPattern__Thread_g[self])
            call DestroyGroup(s__YDWETimerPattern__Thread_g[self])
            call PauseTimer(s__YDWETimerPattern__Thread_t[self])
            call DestroyTimer(s__YDWETimerPattern__Thread_t[self])
            call s__YDWETimerPattern__YDVector3_deallocate(s__YDWETimerPattern__Thread_des[self])
            call s__YDWETimerPattern__YDVector3_deallocate(s__YDWETimerPattern__Thread_pos[self])
            call s__YDWETimerPattern__YDVector3_deallocate(s__YDWETimerPattern__Thread_vel[self])
            set s__YDWETimerPattern__Thread_caster[self]=null
            set s__YDWETimerPattern__Thread_target[self]=null
            set s__YDWETimerPattern__Thread_obj[self]=null
            set s__YDWETimerPattern__Thread_g[self]=null
            set s__YDWETimerPattern__Thread_t[self]=null
            set s__YDWETimerPattern__Thread_amount[self]=0
            set s__YDWETimerPattern__Thread_skills[self]=0
            set s__YDWETimerPattern__Thread_order[self]=0
            set s__YDWETimerPattern__Thread_dsfx[self]=""
            set s__YDWETimerPattern__Thread_gsfx[self]=""
            set s__YDWETimerPattern__Thread_wsfx[self]=""
            set s__YDWETimerPattern__Thread_part[self]=""
   return true
endfunction

//Generated destructor of YDWETimerPattern__YDVector3
public function s__YDWETimerPattern__YDVector3_deallocate takes integer self returns nothing
    if self==0 then
        return
    elseif (si__YDWETimerPattern__YDVector3_V[self]!=-1) then
        return
    endif
    set si__YDWETimerPattern__YDVector3_V[self]=si__YDWETimerPattern__YDVector3_F
    set si__YDWETimerPattern__YDVector3_F=self
endfunction

//Generated destructor of YDWETimerPattern__Thread
function sc__YDWETimerPattern__Thread_deallocate takes integer self returns nothing
    if self==0 then
        return
    elseif (si__YDWETimerPattern__Thread_V[self]!=-1) then
        return
    endif
    set f__arg_this=self
    call TriggerEvaluate(st__YDWETimerPattern__Thread_onDestroy[si__YDWETimerPattern__Thread_type[self]])
    set si__YDWETimerPattern__Thread_V[self]=si__YDWETimerPattern__Thread_F
    set si__YDWETimerPattern__Thread_F=self
endfunction

//Generated allocator of YDWETimerPattern__Thread
function s__YDWETimerPattern__Thread__allocate takes nothing returns integer
    local integer self=si__YDWETimerPattern__Thread_F
    if (self!=0) then
        set si__YDWETimerPattern__Thread_F=si__YDWETimerPattern__Thread_V[self]
    else
        set si__YDWETimerPattern__Thread_I=si__YDWETimerPattern__Thread_I+1
        set self=si__YDWETimerPattern__Thread_I
    endif
    if (self>8190) then
        return 0
    endif

    set si__YDWETimerPattern__Thread_type[self]=50
    set si__YDWETimerPattern__Thread_V[self]=-1
    return self
endfunction

//Generated allocator of YDWETimerPattern__Parabola
function s__YDWETimerPattern__Parabola__allocate takes nothing returns integer
    local integer self=s__YDWETimerPattern__Thread__allocate()
    local integer kthis
        if(self==0) then
            return 0
        endif
        set si__YDWETimerPattern__Thread_type[self]=51
        set kthis=self

    return self
endfunction

function s__YDWETimerPattern__Thread__staticgetindex takes handle h returns integer
    return (LoadInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId((h)))))))) // INLINED!!
endfunction
function s__YDWETimerPattern__Thread__staticsetindex takes handle h,integer value returns nothing
    call SaveInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId((h)))) )), ( value)) // INLINED!!
endfunction
function s__YDWETimerPattern__Thread_flush takes handle h returns nothing
    call RemoveSavedInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId((h))))))) // INLINED!!
endfunction
function s__YDWETimerPattern__Thread__set_x takes integer self,real value returns nothing
    set s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]]=value
    call SetUnitX(s__YDWETimerPattern__Thread_obj[self], value)
endfunction
function s__YDWETimerPattern__Thread__set_y takes integer self,real value returns nothing
    set s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]]=value
    call SetUnitY(s__YDWETimerPattern__Thread_obj[self], value)
endfunction
function s__YDWETimerPattern__Thread__set_z takes integer self,real value returns nothing
    set s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_pos[self]]=value
    call MoveLocation(YDWETimerPattern__yd_loc, s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]], s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]])
    call SetUnitFlyHeight(s__YDWETimerPattern__Thread_obj[self], value - GetLocationZ(YDWETimerPattern__yd_loc), 0)
endfunction
function s__YDWETimerPattern__Thread_onDestroy takes integer self returns nothing
    //debug call BJDebugMsg("|cff00ff00[YDWE] Timer Pattern : |r Knockback stopped!")
    call RemoveSavedInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((s__YDWETimerPattern__Thread_obj[self])))))))) // INLINED!!
    call RemoveSavedInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((s__YDWETimerPattern__Thread_t[self])))))))) // INLINED!!
    call GroupClear(s__YDWETimerPattern__Thread_g[self])
    call DestroyGroup(s__YDWETimerPattern__Thread_g[self])
    call PauseTimer(s__YDWETimerPattern__Thread_t[self])
    call DestroyTimer(s__YDWETimerPattern__Thread_t[self])
    call s__YDWETimerPattern__YDVector3_deallocate(s__YDWETimerPattern__Thread_des[self])
    call s__YDWETimerPattern__YDVector3_deallocate(s__YDWETimerPattern__Thread_pos[self])
    call s__YDWETimerPattern__YDVector3_deallocate(s__YDWETimerPattern__Thread_vel[self])
    set s__YDWETimerPattern__Thread_caster[self]=null
    set s__YDWETimerPattern__Thread_target[self]=null
    set s__YDWETimerPattern__Thread_obj[self]=null
    set s__YDWETimerPattern__Thread_g[self]=null
    set s__YDWETimerPattern__Thread_t[self]=null
    set s__YDWETimerPattern__Thread_amount[self]=0
    set s__YDWETimerPattern__Thread_skills[self]=0
    set s__YDWETimerPattern__Thread_order[self]=0
    set s__YDWETimerPattern__Thread_dsfx[self]=""
    set s__YDWETimerPattern__Thread_gsfx[self]=""
    set s__YDWETimerPattern__Thread_wsfx[self]=""
    set s__YDWETimerPattern__Thread_part[self]=""
endfunction
function s__YDWETimerPattern__Parabola_move takes nothing returns nothing
    local integer self= (LoadInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((GetExpiredTimer()))))))))) // INLINED!!
    //local real vx = .des.x - .pos.x
    //local real vy = .des.y - .pos.y
    //local real vz = .des.z - .pos.z
    //if vx * vx + vy * vy + vz * vz > 900.0 then
        call s__YDWETimerPattern__Thread__set_x(self,GetUnitX(s__YDWETimerPattern__Thread_obj[self]) + s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_vel[self]]) //.pos.x + .vel.x
        call s__YDWETimerPattern__Thread__set_y(self,GetUnitY(s__YDWETimerPattern__Thread_obj[self]) + s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_vel[self]]) //.pos.y + .vel.y
        call s__YDWETimerPattern__Thread__set_z(self,YDWETimerPattern__GetUnitZ(s__YDWETimerPattern__Thread_obj[self]) + s__YDWETimerPattern__Thread_ac[self] * s__YDWETimerPattern__Thread_step[self] * 2 + s__YDWETimerPattern__Thread_ac[self] * s__YDWETimerPattern__Thread_dist[self] + s__YDWETimerPattern__Thread_bc[self]) //.pos.z + .ac * .step * 2 + .ac * .dist + .bc
        set s__YDWETimerPattern__Thread_step[self]=s__YDWETimerPattern__Thread_step[self] + s__YDWETimerPattern__Thread_dist[self]
        //debug call BJDebugMsg("|cff00ff00[YDWE] Timer Pattern : |r high = ." + R2S(GetLocationZ(yd_loc)))
        if (RMinBJ(RMaxBJ(((s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]])*1.0), yd_MapMinX), yd_MapMaxX)) != s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]] or (RMinBJ(RMaxBJ(((s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]])*1.0), yd_MapMinY), yd_MapMaxY)) != s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]] or s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_pos[self]] <= GetLocationZ(YDWETimerPattern__yd_loc) then // INLINED!!
            set s__YDWETimerPattern__Thread_switch[self]=0
        endif
        if s__YDWETimerPattern__Thread_amount[self] > 0.0 then
            //call self.damage(.caster, .pos.x + .vel.x, .pos.y + .vel.y, GetUnitZ(.obj), false, false)
            set YDWETimerPattern__tmp_data=(self)
            call GroupEnumUnitsInRange(s__YDWETimerPattern__Thread_g[self], s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]] + s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_vel[self]], s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]] + s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_vel[self]], 120.0, Condition(function YDWETimerPattern__DamageFilter))
            //debug call BJDebugMsg("|cff00ff00[YDWE] Timer Pattern : |r Area damage.")
        endif
    //else
        //set .switch = 0
    //endif
    if s__YDWETimerPattern__Thread_switch[self] == 0 then
        call SetUnitFlyHeight(s__YDWETimerPattern__Thread_obj[self], GetUnitDefaultFlyHeight(s__YDWETimerPattern__Thread_obj[self]), 200.0)
        call SetUnitTimeScale(s__YDWETimerPattern__Thread_obj[self], 1)
        //YDWETriggerEvent
        call YDWESyStemAbilityCastingOverTriggerAction(s__YDWETimerPattern__Thread_obj[self] , 7)
        call sc__YDWETimerPattern__Thread_deallocate(self)
    endif
endfunction

//Generated allocator of YDWETimerPattern__YDVector3
function s__YDWETimerPattern__YDVector3__allocate takes nothing returns integer
    local integer self=si__YDWETimerPattern__YDVector3_F
    if (self!=0) then
        set si__YDWETimerPattern__YDVector3_F=si__YDWETimerPattern__YDVector3_V[self]
    else
        set si__YDWETimerPattern__YDVector3_I=si__YDWETimerPattern__YDVector3_I+1
        set self=si__YDWETimerPattern__YDVector3_I
    endif
    if (self>8190) then
        return 0
    endif

    set si__YDWETimerPattern__YDVector3_V[self]=-1
    return self
endfunction

function s__YDWETimerPattern__Parabola_create takes unit source,unit object,real angle,real distance,real time,real interval,real high,real damage,string attach,string deff returns integer
    local integer self= s__YDWETimerPattern__Parabola__allocate()
    local real vx= 0.0
    local real vy= 0.0
    local real vz= 0.0
    set s__YDWETimerPattern__Thread_des[self]=s__YDWETimerPattern__YDVector3__allocate()
    set s__YDWETimerPattern__Thread_pos[self]=s__YDWETimerPattern__YDVector3__allocate()
    set s__YDWETimerPattern__Thread_vel[self]=s__YDWETimerPattern__YDVector3__allocate()
    set s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]]=GetUnitX(object)
    set s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]]=GetUnitY(object)
    set s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_pos[self]]=YDWETimerPattern__GetUnitZ(object)
    set s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_des[self]]=s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]] + distance * Cos(angle)
    set s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_des[self]]=s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]] + distance * Sin(angle)
    call MoveLocation(YDWETimerPattern__yd_loc, s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_des[self]], s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_des[self]])
    set s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_des[self]]=GetLocationZ(YDWETimerPattern__yd_loc)
    if s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_pos[self]] > s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_des[self]] then
        set high=high + s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_pos[self]]
    else
        set high=high + s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_des[self]]
    endif
    set s__YDWETimerPattern__Thread_ac[self]=( 2 * ( s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_pos[self]] + s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_des[self]] ) - 4 * high ) / ( distance * distance )
    set s__YDWETimerPattern__Thread_bc[self]=( s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_des[self]] - s__YDWETimerPattern__YDVector3_z[s__YDWETimerPattern__Thread_pos[self]] - s__YDWETimerPattern__Thread_ac[self] * distance * distance ) / distance
    set s__YDWETimerPattern__Thread_dist[self]=distance * interval / time
    set s__YDWETimerPattern__Thread_ac[self]=s__YDWETimerPattern__Thread_ac[self] * s__YDWETimerPattern__Thread_dist[self]
    set s__YDWETimerPattern__Thread_bc[self]=s__YDWETimerPattern__Thread_bc[self] * s__YDWETimerPattern__Thread_dist[self]
    set s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_vel[self]]=s__YDWETimerPattern__Thread_dist[self] * Cos(angle)
    set s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_vel[self]]=s__YDWETimerPattern__Thread_dist[self] * Sin(angle)
    set s__YDWETimerPattern__Thread_step[self]=0.0
    set s__YDWETimerPattern__Thread_caster[self]=source
    set s__YDWETimerPattern__Thread_obj[self]=object
    set s__YDWETimerPattern__Thread_amount[self]=damage
    set s__YDWETimerPattern__Thread_dsfx[self]=deff
    set s__YDWETimerPattern__Thread_part[self]=attach
    set s__YDWETimerPattern__Thread_switch[self]=1
    set s__YDWETimerPattern__Thread_recycle[self]=true
    set s__YDWETimerPattern__Thread_t[self]=CreateTimer()
    set s__YDWETimerPattern__Thread_g[self]=CreateGroup()
    call UnitAddAbility(s__YDWETimerPattern__Thread_obj[self], 'Amrf')
    call UnitRemoveAbility(s__YDWETimerPattern__Thread_obj[self], 'Amrf')
    call TimerStart(s__YDWETimerPattern__Thread_t[self], interval, true, function s__YDWETimerPattern__Parabola_move)
    call GroupAddUnit(s__YDWETimerPattern__Thread_g[self], object)
    call SaveInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((object))))) )), ( ( (self)))) // INLINED!!
    call SaveInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((s__YDWETimerPattern__Thread_t[self]))))) )), ( ( (self)))) // INLINED!!
    return self
endfunction
// uniform speed
function s__YDWETimerPattern__Linear_move takes nothing returns nothing
    local integer self= (LoadInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((GetExpiredTimer()))))))))) // INLINED!!
    if s__YDWETimerPattern__Thread_step[self] > s__YDWETimerPattern__Thread_dist[self] then
        call s__YDWETimerPattern__Thread__set_x(self,GetUnitX(s__YDWETimerPattern__Thread_obj[self]) + s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_vel[self]]) //.pos.x + .vel.x
        call s__YDWETimerPattern__Thread__set_y(self,GetUnitY(s__YDWETimerPattern__Thread_obj[self]) + s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_vel[self]]) //.pos.y + .vel.y
        //set .pos.z = GetUnitZ(.obj)
        set s__YDWETimerPattern__Thread_step[self]=s__YDWETimerPattern__Thread_step[self] - s__YDWETimerPattern__Thread_dist[self]
        //call self.damage(.caster, .pos.x, .pos.y, .pos.z, true, true)
        set YDWETimerPattern__tmp_data=(self)
        call GroupEnumUnitsInRange(s__YDWETimerPattern__Thread_g[self], s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]] + s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_vel[self]], s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]] + s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_vel[self]], 120.0, Condition(function YDWETimerPattern__DamageFilter))
        if (RMinBJ(RMaxBJ(((s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]])*1.0), yd_MapMinX), yd_MapMaxX)) != s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]] or (RMinBJ(RMaxBJ(((s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]])*1.0), yd_MapMinY), yd_MapMaxY)) != s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]] then // INLINED!!
            set s__YDWETimerPattern__Thread_switch[self]=0
        endif
    else
        set s__YDWETimerPattern__Thread_switch[self]=0
    endif
    if s__YDWETimerPattern__Thread_switch[self] == 0 then
        // YDWETriggerEvent
        if s__YDWETimerPattern__Thread_target[self] != null then
            //debug call BJDebugMsg("|cff00ff00[YDWE] Timer Pattern : |r  |cffff0000" + GetUnitName(.target) + "|r was hit!!!")
            //call YDWESaveUnitByString(I2S(YDWEH2I(.caster)), "MoonPriestessArrow", .target)
            set bj_lastAbilityTargetUnit=s__YDWETimerPattern__Thread_target[self]
            call YDWESyStemAbilityCastingOverTriggerAction(s__YDWETimerPattern__Thread_caster[self] , 8)
        else
            call YDWESyStemAbilityCastingOverTriggerAction(s__YDWETimerPattern__Thread_caster[self] , 9)
        endif
        //call KillUnit(.obj)
        call RemoveUnit(s__YDWETimerPattern__Thread_obj[self])
        call sc__YDWETimerPattern__Thread_deallocate(self)
    endif
endfunction

//Generated allocator of YDWETimerPattern__Linear
function s__YDWETimerPattern__Linear__allocate takes nothing returns integer
    local integer self=s__YDWETimerPattern__Thread__allocate()
    local integer kthis
    if(self==0) then
        return 0
    endif
    set si__YDWETimerPattern__Thread_type[self]=52
    set kthis=self

    return self
endfunction

function s__YDWETimerPattern__Linear_create takes unit source,unit object,real angle,real distance,real time,real interval,integer uid,integer aid,integer lv,integer orderid,string attach,string sfx returns integer
    local integer self= s__YDWETimerPattern__Linear__allocate()
    set s__YDWETimerPattern__Thread_des[self]=s__YDWETimerPattern__YDVector3__allocate()
    set s__YDWETimerPattern__Thread_pos[self]=s__YDWETimerPattern__YDVector3__allocate()
    set s__YDWETimerPattern__Thread_vel[self]=s__YDWETimerPattern__YDVector3__allocate()
    set s__YDWETimerPattern__Thread_step[self]=distance
    set s__YDWETimerPattern__Thread_dist[self]=distance * interval / time
    set s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_vel[self]]=s__YDWETimerPattern__Thread_dist[self] * Cos(angle)
    set s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_vel[self]]=s__YDWETimerPattern__Thread_dist[self] * Sin(angle)
    set s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]]=GetUnitX(object)
    set s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]]=GetUnitY(object)
    set s__YDWETimerPattern__Thread_caster[self]=source
    set s__YDWETimerPattern__Thread_obj[self]=object
    set s__YDWETimerPattern__Thread_unitid[self]=uid
    set s__YDWETimerPattern__Thread_skills[self]=aid
    set s__YDWETimerPattern__Thread_level[self]=lv
    set s__YDWETimerPattern__Thread_order[self]=orderid
    set s__YDWETimerPattern__Thread_part[self]=attach
    set s__YDWETimerPattern__Thread_gsfx[self]=sfx
    set s__YDWETimerPattern__Thread_switch[self]=1
    set s__YDWETimerPattern__Thread_recycle[self]=false
    set s__YDWETimerPattern__Thread_t[self]=CreateTimer()
    set s__YDWETimerPattern__Thread_g[self]=CreateGroup()
    call TimerStart(s__YDWETimerPattern__Thread_t[self], interval, true, function s__YDWETimerPattern__Linear_move)
    call SaveInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((s__YDWETimerPattern__Thread_t[self]))))) )), ( ( (self)))) // INLINED!!
    return self
endfunction
// Uniform deceleration
function s__YDWETimerPattern__Deceleration_move takes nothing returns nothing
    local integer self= (LoadInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((GetExpiredTimer()))))))))) // INLINED!!
    local real xp= GetUnitX(s__YDWETimerPattern__Thread_obj[self]) + s__YDWETimerPattern__Thread_dist[self] * s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_vel[self]]
    local real yp= GetUnitY(s__YDWETimerPattern__Thread_obj[self]) + s__YDWETimerPattern__Thread_dist[self] * s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_vel[self]]
    if s__YDWETimerPattern__Thread_volume[self] == false then
        //debug call BJDebugMsg("|cff00ff00[YDWE] Timer Pattern : |rPathable without terrain.")
        if IsTerrainPathable(xp, yp, PATHING_TYPE_WALKABILITY) then
            set s__YDWETimerPattern__Thread_switch[self]=0
        else
            call s__YDWETimerPattern__Thread__set_x(self,xp)
            call s__YDWETimerPattern__Thread__set_y(self,yp)
        endif
    else
        call s__YDWETimerPattern__Thread__set_x(self,xp)
        call s__YDWETimerPattern__Thread__set_y(self,yp)
    endif
    if s__YDWETimerPattern__Thread_follow[self] == 0 then
        if GetUnitFlyHeight(s__YDWETimerPattern__Thread_obj[self]) < 5. then
            if IsTerrainPathable(s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]], s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]], PATHING_TYPE_FLOATABILITY) then
                call DestroyEffect(AddSpecialEffect(s__YDWETimerPattern__Thread_gsfx[self], s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]], s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]]))
            else
                call DestroyEffect(AddSpecialEffect(s__YDWETimerPattern__Thread_wsfx[self], s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]], s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]]))
            endif
        endif
    endif
    set s__YDWETimerPattern__Thread_follow[self]=s__YDWETimerPattern__Thread_follow[self] + 1
    if s__YDWETimerPattern__Thread_follow[self] == 2 then
        set s__YDWETimerPattern__Thread_follow[self]=0
    endif
    if s__YDWETimerPattern__Thread_killdest[self] then
        call MoveRectTo(YDWETimerPattern__Area, s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]], s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]])
        call EnumDestructablesInRect(YDWETimerPattern__Area, YDWETimerPattern__Bexpr, function YDWETimerPattern__TreeKill)
    endif
    if s__YDWETimerPattern__Thread_amount[self] > 0.0 then
        //call self.damage(.caster, .pos.x, .pos.y, 0.0, false, .recycle)
        set YDWETimerPattern__tmp_data=(self)
        call GroupEnumUnitsInRange(s__YDWETimerPattern__Thread_g[self], s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]], s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]], 120.0, Condition(function YDWETimerPattern__DamageFilter))
    endif
    set s__YDWETimerPattern__Thread_dist[self]=s__YDWETimerPattern__Thread_dist[self] - s__YDWETimerPattern__Thread_step[self]
    if s__YDWETimerPattern__Thread_dist[self] <= 0.0 or (RMinBJ(RMaxBJ(((s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]])*1.0), yd_MapMinX), yd_MapMaxX)) != s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]] or (RMinBJ(RMaxBJ(((s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]])*1.0), yd_MapMinY), yd_MapMaxY)) != s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]] then // INLINED!!
        set s__YDWETimerPattern__Thread_switch[self]=0
    endif
    if s__YDWETimerPattern__Thread_switch[self] == 0 then
        call SetUnitFlyHeight(s__YDWETimerPattern__Thread_obj[self], GetUnitDefaultFlyHeight(s__YDWETimerPattern__Thread_obj[self]), 200.0)
        call SetUnitTimeScale(s__YDWETimerPattern__Thread_obj[self], 1)
        // YDWETriggerEvent
        call YDWESyStemAbilityCastingOverTriggerAction(s__YDWETimerPattern__Thread_obj[self] , 6)
        call sc__YDWETimerPattern__Thread_deallocate(self)
    endif
endfunction

//Generated allocator of YDWETimerPattern__Deceleration
function s__YDWETimerPattern__Deceleration__allocate takes nothing returns integer
    local integer self=s__YDWETimerPattern__Thread__allocate()
    local integer kthis
    if(self==0) then
        return 0
    endif
    set si__YDWETimerPattern__Thread_type[self]=53
    set kthis=self

    return self
endfunction

function s__YDWETimerPattern__Deceleration_create takes unit source,unit object,real angle,real distance,real time,real interval,real damage,boolean killtrees,boolean cycle,boolean path,string part,string geff,string weff returns integer
    local integer self= s__YDWETimerPattern__Deceleration__allocate()
    local real vx= 0.0
    local real vy= 0.0
    local real l= 0.0
    set s__YDWETimerPattern__Thread_des[self]=s__YDWETimerPattern__YDVector3__allocate()
    set s__YDWETimerPattern__Thread_pos[self]=s__YDWETimerPattern__YDVector3__allocate()
    set s__YDWETimerPattern__Thread_vel[self]=s__YDWETimerPattern__YDVector3__allocate()
    set s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_vel[self]]=Cos(angle)
    set s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_vel[self]]=Sin(angle)
    set s__YDWETimerPattern__Thread_dist[self]=2 * distance * interval / time
    set s__YDWETimerPattern__Thread_step[self]=s__YDWETimerPattern__Thread_dist[self] * interval / time
    set s__YDWETimerPattern__YDVector3_x[s__YDWETimerPattern__Thread_pos[self]]=GetUnitX(object)
    set s__YDWETimerPattern__YDVector3_y[s__YDWETimerPattern__Thread_pos[self]]=GetUnitY(object)
    set s__YDWETimerPattern__Thread_caster[self]=source
    set s__YDWETimerPattern__Thread_obj[self]=object
    set s__YDWETimerPattern__Thread_amount[self]=damage
    set s__YDWETimerPattern__Thread_killdest[self]=killtrees
    set s__YDWETimerPattern__Thread_recycle[self]=cycle
    set s__YDWETimerPattern__Thread_volume[self]=path
    set s__YDWETimerPattern__Thread_gsfx[self]=geff
    set s__YDWETimerPattern__Thread_wsfx[self]=weff
    set s__YDWETimerPattern__Thread_switch[self]=1
    set s__YDWETimerPattern__Thread_follow[self]=0
    set s__YDWETimerPattern__Thread_g[self]=CreateGroup()
    set s__YDWETimerPattern__Thread_t[self]=CreateTimer()
    call TimerStart(s__YDWETimerPattern__Thread_t[self], interval, true, function s__YDWETimerPattern__Deceleration_move)
    call SaveInteger(YDHT, StringHash(("YDWETimerPattern." )), StringHash(( I2S((GetHandleId(((s__YDWETimerPattern__Thread_t[self]))))) )), ( ( (self)))) // INLINED!!
    return self
endfunction
// Jump Attack PUI
function YDWETimerPatternJumpAttack takes unit u,real face,real dis,real lasttime,real timeout,real high,real damage,string part,string dsfx returns nothing
    if u == null then
        //debug call BJDebugMsg("|cff00ff00[YDWE] Timer Pattern : |r No object!")
        return
    endif
    call s__YDWETimerPattern__Parabola_create(u , u , Deg2Rad(face) , RMaxBJ(dis, 0) , RMaxBJ(lasttime, 0) , RMaxBJ(timeout, 0) , high , damage , part , dsfx)
endfunction
// Moon Priestess Arrow PUI
function YDWETimerPatternMoonPriestessArrow takes unit u,real face,real dis,real lasttime,real timeout,integer lv,integer aid,integer uid,string order,string part,string dsfx returns nothing
    local unit sour= null
    if u == null then
        //debug call BJDebugMsg("|cff00ff00[YDWE] Timer Pattern : |r No object!")
        return
    endif
    set sour=(LoadUnitHandle(YDHT, StringHash((I2S((GetHandleId((u)))) )), StringHash(( "MoonPriestessArrow")))) // INLINED!!
    if sour == null then
        set sour=u
    endif
    call s__YDWETimerPattern__Linear_create(sour , u , Deg2Rad(face) , RMaxBJ(dis, 0) , RMaxBJ(lasttime, 0) , RMaxBJ(timeout, 0) , uid , aid , IMaxBJ(lv, 1) , OrderId(order) , part , dsfx)
    //call YDWEFlushMissionByString(I2S(YDWEH2I(u)))
    set sour=null
endfunction
// Rush Slide PUI
public function YDWETimerPatternRushSlide takes unit u,real face,real dis,real lasttime,real timeout,real damage,boolean killtrees,boolean cycle,boolean path,string part,string gsfx,string wsfx returns nothing
    if u == null then
        //debug call BJDebugMsg("|cff00ff00[YDWE] Timer Pattern : |r No object!")
        return
    endif
    call s__YDWETimerPattern__Deceleration_create(u , u , Deg2Rad(face) , RMaxBJ(dis, 0) , RMaxBJ(lasttime, 0) , RMaxBJ(timeout, 0) , damage , killtrees , cycle , path , part , gsfx , wsfx)
endfunction
function YDWETimerPattern__Init takes nothing returns nothing
    set YDWETimerPattern__Area=Rect(- 120.0, - 120.0, 120.0, 120.0)
    set YDWETimerPattern__Bexpr=Filter(function YDWETimerPattern__TreeFilter)
endfunction

//library YDWETimerPattern ends