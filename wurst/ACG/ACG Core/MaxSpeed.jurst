package MaxSpeed

import ACG_Package
import Table2

//library MaxSpeed:
    
    
        //private:
        
        //temp variables
        






//Implemented from module Init:

            function s__ModSpeed_Init___onInit takes nothing returns nothing
                set s__ModSpeed_table=s__Table_create()
            endfunction

        
        function s__ModSpeed_destroy takes integer self returns nothing
            set s__ModSpeed_speed[self]=0.
            if ( s__ModSpeed_next[self] != 0 ) then
                set s__ModSpeed_prev[s__ModSpeed_next[self]]=s__ModSpeed_prev[self]
            endif
            set s__ModSpeed_next[s__ModSpeed_prev[self]]=s__ModSpeed_next[self]
            set s__ModSpeed_prev[self]=s__ModSpeed_prev[(0)]
            set s__ModSpeed_prev[(0)]=self
            if ( s__ModSpeed_next[(0)] == 0 ) then
                call PauseTimer(s__ModSpeed_tm)



            endif


                    call RemoveSavedInteger(Table__ht, (s__ModSpeed_table), (GetHandleId(s__ModSpeed_u[self]))) // INLINED!!




        endfunction
        
        function s__ModSpeed__get_moveFilter takes integer self returns boolean
            return GetUnitAbilityLevel(s__ModSpeed_u[self], 'BSTN') < 1 and GetUnitAbilityLevel(s__ModSpeed_u[self], 'BPSE') < 1 and GetUnitMoveSpeed(s__ModSpeed_u[self]) > 521.0 and not IsUnitPaused(s__ModSpeed_u[self]) and not s__ModSpeed_lead[self]
        endfunction
        
        
        function s__ModSpeed_move takes integer self returns nothing
            if ( not s__ModSpeed__get_moveFilter(self) ) then
                return
            endif
            set s__ModSpeed_x=GetUnitX(s__ModSpeed_u[self])
            set s__ModSpeed_y=GetUnitY(s__ModSpeed_u[self])
            set s__ModSpeed_dx=s__ModSpeed_x - s__ModSpeed_lastX[self]
            set s__ModSpeed_dy=s__ModSpeed_y - s__ModSpeed_lastY[self]
            set s__ModSpeed_lastX[self]=s__ModSpeed_x
            set s__ModSpeed_lastY[self]=s__ModSpeed_y
            set s__ModSpeed_dist=SquareRoot(s__ModSpeed_dx * s__ModSpeed_dx + s__ModSpeed_dy * s__ModSpeed_dy) / MaxSpeed__PERIOD
            if ( s__ModSpeed_dist >= MaxSpeed__MIN_SPEED and s__ModSpeed_dist <= MaxSpeed__MAX_SPEED ) then
                set s__ModSpeed_rate=( s__ModSpeed_speed[self] - 522. ) / s__ModSpeed_dist
                set s__ModSpeed_lastX[self]=s__ModSpeed_x + s__ModSpeed_dx * s__ModSpeed_rate
                set s__ModSpeed_lastY[self]=s__ModSpeed_y + s__ModSpeed_dy * s__ModSpeed_rate
                call SetUnitX(s__ModSpeed_u[self], s__ModSpeed_lastX[self])
                call SetUnitY(s__ModSpeed_u[self], s__ModSpeed_lastY[self])



            endif
        endfunction
        
        function s__ModSpeed_iterate takes nothing returns nothing
            local integer self= (0)
            loop
                set self=s__ModSpeed_next[self]
                exitwhen ( self == 0 )
                if ( GetWidgetLife(s__ModSpeed_u[self]) < 0.405 ) then
                    call s__ModSpeed_destroy(self)
                else
                    call s__ModSpeed_move(self)
                endif
            endloop
        endfunction
        
        
        //public:
        function s__ModSpeed_getInstance takes unit u returns integer
            //local integer self= (0)


                    if ( (HaveSavedInteger(Table__ht, (s__ModSpeed_table), (GetHandleId(u)))) ) then // INLINED!!
                        return ((LoadInteger(Table__ht, (s__ModSpeed_table), (GetHandleId(u))))) // INLINED!!
                    endif














            return (0)
        endfunction
        
        function s__ModSpeed_setUnitLed takes unit u,boolean b returns nothing
            let self= s__ModSpeed_getInstance(u)
            if ( self > 0 ) then
                set s__ModSpeed_lead[self]=b
            endif
        endfunction
        
        function s__ModSpeed_getSpeed takes unit u returns real
            let self= s__ModSpeed_getInstance(u)
            if ( self > 0 and GetUnitMoveSpeed(u) > 521.0 ) then
                return s__ModSpeed_speed[self]
            endif
            return GetUnitMoveSpeed(u)
        endfunction
        
        function s__ModSpeed_setSpeed takes unit u,real amount returns nothing
            local integer self
            if ( u == null or GetWidgetLife(u) < 0.405 ) then
                return
            endif
            set self=s__ModSpeed_getInstance(u)
            if ( amount < 523. ) then
                if ( self > 0 ) then
                    call s__ModSpeed_destroy(self)
                endif
                return
            elseif ( self == 0 ) then
                if ( s__ModSpeed_prev[(0)] == 0 ) then
                    set s__ModSpeed_instanceMaxCount=s__ModSpeed_instanceMaxCount + 1
                    set self=s__ModSpeed_instanceMaxCount
                else
                    set self=s__ModSpeed_prev[(0)]
                    set s__ModSpeed_prev[(0)]=s__ModSpeed_prev[s__ModSpeed_prev[(0)]]
                endif
                if ( s__ModSpeed_next[(0)] == 0 ) then
                    call TimerStart(s__ModSpeed_tm, MaxSpeed__PERIOD, true, function s__ModSpeed_iterate)



                else
                    set s__ModSpeed_prev[s__ModSpeed_next[(0)]]=self
                endif
                set s__ModSpeed_next[self]=s__ModSpeed_next[(0)]
                set s__ModSpeed_next[(0)]=self
                set s__ModSpeed_prev[self]=(0)
                
                set s__ModSpeed_u[self]=u


                        call SaveInteger(Table__ht, (s__ModSpeed_table), (GetHandleId(u)), ( self)) // INLINED!!




            endif
            set amount=RMinBJ(amount, MaxSpeed__MAX_SPEED)
            set s__ModSpeed_lastX[self]=GetUnitX(u)
            set s__ModSpeed_lastY[self]=GetUnitY(u)
            set s__ModSpeed_speed[self]=amount
        endfunction
    //interface:
    function SetUnitLed takes unit u,boolean b returns nothing
        call s__ModSpeed_setUnitLed(u , b)
    endfunction
    function GetUnitMoveSpeedEx takes unit u returns real
        return s__ModSpeed_getSpeed(u)
    endfunction
    function SetUnitMoveSpeedEx takes unit u,real speed returns nothing
        call s__ModSpeed_setSpeed(u , speed)
    endfunction
//processed hook:     hook SetUnitMoveSpeed SetUnitMoveSpeedEx

public function sa___prototype253_SetUnitMoveSpeedEx takes nothing returns boolean
    call s__ModSpeed_setSpeed((f__arg_unit1) , ((f__arg_real1)*1.0)) // INLINED!!
    return true
endfunction

//library MaxSpeed ends