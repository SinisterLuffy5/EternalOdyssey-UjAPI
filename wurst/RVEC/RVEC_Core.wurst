package RVEC_Core

import ClosureTimers
import OrderIds

public let GameHT = InitHashtable()
public sound dummy_sound
public effect dummy_effect

public function SetPauseUnit(unit u, bool flag)
    if (IsUnitPaused(u) and not flag)
        PauseUnit(u, false)
    if (not IsUnitPaused(u) and flag)
        PauseUnit(u, true)

public function SoundStart(string path)
    dummy_sound = CreateSound(path, false, false, false, 12700, 12700, "Default")
    SetSoundVolume(dummy_sound, 127)
    StartSound(dummy_sound)

public function Effect(string str, real x, real y, real h, real yaw, real pitch, real roll, real scale, real duration, int r, int g, int b, int a)
    dummy_effect = AddSpecialEffect(str, x, y)
    SetSpecialEffectHeight(dummy_effect, h)
    SetSpecialEffectOrientation(dummy_effect, yaw, pitch, roll)
    SetSpecialEffectScale(dummy_effect, scale)
    SetSpecialEffectVertexColour(dummy_effect, r, g, b, a)
    if (duration > 0)
        let e = dummy_effect
        doAfter(duration) -> 
            SetSpecialEffectVisible(e, false)
            DestroyEffect(e)

public function PolarX(real x, real dist, real angle) returns real
    return MathPointProjectionX(x, angle, dist)

public function PolarY(real y, real dist, real angle) returns real
    return MathPointProjectionY(y, angle, dist)

public function SetEffectXY(effect e, real x, real y, int path)
    if (path == 1)
        if (not IsTerrainPathable(x, y, PATHING_TYPE_FLYABILITY))
            SetSpecialEffectPosition(e, x, y)
        return
    if (path == 2)
        if (IsPointWalkable(x, y))
            SetSpecialEffectPosition(e, x, y)
        return
    SetSpecialEffectPosition(e, x, y)

var WalkableItemCount = 0
item WalkableItem 
rect WalkableRect
item array WalkableItemEx
public function IsPointWalkable(real x, real y) returns bool
    var x2 = .0
    var y2 = .0
    bool isWalkable = false

    if (WalkableItem == null)
        WalkableItem = CreateItem('wtlg', .0, .0)
        SetItemVisible(WalkableItem, false)
    MoveRectTo(WalkableRect, x, y)
    EnumItemsInRect(WalkableRect, null, function PickItem)
    SetItemPosition(WalkableItem, x, y)
    x2 = GetItemX(WalkableItem)
    y2 = GetItemY(WalkableItem)
    SetItemVisible(WalkableItem, false)
    while (true)
        if (WalkableItemCount == 0)
            break
        WalkableItemCount--
        SetItemVisible(WalkableItemEx[WalkableItemCount], true)
        WalkableItemEx[WalkableItemCount] = null
    isWalkable = (x2 - x) * (x2 - x) + (y2 - y) * (y2 - y) <= 100
    return isWalkable

function PickItem()
    let itm = GetEnumItem()

    if (IsItemVisible(itm))
        SetItemVisible(itm, false)
        WalkableItemEx[WalkableItemCount] = itm
        WalkableItemCount++

public function visionArea(player p, real radius, real duration, real x, real y)
    let u = CreateUnit(p, 'h000', x, y, .0)
    if (radius >= .0 and radius <= 2200.)
        SetUnitCurrentSight(u, radius)
    if (duration > .0)
        doAfter(duration) -> 

            RemoveUnit(u)

public function FilterGeneric(unit u, unit t) returns bool
    return IsUnitAlive(t) and not IsUnitTower(t) and IsUnitEnemy(t, GetOwningPlayer(u)) and not IsUnitInvulnerable(t)

public function randomAngle() returns real
    return GetRandomReal(1, 360)

public function Angle(real x1, real y1, real x2, real y2) returns real
    return MathAngleBetweenPoints(x1, y1, x2, y2)

public function SetInvulUnit(unit u, bool flag)
    if (IsUnitInvulnerable(u) and  not flag)
        SetUnitInvulnerable(u, false)
    if (not IsUnitInvulnerable(u) and flag)
        SetUnitInvulnerable(u, true)

public function Distance(real x1, real y1, real x2, real y2) returns real
    return MathDistanceBetweenPoints(x1, y1, x2, y2)

public function SetUnitXY(unit u, real x, real y, int path) returns bool
    if (path == 1)
        if (not IsTerrainPathable(x, y, PATHING_TYPE_FLYABILITY))
            SetUnitX(u, x)
            SetUnitY(u, y)
            return true
        return false
    if (path == 2)
        if (IsPointWalkable(x, y))
            SetUnitX(u, x)
            SetUnitY(u, y)
            return true
        return false
    SetUnitX(u, x)
    SetUnitY(u, y)
    return true

public function StopUnitTimed(unit u, real duration)
    IssueImmediateOrderById(u, OrderIds.stop)
    let un = u
    doPeriodicallyTimed(0.02, duration) (CallbackCounted cb) ->
        if IsUnitAlive(un)
            destroy cb
        else
            IssueImmediateOrderById(un, OrderIds.stop)

public function TimeScaleEffect(effect e, real timeScale, real duration)
    let fx = e
    let ts = timeScale
    doAfter(duration) -> 
        SetSpecialEffectTimeScale(fx, ts)

let TOUR_GROUP = CreateGroup()
public function UnitUnStuck(unit u)
    real x = GetUnitX(u)
    real y = GetUnitY(u)
    real x2 = .0
    real y2 = .0
    
    if (IsTerrainPathable(x, y, PATHING_TYPE_FLYABILITY) and  not IsUnitInGroup(u, TOUR_GROUP))
        for i = 1 to 31
            x2 = x - 64 * i
            y2 = y
            if (not IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) and x2 > 7168) 
                SetUnitXY(u, x2, y2, 2)
                return

            x2 = x
            y2 = y + 64 * i
            if (not IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) and y2 < -7168)
                SetUnitXY(u, x2, y2, 2)
                return
            
            x2 = x - 64 * i
            y2 = y + 64 * i
            if (not IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) and x2 > 7168 and y2 < -7168 ) 
                SetUnitXY(u, x2, y2, 2)
                return

            x2 = x + 64 * i
            y2 = y
            if (not IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) and x2 < -9216)
                SetUnitXY(u, x2, y2, 2)
                return

            x2 = x
            y2 = y - 64 * i
            if (not IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) and y2 > 9248)
                SetUnitXY(u, x2, y2, 2)
                return

            x2 = x + 64 * i
            y2 = y - 64 * i
            if (not IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) and x2 < -9216 and y2 > 9248)
                SetUnitXY(u, x2, y2, 2)
                return

public function UnitHilang(unit u, bool flag)
    UnitHilang(u, flag, false)

public function UnitHilang(unit u, bool flag, bool flag2)
    if (flag)
        if (not HaveSavedReal(GameHT, GetHandleId(u), StringHash("UnitHilang")))
            SaveReal(GameHT, GetHandleId(u), StringHash("UnitHilang"), GetUnitStatbarHeight(u))
            SetUnitStatbarHeight(u, 9999)
            if (not flag2)
                SetUnitVertexColor(u, 255, 255, 255, 0)
    else
        if (HaveSavedReal(GameHT, GetHandleId(u), StringHash("UnitHilang")))
            SetUnitStatbarHeight(u, LoadReal(GameHT, GetHandleId(u), StringHash("UnitHilang")))
            RemoveSavedReal(GameHT, GetHandleId(u), StringHash("UnitHilang"))
            if (not flag2)
                SetUnitVertexColor(u, 255, 255, 255, 255)

public function AnimEffect2(effect e, string anim, real duration)
    let fx = e
    let anim2 = anim
    doAfter(duration) -> 
        SetSpecialEffectAnimation(fx, anim2)