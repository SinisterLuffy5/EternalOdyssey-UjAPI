int AS_MAX_ARRAY_SIZE = 8192;
rect area_boss = nil;
rect Bot_Team1 = nil;
rect Bot_Team2 = nil;
rect Left_Team3 = nil;
rect Map_Center = nil;
rect Map_Left = nil;
rect Map_Right = nil;
rect Map_Top = nil;
rect Mid_Team1 = nil;
rect Mid_Team2 = nil;
rect Mid_Team3 = nil;
rect revive_team1 = nil;
rect revive_team2 = nil;
rect revive_team3 = nil;
rect Right_Team3 = nil;
rect spawn_boss = nil;
rect Top_Team1 = nil;
rect Top_Team2 = nil;
rect TourDuo_1 = nil;
rect TourDuo_2 = nil;
rect TourDuo_3 = nil;
rect TourDuo_Area = nil;
rect TourTeam_1 = nil;
rect TourTeam_2 = nil;
rect TourTeam_3 = nil;
rect TourTeam_Area = nil;
rect TourSolo_Area = nil;
rect TourDM_Area = nil;
rect pickcam = nil;
rect Top1_Tele = nil;
rect Mid1_Tele = nil;
rect Bot1_Tele = nil;
rect Top2_Tele = nil;
rect Mid2_Tele = nil;
rect Bot2_Tele = nil;
rect Left_Tele = nil;
rect Mid3_Tele = nil;
rect Right_Tele = nil;
rect HibariArea = nil;
array<string> PLAYER_COLOR(PLAYER_NEUTRAL_AGGRESSIVE, "");
int MAX_POIN_KILL = 0;
float BASE_RESIST = .0f;
bool TEST_MODE = false;
array<bool> IsPlaying(PLAYER_NEUTRAL_AGGRESSIVE, false);
array<string> RealPlayerName(PLAYER_NEUTRAL_AGGRESSIVE, "");
array<int> PlayerMMR(PLAYER_NEUTRAL_AGGRESSIVE, 0);
int PlayerCount = 0;
dialog modedialog = nil;
array<button> modebutton(AS_MAX_ARRAY_SIZE, nil);
trigger modetrig = CreateTrigger();
array<framehandle> pickframe(AS_MAX_ARRAY_SIZE, nil);
array<int> HeroRawId(AS_MAX_ARRAY_SIZE, 0);
array<string> HeroPickImg(AS_MAX_ARRAY_SIZE, "");
array<int> HeroPortrait(AS_MAX_ARRAY_SIZE, 0);
int HeroCount = -1;
array<int> HeroCountWidth(3, 0);
array<int> HeroCountHeight(3, 0);
trigger SelectHeroIcon = CreateTrigger();
hashtable GameHT = InitHashtable();
array<int> MemoHero(PLAYER_NEUTRAL_AGGRESSIVE, -1);
array<bool> HeroGone(AS_MAX_ARRAY_SIZE, false);
array<bool> SelectYet(PLAYER_NEUTRAL_AGGRESSIVE, false);
float HeroPickTime = 70.f;
trigger SelectHeroConfirm = CreateTrigger();
trigger SelectHeroRandom = CreateTrigger();
array<unit> MyHero(PLAYER_NEUTRAL_AGGRESSIVE, nil);
handlelist HeroSelectList = HandleListCreate();
bool forwardpick = false;
array<framehandle> myframe(AS_MAX_ARRAY_SIZE, nil);
array<unit> dummy(PLAYER_NEUTRAL_AGGRESSIVE, nil);
trigger clickmenuf10 = CreateTrigger();
trigger clickmenuf11 = CreateTrigger();
trigger clickmenuf12 = CreateTrigger();
trigger deathTrig = CreateTrigger();
array<int> reviveCD(PLAYER_NEUTRAL_AGGRESSIVE, 0);
trigger TABtrig = CreateTrigger();
trigger MMRtrig = CreateTrigger();
array<int> HERO_KILL(PLAYER_NEUTRAL_AGGRESSIVE, 0);
array<int> HERO_DEATH(PLAYER_NEUTRAL_AGGRESSIVE, 0);
array<int> HERO_ASSIST(PLAYER_NEUTRAL_AGGRESSIVE, 0);
array<int> SCORE_KILL(3, 0);
int CREEP_PATH_TEAM_1 = 0;
int CREEP_PATH_TEAM_2 = 0;
int CREEP_PATH_TEAM_3 = 0;
int CREEP_SPAWN = 0;
array<region> CREEP_REGION(AS_MAX_ARRAY_SIZE, nil);
array<region> TELE_REGION(AS_MAX_ARRAY_SIZE, nil);
int TOUR_CD = 300;
timer TOUR_TMR = CreateTimer();
int TOUR_COUNT = 0;
group TOUR_GROUP = CreateGroup();
group TOUR_GROUP_1 = CreateGroup();
group TOUR_GROUP_2 = CreateGroup();
group TOUR_GROUP_3 = CreateGroup();
const int bj_ALLIANCE_UNALLIED = 0;
const int bj_ALLIANCE_UNALLIED_VISION = 1;
const int bj_ALLIANCE_ALLIED = 2;
const int bj_ALLIANCE_ALLIED_VISION = 3;
const int bj_ALLIANCE_ALLIED_UNITS = 4;
const int bj_ALLIANCE_ALLIED_ADVUNITS = 5;
const int bj_ALLIANCE_NEUTRAL = 6;
const int bj_ALLIANCE_NEUTRAL_VISION = 7;
trigger musicCommand = CreateTrigger();
array<int> CUR_MUSIC(PLAYER_NEUTRAL_AGGRESSIVE, 0);
unit BOSS_GILGAMESH = nil;
item dummy_item = nil;
effect dummy_effect = nil;
fogmodifier bj_lastCreatedFogModifier = nil;
bool BOSS_CAN_SKILL = true;
array<bool> BOSS_CAST_SKILL(AS_MAX_ARRAY_SIZE, false);
sound dummy_sound = nil;
rect WalkableRect = Rect(.0f, .0f, 128.f, 128.f);
item WalkableItem = nil;
array<item> WalkableItemEx(AS_MAX_ARRAY_SIZE, nil);
int WalkableItemCount = 0;
array<float> cam_dist(PLAYER_NEUTRAL_AGGRESSIVE, 1650.f);
array<timer> KILLME_TIMER(PLAYER_NEUTRAL_AGGRESSIVE, CreateTimer());
float CC_SLOW_EFFECT = .0f;
array<bool> FIRST_BLOOD(PLAYER_NEUTRAL_AGGRESSIVE, false);
array<bool> IsWideScreen(PLAYER_NEUTRAL_AGGRESSIVE, false);
bool AntiHek = false;
array<float> ORDER_POSX(AS_MAX_ARRAY_SIZE, .0f);
array<float> ORDER_POSY(AS_MAX_ARRAY_SIZE, .0f);
array<unit> ReachableUnit(2, nil);
array<unit> HydeE_Target(AS_MAX_ARRAY_SIZE, nil);
array<bool> BabonExtra1(PLAYER_NEUTRAL_AGGRESSIVE, false);
int GAME_SECOND = 0;
int GAME_MINUTE = 0;
int GAME_HOUR = 0;
array<unit> PreUnit(AS_MAX_ARRAY_SIZE, nil);
array<float> MouseWorldX(PLAYER_NEUTRAL_AGGRESSIVE, .0f);
array<float> MouseWorldY(PLAYER_NEUTRAL_AGGRESSIVE, .0f);
group HibariR_Group = CreateGroup();
bool TOUR_BOSS = false;
handlelist BanList = HandleListCreate();
array<bool> BanYet(PLAYER_NEUTRAL_AGGRESSIVE, false);
bool BAN_TIME = true;
int PICKBAN_COUNTER = 0;
float PICKBAN_WIDTH = 0.2f;
float PICKBAN_HEIGHT = 0.04f;
array<bool> CODE_DAMAGE(AS_MAX_ARRAY_SIZE, false);
array<bool> CODE_DAMAGE_2(AS_MAX_ARRAY_SIZE, false);
array<bool> DMGTEXT(PLAYER_NEUTRAL_AGGRESSIVE, true);
array<uint> HasBoot(AS_MAX_ARRAY_SIZE, 0);
int PORTRAIT_COUNTER = 0;
unit PORTRAIT_UNIT = nil;
array<unit> SelectedUnit(PLAYER_NEUTRAL_AGGRESSIVE, nil);
array<timer> RainTimer(AS_MAX_ARRAY_SIZE, nil);
array<bool> RainBool(AS_MAX_ARRAY_SIZE, false);

void ReinforceD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ReinforceD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 5, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 6);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 6, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        TimeScaleEffect(dummy_effect, 1, 5);
        Effect("Jellalsfx19.mdx", GetUnitX(t), GetUnitY(t), 1000, a, 0, 0, 2, 7, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 5.5);
        Effect("Zweisfx28.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 1, 6, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count <= 150)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.025);
    }

    if (count >= 150 && count <= 250)
    {
        if (count % 10 == 0)
        {
            a2 = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(100, 650), a2);
            y = PolarY(GetUnitY(t), GetRandomReal(100, 650), a2);
            Effect("Zweisfx29.mdx", x, y, 0, a2, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            a2 = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(100, 650), a2);
            y = PolarY(GetUnitY(t), GetRandomReal(100, 650), a2);
            Effect("Zweisfx29.mdx", x, y, 0, a2, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 260)
    {
        SoundStart("ReinforceSE3.mp3");
        Effect("Yugisfx12.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx1.mdx", GetUnitX(t), GetUnitY(t), 150, randomAngle(), 0, 0, 7, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 270)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ReinforceF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ReinforceF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 8, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        Effect("Zweisfx25.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 1.5, 7.5, 255, 255, 255, 255);
        Effect("Zweisfx26.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 8, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 7);
    }

    if (count == 340)
    {
        SoundStart("ReinforceF-1.mp3");
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 1.2);
    }

    if (count <= 360)
    {
        if (count % 10 == 0) 
        {  
            Effect("Zweisfx20.mdx", GetUnitX(t), GetUnitY(t), 80, randomAngle(), 0, 0, GetRandomReal(2, 3), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 360)
    {
        Effect("Zweisfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Zweisfx8.mdx", GetUnitX(t), GetUnitY(t), 30, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.45);
        Effect("Zweisfx18.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 370)
    {
        for (int i = 1; i < 11; i++)
        {
            x = PolarX(GetUnitX(t), 250, i * 36);
            y = PolarY(GetUnitY(t), 250, i * 36);
            Effect("Zweisfx6.mdx", x, y, 50, randomAngle(), -90, 0, 3.5, 1, 255, 255, 255, 255);
            Effect("Zweisfx19.mdx", x, y, 50, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, 255);
            Effect("Zweisfx27.mdx", x, y, 50, randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }
    }

    if (count == 380)
    {
        for (int i = 1; i < 11; i++)
        {
            x = PolarX(GetUnitX(t), 450, i * 36);
            y = PolarY(GetUnitY(t), 450, i * 36);
            Effect("Zweisfx6.mdx", x, y, 50, randomAngle(), -90, 0, 3.5, 1, 255, 255, 255, 255);
            Effect("Zweisfx19.mdx", x, y, 50, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, 255);
            Effect("Zweisfx27.mdx", x, y, 50, randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }
    }

    if (count == 390)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        for (int i = 1; i < 11; i++)
        {
            x = PolarX(GetUnitX(t), 650, i * 36);
            y = PolarY(GetUnitY(t), 650, i * 36);
            Effect("Zweisfx6.mdx", x, y, 50, randomAngle(), -90, 0, 3.5, 1, 255, 255, 255, 255);
            Effect("Zweisfx19.mdx", x, y, 50, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, 255);
            Effect("Zweisfx27.mdx", x, y, 50, randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }
    }

    if (count == 395)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ReinforceT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ReinforceT.mp3");
        x = PolarX(GetUnitX(t), -400, a);
        y = PolarY(GetUnitY(t), -400, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 7);
        UnitEnableAutoOrientation(u, false);
        SetUnitOrientation(u, a, -10, GetUnitRoll(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitFlyHeight(u, 200, 500);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 3.5, 255, 255, 255, PercentTo255(70));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        TimeScaleEffect(dummy_effect, 1, 2.5);
        Effect("Zweisfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        Effect("Zweisfx18.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 20)
    {
        Effect("Zweisfx21.mdx", GetUnitX(u), GetUnitY(u), GetUnitModelObjectZ(u, "bone_new1") + 250, a, -10, 0, 0.8, 3.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.3);
        AnimEffect2(dummy_effect, "death", 2.4);
        TimeScaleEffect(dummy_effect, 1, 2.4);
        x = PolarX(GetUnitX(u), 100, a);
        y = PolarY(GetUnitY(u), 100, a);
        Effect("Zweisfx22.mdx", x, y, GetUnitModelObjectZ(u, "bone_new1") + 250, a, -10, 0, 3, 3, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 2);
    }

    if (count >= 30 && count <= 120)
    {
        if (count % 9 == 0)
        {
            Effect("Zweisfx23.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, GetRandomReal(2.5, 3.5), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            for (int i = 1; i < 3; i++)
            {
                a2 = randomAngle();
                x = PolarX(GetUnitX(t), GetRandomReal(200, 700), a2);
                y = PolarY(GetUnitY(t), GetRandomReal(200, 700), a2);
                Effect("Zweisfx24.mdx", x, y, 0, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
            }
        }
    }

    if (count == 140)
    {
        SoundStart("ReinforceSE3.mp3");
        Effect("Zweisfx20.mdx", GetUnitX(u), GetUnitY(u), GetUnitModelObjectZ(u, "bone_new1") + 250, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Cidsfx1.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 2.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 150)
    {
        Effect("Cidsfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Cidsfx6.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Cidsfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Cidsfx30.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 160)
    {
        UnitEnableAutoOrientation(u, true);
        SetUnitFlyHeight(u, 0, 666);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ReinforceR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ReinforceR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 5);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        TimeScaleEffect(dummy_effect, 1, 1.4);
        Effect("Zweisfx15.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 0.4, 2, 255, 255, 255, 255);
        AnimEffect(dummy_effect, 1, 0.8);
    }

    if (count == 15)
    {
        SoundStart("ReinforceSE2.mp3");
        SetUnitAnimationByIndex(u, 6);
        Effect("Zweisfx16.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 0.6, 1.5, PercentTo255(18), PercentTo255(18), PercentTo255(60), 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Abilities\\Weapons\\FarseerMissile\\FarseerMissile.mdl", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
    }

    if (count >= 15 && count <= 45)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - 1);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.25);
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.88);
    }

    if (count == 55)
    {
        SoundStart("ReinforceQ.mp3");
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(e, "death");
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectAnimation(e, "death");
        Effect("Zweisfx20.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 65)
    {
        Effect("Zweisfx18.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Zweisfx4.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
    }

    if (count == 70)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A01R')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ReinforceE_1(unit u, float x, float y, float a)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);

    Effect("Zweisfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 0.8, 255, 0, 0, 255);
    SetSpecialEffectAnimationByIndex(dummy_effect, 3);
    SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    Effect("Zweisfx13.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 0.8, 255, 255, 255, 255);
    SaveEffectHandle(GameHT, hid, 1, dummy_effect);

    SaveReal(GameHT, hid, 0, x);
    SaveReal(GameHT, hid, 1, y);
    SaveReal(GameHT, hid, 2, GetRandomReal(-40, 40));
    SaveReal(GameHT, hid, 3, GetRandomReal(24, 36));
    TimerStart(tmr, 0.02, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        effect e = LoadEffectHandle(GameHT, hid, 0);
        effect e2 = LoadEffectHandle(GameHT, hid, 1);
        int count = LoadInteger(GameHT, hid, 'coun');
        float x = LoadReal(GameHT, hid, 0);
        float y = LoadReal(GameHT, hid, 1);
        float a = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), x, y);
        float a2 = a + LoadReal(GameHT, hid, 2);
        float dist = .0f;
        float x2 = .0f;
        float y2 = .0f;

        count++;
        SaveInteger(GameHT, hid, 'coun', count);

        if (count <= 16)
        {
            x2 = PolarX(GetSpecialEffectX(e), -25, a2);
            y2 = PolarY(GetSpecialEffectY(e), -25, a2);
            SetEffectXY(e, x2, y2, 0);
            SetSpecialEffectYaw(e, a2);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) + LoadReal(GameHT, hid, 3));

            SetEffectXY(e2, GetSpecialEffectX(e), GetSpecialEffectY(e), 0);
            SetSpecialEffectHeight(e2, GetSpecialEffectHeight(e));    

            if (count == 16) 
            { 
                SaveReal(GameHT, hid, 3, GetSpecialEffectHeight(e));
                dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), x, y);
                SaveReal(GameHT, hid, 4, dist); 
                SetSpecialEffectAnimationByIndex(e, 1);
            }        
        }

        if (count >= 16 && count <= 32)
        {
            dist = LoadReal(GameHT, hid, 4);
            x = PolarX(GetSpecialEffectX(e), dist / 16, a2);
            y = PolarY(GetSpecialEffectY(e), dist / 16, a2);
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectYaw(e, a2);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - 9);

            SetEffectXY(e2, GetSpecialEffectX(e), GetSpecialEffectY(e), 0);
            SetSpecialEffectHeight(e2, GetSpecialEffectHeight(e)); 

            if (count == 32)
            {
                Effect("Zweisfx14.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectHeight(e), randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
                SetSpecialEffectAnimation(dummy_effect, "death");

                FlushChildHashtable(GameHT, hid);
                PauseTimer(tmr);
                DestroyTimer(tmr);
            }
        }
    });
}

void ReinforceE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ReinforceE.mp3");
        Effect("Ichigosfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -800, a);
        y = PolarY(GetUnitY(t), -800, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        Effect("Zweisfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        Effect("Zweisfx11.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count <= 40)
    {
        if (count % 4 == 0)
        {
            a2 = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(50, 250), a2);
            y = PolarY(GetUnitY(t), GetRandomReal(50, 250), a2);
            ReinforceE_1(u, x, y, a);
        }
    }

    if (count == 36 || count == 51 || count == 66)
    {
        SoundStart("ReinforceSE1.mp3");
    }

    if (count == 65)
    {
        Effect("Zweisfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        Effect("Zweisfx11.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 72)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ichigosfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        Effect("Zweisfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Zweisfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Zweisfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Zweisfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 77)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A01R') * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ReinforceW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    
    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ReinforceW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Zweisfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
    }

    if (count <= 20)
    {
        SetUnitVertexColor(u, 255, 255, 255, PercentTo255(100 - count * 5));
    }

    if (count == 20)
    {
        Effect("Ichigosfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 3);
        SetUnitVertexColor(u, 255, 255, 255, 255);
        Effect("Yomisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 35)
    {
        SoundStart("ReinforceQ.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Zweisfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Zweisfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Zweisfx8.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Zweisfx8.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 2.25, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Zweisfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Zweisfx10.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Zweisfx10.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.75, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        RushSlide(t, a, 340, 0.6, 0.02, true);
    }

    if (count == 40)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A01Q')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ReinforceQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("ReinforceQ.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 2);
        Effect("Zweisfx3.mdx", x, y, 0, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 1);
    }

    if (count == 5)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        Effect("Zweisfx4.mdx", x, y, 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Zweisfx5.mdx", x, y, 10, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Zweisfx2.mdx", x, y, 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A01O'));
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FireflyR2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        x = PolarX(GetUnitX(t), -900, a);
        y = PolarY(GetUnitY(t), -900, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1500, 3, GetUnitX(u), GetUnitY(u));
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 4);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        Effect("Mokuosfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Mokuosfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        Effect("Mokuosfx11.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count <= 20)
    {
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 75, 0);
        if (count % 3 == 0)
        {
            Effect("Mokuosfx5.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        }
    }

    if (count == 20)
    {
        UnitHilang(u, true, true);
        SetUnitTimeScale(u, 0);
    }

    if (count >= 20 && count <= 70)
    {
        if (count % 5 == 0)
        {
            Effect("Mokuosfx12.mdx", GetUnitX(u), GetUnitY(u), 1500, randomAngle(), 0, 0, 7, 2, 255, 255, 255, PercentTo255(GetRandomReal(40, 60)));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 50)
    {
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, PercentTo255(80));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 70)
    {
        UnitHilang(u, false, true);
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 1);
        SaveReal(GameHT, hid, 0, dist-100);
    }

    if (count == 80)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count >= 70 && count <= 100)
    {
        dist = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(u), dist / 30, a);
        y = PolarY(GetUnitY(u), dist / 30, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 50, 0);

        if (count % 6 == 0)
        {
            Effect("Mokuosfx5.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a + 180, -45, 0, 2, 1, 255, 255, 255, 255);
            Effect("Mokuosfx6.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, -45, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 80)
    {
        Effect("Mokuosfx9.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 10, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 90)
    {
        Effect("Mokuosfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Hutaosfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 100)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Mokuosfx13.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Mokuosfx11.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.3);
        Effect("Fireflysfx11.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 4, 2.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 1);
        TimeScaleEffect(dummy_effect, 0.5, 1);
    }

    if (count == 105)
    {
        SetUnitFlyHeight(u, 0, 0);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A01P')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FireflyR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        Effect("Arthursfx11.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("fireflysfx22.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count <= 20)
    {
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 150, 0);
        if (count % 3 == 0)
        {
            Effect("Fireflysfx15.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        }
        SetUnitVertexColor(u, 255, 255, 255, PercentTo255(100 - (count * 100 / 30)));
    }

    if (count == 20)
    {
        UnitHilang(u, true);
        Effect("Fireflysfx19.mdx", x, y, 0, a, 0, 0, 1.4, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        AnimEffect2(dummy_effect, "death", 2);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        MouseWorldX[GetPlayerId(GetOwningPlayer(u))] = x; 
        MouseWorldY[GetPlayerId(GetOwningPlayer(u))] = y;
    }

    if (count >= 20 && count < 120)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        a = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), MouseWorldX[GetPlayerId(GetOwningPlayer(u))], MouseWorldY[GetPlayerId(GetOwningPlayer(u))]);
        dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), MouseWorldX[GetPlayerId(GetOwningPlayer(u))], MouseWorldY[GetPlayerId(GetOwningPlayer(u))]);
        if (dist > 50)
        {
            x2 = PolarX(GetSpecialEffectX(e), 10, a);
            y2 = PolarY(GetSpecialEffectY(e), 10, a);
            SetEffectXY(e, x2, y2, 1);
        }
        else
        {
            x2 = MouseWorldX[GetPlayerId(GetOwningPlayer(u))];
            y2 = MouseWorldY[GetPlayerId(GetOwningPlayer(u))];
            SetEffectXY(e, x2, y2, 1);
        }
        SetSpecialEffectYaw(e, a);
        if (count % 10 == 0) { visionArea(GetOwningPlayer(u), 1200, 3, x2, y2); }
    }

    if (count == 120)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Fireflysfx7.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitFlyHeight(u), a, 0, 0, 1.5, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);

        g1 = CreateGroup();
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetSpecialEffectX(e), GetSpecialEffectY(e), 600, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        SaveGroupHandle(GameHT, hid, 'grp', g1);
    }

    if (count >= 120 && count <= 140)
    {
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - 150);
    }

    if (count == 140)
    {
        e = LoadEffectHandle(GameHT, hid, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, GetSpecialEffectX(e), GetSpecialEffectY(e));
        Effect("Fireflysfx4.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Fireflysfx9.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Fireflysfx11.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 0.8);
        TimeScaleEffect(dummy_effect, 0.75, 0.8);
        
        DisableAbility(GetUnitAbility(u, 'A093'), true, true);
        UnitAddAbility(u, 'A01P');
        UnitMakeAbilityPermanent(u, true, 'A01P');
        SetUnitAbilityLevel(u, 'A01P', GetUnitAbilityLevel(u, 'A093'));
        StartAbilityCooldown(GetUnitAbility(u, 'A01P'), 60);
        SetUnitXY(u, GetSpecialEffectX(e), GetSpecialEffectY(e), 1);
        UnitHilang(u, false);
        SetUnitModel(u, "Fireflysfx7.mdx");
        SetUnitFlyHeight(u, 0, 0);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        SaveBoolean(GameHT, GetHandleId(u), StringHash("FireflyMode1"), true);

        g1 = LoadGroupHandle(GameHT, hid, 'grp');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, false);
            SetInvulUnit(d, false);
        }
        DestroyGroup(g1);

        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetSpecialEffectX(e), GetSpecialEffectY(e), 600, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, (9 + GetUnitAbilityLevel(u, 'A093')) * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g2);

        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FireflyE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count > 100 && count <= 130)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 101)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimation(u, "attack");
        SetUnitTimeScale(u, 0.9);
    }

    if (count >= 101 && count <= 125)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 5 == 0)
        {
            Effect("hutaosfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 125)
    {
        Effect("Mokuosfx5.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Mokuosfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        RushSlide(t, a, 420, 0.6, 0.02, true);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count == 130)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A092') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
    }

    if (count >= 125 && count <= 155)
    {
        if (count % 5 == 0)
        {
            a = LoadReal(GameHT, hid, 0);
            Effect("Acesfx1.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
            Effect("Acesfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1, 1, 255, 255, 255, 255);
        }

        if (count == 155)
        {
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void FireflyW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    
    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 72)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        x = PolarX(GetUnitX(t), -500, a);
        y = PolarY(GetUnitY(t), -500, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimation(u, "attack");
        SaveReal(GameHT, hid, 0, a);
    }

    if (count == 1 || count == 10 || count == 52)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Bellsfx8.mdx", GetUnitX(u), GetUnitY(u), 50, GetUnitFacing(u), 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Fireflysfx5.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 2 || count == 4 || count == 7 || count == 13 || count == 16 || count == 18 || count == 22 || count == 25 || count == 30 || count == 54 || count == 57 || count == 60 || count == 62)
    {
        Effect("Bellsfx9.mdx", GetUnitX(u), GetUnitY(u), 50, GetUnitFacing(u), 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Fireflysfx15.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.4, 0.6));
    }

    if (count == 3 || count == 23 || count == 54 || count == 66)
    {
        Effect("Fireflysfx18.mdx", GetUnitX(u), GetUnitY(u), 100, GetUnitFacing(u), 0, -20, 1.3, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.55);
    }

    if (count == 4 || count == 17 || count == 57)
    {
        Effect("Fireflysfx18.mdx", GetUnitX(u), GetUnitY(u), 100, GetUnitFacing(u), 0, -70, 1.4, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 6 || count == 13 || count == 62)
    {
        Effect("Fireflysfx18.mdx", GetUnitX(u), GetUnitY(u), 100, GetUnitFacing(u), 0, 10, 1.7, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 8 || count == 28 || count == 59)
    {
        Effect("Fireflysfx18.mdx", GetUnitX(u), GetUnitY(u), 100, GetUnitFacing(u), 0, 45, 1.4, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
    }

    if (count == 5 || count == 22 || count == 60 || count == 70)
    {
        Effect("Fireflysfx2.mdx", GetUnitX(t), GetUnitY(t), 50, GetUnitFacing(u), 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("fireflysfx10.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count <= 10)
    {
        a = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(u), 120, a);
        y = PolarY(GetUnitY(u), 120, a);
        SetUnitXY(u, x, y, 0);

        if (count == 10) 
        { 
            a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
            RushSlide(u, a, 1300, 0.5, 0.02, false, true);
            SetUnitFacingEx(u, a, true);
            SetUnitAnimation(u, "attack");
        }
    }

    if (count == 52)
    {
        SetUnitFacingEx(u, a, true);
        RushSlide(u, a, 1200, 0.3, 0.02, false);
        SetUnitAnimation(u, "attack");
    }

    if (count == 60)
    {
        RushSlide(t, GetUnitFacing(u), 210, 0.4, 0.02, true);
    }

    if (count == 69)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Fireflysfx5.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 72)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A091')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }

    if (count > 100)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 101)
    {
        x = PolarX(GetUnitX(t), -700, a);
        y = PolarY(GetUnitY(t), -700, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 1);
        SetUnitTimeScale(u, 0.7);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        Effect("Arthursfx11.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count >= 101 && count <= 140)
    {
        x = PolarX(GetUnitX(u), 10, a);
        y = PolarY(GetUnitY(u), 10, a);
        SetUnitXY(u, x, y, 0);
        if (count <= 120) { SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 30, 0); }
    }

    if (count == 103 || count == 107 || count == 110 || count == 116 || count == 121 || count == 123 || count == 126 || count == 130 || count == 134 || count == 138)
    {
        Effect("Fireflysfx15.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 145)
    {
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 1);
        SetUnitFlyHeight(u, 0, 2000);
    }

    if (count >= 145 && count <= 160)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 160)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Fireflysfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Fireflysfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Fireflysfx11.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 0.8);
        TimeScaleEffect(dummy_effect, 0.75, 0.8);
        Effect("Mokuosfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 360, 0.6, 0.02, true);
    }

    if (count == 165)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A091')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FireflyQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float dist = .0f;
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 12)
    {
        SetPauseUnit(u, true);
    }

    if (count == 1)
    {
        SoundStart("");
        SetUnitAnimation(u, "attack");
        Effect("Acesfx11.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 0, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, GetHandleId(u), StringHash("FireflyQPos"), dummy_effect);
        SaveReal(GameHT, GetHandleId(u), StringHash("FireflyQPosX"), GetUnitX(u));
        SaveReal(GameHT, GetHandleId(u), StringHash("FireflyQPosY"), GetUnitY(u));
        SaveGroupHandle(GameHT, hid, 'grp', CreateGroup());
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1400, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        
        g1 = LoadGroupHandle(GameHT, hid, 'grp');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A090'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        if (count % 2 == 0)
        {
            Effect("Fireflysfx10.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("Fireflysfx15.mdx", GetUnitX(u), GetUnitY(u), 30, randomAngle(), 0, 0, 1, 1.5, 255, 255, 255, 255);
            Effect("Fireflysfx18.mdx", GetUnitX(u), GetUnitY(u), 70, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
        }

        if (count == 12)
        {
            Effect("Fireflysfx5.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        }

        if (GetRandomInt(1, 2) == 1)
        {
            Effect("Fireflysfx23.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Fireflysfx23.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        }
        else
        {
            Effect("Fireflysfx23.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), -30, 0, 1, 1, 255, 255, 255, 255);
            Effect("Fireflysfx23.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), -30, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetAbilityRemainingCooldown(GetUnitAbility(u, 'A090'), 0);
        for (int i = 0; i < 5; i++)
        {
            SetAbilityIntegerLevelField(GetUnitAbility(u, 'A090'), ABILITY_ILF_TARGET_TYPE, i, 0);
        }

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
    }

    if (count == 162 || (count > 12 && count < 162 && !HaveSavedReal(GameHT, GetHandleId(u), StringHash("FireflyQPosX"))))
    {
        if (HaveSavedReal(GameHT, GetHandleId(u), StringHash("FireflyQPosX")))
        {
            for (int i = 0; i < 5; i++)
            {
                SetAbilityIntegerLevelField(GetUnitAbility(u, 'A090'), ABILITY_ILF_TARGET_TYPE, i, 2);
            }
            StartAbilityCooldown(GetUnitAbility(u, 'A090'), 20);
            RemoveSavedReal(GameHT, GetHandleId(u), StringHash("FireflyQPosX"));
            RemoveSavedReal(GameHT, GetHandleId(u), StringHash("FireflyQPosY"));
            DestroyEffectTimed(LoadEffectHandle(GameHT, GetHandleId(u), StringHash("FireflyQPos")), .1f);
            RemoveSavedHandle(GameHT, GetHandleId(u), StringHash("FireflyQPos"));
        }
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }

    if (count > 1000)
    {
        SetPauseUnit(u, true);
    }

    if (count == 1001)
    {
        StartAbilityCooldown(GetUnitAbility(u, 'A090'), 20);
        x = LoadReal(GameHT, GetHandleId(u), StringHash("FireflyQPosX"));
        y = LoadReal(GameHT, GetHandleId(u), StringHash("FireflyQPosY"));
        for (int i = 0; i < 5; i++)
        {
            SetAbilityIntegerLevelField(GetUnitAbility(u, 'A090'), ABILITY_ILF_TARGET_TYPE, i, 2);
        }
        RemoveSavedReal(GameHT, GetHandleId(u), StringHash("FireflyQPosX"));
        RemoveSavedReal(GameHT, GetHandleId(u), StringHash("FireflyQPosY"));
        DestroyEffectTimed(LoadEffectHandle(GameHT, GetHandleId(u), StringHash("FireflyQPos")), .1f);
        RemoveSavedHandle(GameHT, GetHandleId(u), StringHash("FireflyQPos"));
        dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
        if (dist > 2400)
        {
            SetUnitTimeScale(u, 1);
            SetPauseUnit(u, false);
            IssueImmediateOrderById(u, 851972);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
            return;
        }
        a = Angle(GetUnitX(u), GetUnitY(u), x, y);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimation(u, "attack");
        RushSlide(u, a, dist, 0.2, 0.02, false);
    }

    if (count >= 1001 && count <= 1012)
    {
        if (count % 2 == 0)
        {
            Effect("Fireflysfx10.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("Fireflysfx15.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1.5, 255, 255, 255, 255);
            Effect("Fireflysfx18.mdx", GetUnitX(u), GetUnitY(u), 70, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 1012)
    {
        Effect("Fireflysfx5.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }

    if (count > 1100)
    {
        SetPauseUnit(u, true);
    }

    if (count == 1101)
    {
        SetUnitAnimationByIndex(u, 0);
        RushSlide(u, a, 1400, 0.2, 0.02, false);
        SaveGroupHandle(GameHT, hid, 'grp', CreateGroup());
    }

    if (count >= 1101 && count <= 1112)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A090'));
                GroupAddUnit(g1, d);
            }
        }
        if (count == 1112) { DestroyGroup(g1); }
        DestroyGroup(g2);

        if (count % 2 == 0)
        {
            Effect("Mokuosfx5.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1, 1, 255, 255, 255, 255);
            Effect("hutaosfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        }

        if (count == 1112) 
        {
            Effect("Mokuosfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 1112)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ByakuranD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ByakuranD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        DestroyEffectTimed(AddSpecialEffectTarget("Byakuransfx9.mdx", u, "chest"), 1);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, PercentTo255(80));
        Effect("Gokusfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, PercentTo255(60));
        Effect("Esdeathsfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Esdeathsfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count >= 15 && count <= 105)
    {
        if (count % 15 == 0)
        {
            a2 = randomAngle();
            x = PolarX(GetUnitX(t), -130, a2);
            y = PolarY(GetUnitY(t), -130, a2);
            SetUnitXY(u, x, y, 0);
            a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
            SetUnitFacingEx(u, a, true);
            SetUnitAnimation(u, "attack");
            Effect("Byakuransfx12.mdx", GetUnitX(t), GetUnitY(t), 50, a2, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Byakuransfx13.mdx", GetUnitX(t), GetUnitY(t), 0, a2, 0, 0, 1.5, 1, 255, 255, 255, 255);
            if (count != 105)
            {
                RushSlide(t, a, 190, 0.2, 0.02, true);
            }
            else
            {
                SoundStart("ByakuranSE1.mp3");
                visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
                Effect("Byakuransfx11.mdx", GetUnitX(t), GetUnitY(t), 30, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
                Effect("Jotarosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, 0.75);
                Effect("akamesfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, 0.75);
            }
        }
    }

    if (count == 110)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ByakuranF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ByakuranF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 14);
    }

    if (count <= 100 && count % 5 == 0)
    {
        Effect("saltersfx20.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(0.75, 1), 1, 255, 255, 255, PercentTo255(GetRandomReal(40, 80)));
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("saltersfx20.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(0.9, 1.3), 1, 255, 255, 255, PercentTo255(GetRandomReal(40, 80)));
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("saltersfx20.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1.4, 1.8), 1, 255, 255, 255, PercentTo255(GetRandomReal(40, 80)));
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Byakuransfx9.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, GetRandomReal(1.5, 2), 1, 255, 255, 255, 255);
    }

    if (count == 100)
    {
        SoundStart("ByakuranSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Byakuransfx11.mdx", GetUnitX(t), GetUnitY(t), 30, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Jotarosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("akamesfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ByakuranT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("ByakuranT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 4);
    }

    if (count <= 40 && count % 5 == 0)
    {
        Effect("saltersfx20.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.75, 1), 1, 255, 255, 255, PercentTo255(GetRandomReal(40, 80)));
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("saltersfx20.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.9, 1.2), 1, 255, 255, 255, PercentTo255(GetRandomReal(40, 80)));
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("saltersfx20.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.3, 1.7), 1, 255, 255, 255, PercentTo255(GetRandomReal(40, 80)));
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Byakuransfx9.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1.5, 2), 1, 255, 255, 255, 255);
    }

    if (count == 40)
    {
        SoundStart("ByakuranT-1.mp3");
        SetUnitAnimationByIndex(u, 16);
        Effect("black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 8, 255, 255, 255, PercentTo255(40));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Byakuransfx10.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 9, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 7.5);
        Effect("Tsunasfx17.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 9, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 7.5);
    }

    if (count >= 40 && count <= 415)
    {
        g1 = CreateGroup();
        g2 = CreateGroup();
        for (int i = 1; i < 13; i++)
        {
            x = PolarX(GetUnitX(u), 125 * i, a);
            y = PolarY(GetUnitY(u), 125 * i, a);
            GroupEnumUnitsInRange(g2, x, y, 350, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 15 * GetHeroStr(u, true), 375);
                    CC_Unit(d, "stun", 0.1);
                    GroupAddUnit(g1, d);
                }
            }

            if (count % 10 == 0)
            {
                if (i % 2 == 0)
                {
                    if (i != 2)
                    {
                        x = PolarX(x, 200, a);
                        y = PolarY(y, 200, a);
                    }
                    Effect("Jotarosfx8.mdx", x, y, 100, a, -90, 0, 1.5, 1, PercentTo255(10), PercentTo255(10), PercentTo255(10), PercentTo255(60));
                    SetSpecialEffectTimeScale(dummy_effect, 1.25);
                }
            }

            if (count % 50 == 0 && i % 3 == 0)
            {
                visionArea(GetOwningPlayer(u), 1000, 3, x, y);
            }
        }
        DestroyGroup(g1);
        DestroyGroup(g2);
    }

    if (count == 415)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ByakuranR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 100)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
    }
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ByakuranR.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ryogisfx27.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 1 || count == 15 || count == 30 || count == 45 || count == 60)
    {
        Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1, 2), 1, 255, 255, 255, PercentTo255(60));
        Effect("Jotarosfx8.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(1, 2), 1, 255, 255, 255, PercentTo255(GetRandomReal(40, 60)));
    }

    if (count == 75)
    {
        SetUnitAnimation(u, "attack");
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "left hand"), 1);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 90)
    { 
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Bisgohansfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SaveReal(GameHT, hid, 0, a);
        RushSlide(t, a, 900, 2, 0.02, true);
    }

    if (count == 100)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueTargetOrderById(u, 851983, t);
    }

    if (count >= 90 && count <= 190)
    {
        if ((count-90) % 3 == 0)
        {
            a = LoadReal(GameHT, hid, 0);
            Effect("Byakuransfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.5);
            AnimEffect2(dummy_effect, "death", 0.6);
            Effect("Byakuransfx1.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.2, 1, 255, 255, 255, 255);
        }
    }

    if (count == 190)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Byakuransfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Gojosfx14.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Gojosfx19.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
    }

    if (count == 200)
    {
        SetPauseUnit(t, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A08W')) * GetHeroStr(u, true));
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ByakuranE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ByakuranE.mp3");
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 4, GetUnitX(u), GetUnitY(u));
        SetUnitAnimation(u, "stand");
    }

    if (count == 1 || count == 30 || count == 50)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "chest"), 1);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, PercentTo255(80));
        Effect("Gokusfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, PercentTo255(60));
        Effect("Esdeathsfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Esdeathsfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);

        if (count == 30)
        {
            Effect("Yomisfx6.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(40));
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
        }

        if (count == 50)
        {
            SetUnitAnimation(u, "attack");
            SetUnitTimeScale(u, 0.9);
            Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, PercentTo255(90));
            RushSlide(u, a, dist - 100, 0.4, 0.02, false);
            KnockupUnit(u, 0.4, 0.02, 550);
        }
    }

    if (count >= 50 && count % 2 == 0)
    {
        Effect("Fuxuansfx3.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 100, a, -90, 0, 1, 1, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 1.25);
    }

    if (count == 72)
    {
        SoundStart("ByakuranSE1.mp3");
        Effect("Jellalsfx4.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        Effect("Jotarosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Byakuransfx4.mdx", GetUnitX(t), GetUnitY(t), 30, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A08V') * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ByakuranW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ByakuranW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimation(u, "walk");
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "chest"), 1);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, PercentTo255(90));
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, PercentTo255(80));
        Effect("Gokusfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, PercentTo255(60));
        Effect("Esdeathsfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Esdeathsfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count <= 20)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 12, a);
            y = PolarY(GetUnitY(u), dist / 12, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 20)
    {
        SetUnitAnimation(u, "attack");
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "left hand"), 1);
        Effect("Bisgohansfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 30)
    {
        SoundStart("ByakuranSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Bisgohansfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Bisgohansfx11.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Bellsfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bellsfx14.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bellsfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
        RushSlide(t, a, 360, 0.6, 0.02, true);
    }

    if (count == 35)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A08U')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ByakuranQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("ByakuranQ.mp3");
        SetUnitAnimation(u, "attack");
        Effect("Byakuransfx3.mdx", GetUnitX(u), GetUnitY(u), 30, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Byakuransfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 0.3, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 50);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A08T'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        if (count % 2 == 0)
        {
            Effect("Byakuransfx1.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Jotarosfx8.mdx", x, y, 100, a, -90, 0, 1, 1.5, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 0.75));
        }

        if (count == 12)
        {
            Effect("Jotarosfx9.mdx", x, y, 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("Byakuransfx4.mdx", x, y, 30, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JotaroD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 100)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("JotaroD.mp3");
        Effect("Jotarosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -400, a);
        y = PolarY(GetUnitY(t), -400, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        x = PolarX(GetUnitX(u), 70, a);
        y = PolarY(GetUnitY(u), 70, a);
        Effect("Jotarosfx1.mdx", x, y, 80, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx2.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx3.mdx", x, y, 0, a, 0, 0, 1, 2.5, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 5);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 25) 
    { 
        SetSpecialEffectAnimationByIndex(dummy_effect, 0); 
    }

    if (count == 20 || count == 30 || count == 45 || count == 60)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Jotarosfx10.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 50, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
    }

    if (count >= 70 && count <= 100)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        if (dist > 120)
        {
            x = PolarX(GetSpecialEffectX(e), dist / 20, a);
            y = PolarY(GetSpecialEffectY(e), dist / 20, a);
            SetEffectXY(e, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -100, a);
            y = PolarY(GetUnitY(t), -100, a);
            SetEffectXY(e, x, y, 0);
        }

        if (count == 70) { SetSpecialEffectAnimationByIndex(e, 9); }
        if (count == 85) { SetSpecialEffectAnimationByIndex(e, 8); }
    }

    if (count == 100)
    {
        SoundStart("JotaroSE5.mp3");
        e = LoadEffectHandle(GameHT, hid, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Alicesfx31.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Vegetasfx7.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a, -90, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("vegetasfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Vegetasfx9.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 330, 0.6, 0.02, true);
        KnockupUnit(t, 0.6, 0.02, 330);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
    }

    if (count == 132)
    {
        Effect("Hibarisfx15.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Jotarosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Sabosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JotaroF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("JotaroF.mp3");
        Effect("Jotarosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -300, a);
        y = PolarY(GetUnitY(t), -300, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        x = PolarX(GetUnitX(u), 70, a - 120);
        y = PolarY(GetUnitY(u), 70, a - 120);
        Effect("Jotarosfx1.mdx", x, y, 80, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx2.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx15.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Jotarosfx3.mdx", x, y, 0, a, 0, 0, 1, 8.5, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp', CreateGroup());
    }

    if (count == 90)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 5);
        SetSpecialEffectTimeScale(e, 1.5);
        Effect("Jotarosfx17.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 10, randomAngle(), 0, 0, 2.8, 8, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect); 
        Effect("Jotarosfx17.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 10, randomAngle(), 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
        Effect("Jotarosfx17.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 10, randomAngle(), 0, 0, 2.2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        SaveEffectHandle(GameHT, hid, 3, dummy_effect);
        Effect("Jotarosfx17.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 10, randomAngle(), 0, 0, 1.9, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        SaveEffectHandle(GameHT, hid, 4, dummy_effect);
        SaveReal(GameHT, hid, 0, GetSpecialEffectX(e));
        SaveReal(GameHT, hid, 1, GetSpecialEffectY(e));
    }

    if (count == 140)
    {
        SoundStart("JotaroF-1.mp3");
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -100, a);
        y = PolarY(GetUnitY(t), -100, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectAnimationByIndex(e, 7);
        SetSpecialEffectTimeScale(e, 1);
        e = LoadEffectHandle(GameHT, hid, 4);
        SetSpecialEffectAnimation(e, "death");
    }

    if (count == 160)
    {
        e = LoadEffectHandle(GameHT, hid, 3);
        SetSpecialEffectAnimation(e, "death");
    }

    if (count == 180)
    {
        e = LoadEffectHandle(GameHT, hid, 2);
        SetSpecialEffectAnimation(e, "death");
    }

    if (count == 380)
    {
        SoundStart("JotaroF-2.mp3");
        e = LoadEffectHandle(GameHT, hid, 0);
        TransEffect(e, 255, 8, 0.6, 0.02);
    }

    if (count == 410)
    {
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectAnimation(e, "death");
    }

    if (count >= 100 && count <= 440)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        g1 = LoadGroupHandle(GameHT, hid, 'grp');
        g2 = CreateGroup();
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        if (count <= 140)
        {
            GroupEnumUnitsInRange(g2, x, y, (count - 90) * 20, nil);
        }
        else
        {
            GroupEnumUnitsInRange(g2, x, y, 1000, nil);
        }
        GroupRemoveUnit(g2, u);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (IsUnitAlive(d) && !IsUnitInvulnerable(d))
            {
                SetPauseUnit(d, true);
                if (!IsUnitInGroup(d, g1))
                {
                    SetUnitTimeScale(u, 0);
                    GroupAddUnit(g1, d);
                }
            }
        }
        DestroyGroup(g2);
        if (count == 440) 
        { 
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                d = GroupGetUnitByIndex(g1, i);
                SetPauseUnit(d, false);
                SetUnitTimeScale(d, 1);
            }
            DestroyGroup(g1); 
        }

        if (count <= 140) 
        {
            for (int i = 1; i < 5; i++)
            {
                e = LoadEffectHandle(GameHT, hid, i);
                if (count % 2 == 0)
                {
                    SetSpecialEffectVertexColour(e, PercentTo255(GetRandomReal(30, 50)), PercentTo255(GetRandomReal(30, 50)), PercentTo255(GetRandomReal(30, 50)), PercentTo255(40));
                }
            }
        }
        else
        {
            if (count % 10 == 0 && count <= 380)
            {
                a2 = GetRandomReal(-45, 45);
                Effect("Alicesfx31.mdx", GetUnitX(t), GetUnitY(t), 100, a + a2, 0, 0, 1.4, 1, 255, 255, 255, 255);
                x = PolarX(GetUnitX(t), 50, a + a2);
                y = PolarY(GetUnitY(t), 50, a + a2);
                Effect("Alicesfx31.mdx", x, y, 100, a + a2, 0, 0, 1.4, 1, 255, 255, 255, 255);
                Effect("Jotarosfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + a2, -90, 0, GetRandomReal(0.9, 1.2), 1, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(1.25, 1.5));
                Effect("Alicesfx25.mdx", GetUnitX(t), GetUnitY(t), 100, a + a2 + 180, 0, 0, 2.5, 1, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
                if (GetRandomInt(1, 2) == 1)
                {
                    Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 120, randomAngle(), GetRandomReal(-30, -10), 0, GetRandomReal(4, 5), 1, 255, 255, 255, PercentTo255(80));
                }
                else
                {
                    Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 120, randomAngle(), GetRandomReal(-50, -40), 0, GetRandomReal(4, 5), 1, 255, 255, 255, PercentTo255(80));
                }
            }
        }
    }

    if (count == 440)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        RushSlide(t, a, 300, 0.6, 0.02, true);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JotaroT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("JotaroT.mp3");
        Effect("Jotarosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -200, a);
        y = PolarY(GetUnitY(t), -200, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        x = PolarX(GetUnitX(u), 70, a - 120);
        y = PolarY(GetUnitY(u), 70, a - 120);
        Effect("Jotarosfx1.mdx", x, y, 80, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx2.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx15.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Jotarosfx3.mdx", x, y, 0, a, 0, 0, 1, 9.5, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 6);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 40)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 5);
    }

    if (count == 120)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 0);
    }

    if (count == 150)
    {
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 0.6);
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Jotarosfx10.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Jotarosfx12.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 1.2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 230)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 3);
    }

    if (count >= 230 && count <= 420)
    {
        if (dist < 500)
        {
            x = PolarX(GetUnitX(t), 3, a);
            y = PolarY(GetUnitY(t), 3, a);
            SetUnitXY(t, x, y, 2);
        }
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -90, a);
        y = PolarY(GetUnitY(t), -90, a);
        SetEffectXY(e, x, y, 0);

        if (count % 8 == 0)
        {
            Effect("Jotarosfx6.mdx", x, y, 50, a + GetRandomReal(-45, 45), -90, 0, GetRandomReal(1.5, 2), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Jotarosfx12.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), -45, 0, GetRandomReal(1, 1.5), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            Effect("Jotarosfx12.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1, 1.5), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            Effect("Jotarosfx8.mdx", x, y, 100, a + GetRandomReal(-45, 45), -90, 0, GetRandomReal(1, 1.5), 1, 255, 255, 255, 255);
        }
    }

    if (count == 430)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 8);
        Effect("Jotarosfx16.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 8, 1.5, 255, 255, 255, 255);
    }

    if (count == 445)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Jotarosfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Jotarosfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Jotarosfx13.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, GetRandomReal(1, 1.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
        Effect("Jotarosfx14.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 13, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Jotarosfx11.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.3, 1, 255, 255, 255, 255);
        RushSlide(t, a, 270, 0.6, 0.02, true);
    }

    if (count == 450)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JotaroR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("JotaroR.mp3");
        Effect("Jotarosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -200, a);
        y = PolarY(GetUnitY(t), -200, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        x = PolarX(GetUnitX(u), 70, a - 120);
        y = PolarY(GetUnitY(u), 70, a - 120);
        Effect("Jotarosfx1.mdx", x, y, 80, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx2.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx3.mdx", x, y, 0, a, 0, 0, 1, 5, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 5);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 10)
    {
        SetUnitAnimationByIndex(u, 3);
    }

    if (count == 30)
    {
        SoundStart("JotaroR-1.mp3");
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 3);
    }

    if (count >= 30 && count <= 200)
    {
        if (dist < 500)
        {
            x = PolarX(GetUnitX(t), 3, a);
            y = PolarY(GetUnitY(t), 3, a);
            SetUnitXY(t, x, y, 2);
        }
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -90, a);
        y = PolarY(GetUnitY(t), -90, a);
        SetEffectXY(e, x, y, 0);
        
        if (count % 8 == 0)
        {
            Effect("Jotarosfx11.mdx", x, y, 50, a + GetRandomReal(-45, 45), 0, 0, GetRandomReal(0.9, 1.2), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Jotarosfx12.mdx", GetUnitX(t), GetUnitY(t), 50, a + GetRandomReal(-45, 45), -90, 0, GetRandomReal(1, 1.5), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Jotarosfx12.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1, 1.5), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Jotarosfx13.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, GetRandomReal(1, 1.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
            Effect("Jotarosfx14.mdx", x, y, 70, a + GetRandomReal(-45, 45), -90, 0, GetRandomReal(12, 15), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 215)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 4);
    }

    if (count == 235)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Jotarosfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Jotarosfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Jotarosfx13.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, GetRandomReal(1, 1.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
        Effect("Jotarosfx14.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 13, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        RushSlide(t, a, 270, 0.6, 0.02, true);
    }

    if (count == 240)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A008')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JotaroE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("JotaroE.mp3");
        Effect("Jotarosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -400, a);
        y = PolarY(GetUnitY(t), -400, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        x = PolarX(GetUnitX(u), 70, a);
        y = PolarY(GetUnitY(u), 70, a);
        Effect("Jotarosfx1.mdx", x, y, 80, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx2.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx3.mdx", x, y, 0, a, 0, 0, 1, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 5);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 20 || count == 30 || count == 45 || count == 60)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Jotarosfx10.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 50, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
    }

    if (count >= 70 && count <= 100)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        if (dist > 120)
        {
            x = PolarX(GetSpecialEffectX(e), dist / 20, a);
            y = PolarY(GetSpecialEffectY(e), dist / 20, a);
            SetEffectXY(e, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -100, a);
            y = PolarY(GetUnitY(t), -100, a);
            SetEffectXY(e, x, y, 0);
        }

        if (count == 70) { SetSpecialEffectAnimationByIndex(e, 9); }
        if (count == 85) { SetSpecialEffectAnimationByIndex(e, 4); }
    }

    if (count == 100)
    {
        SoundStart("JotaroSE5.mp3");
        e = LoadEffectHandle(GameHT, hid, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Alicesfx31.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Vegetasfx7.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a, -90, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("vegetasfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Vegetasfx9.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 210, 0.2, 0.02, true);
    }

    if (count == 112)
    {
        Effect("Hibarisfx15.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Jotarosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Sabosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A008') * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JotaroW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("JotaroQ.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        x = PolarX(GetUnitX(u), 70, a - 120);
        y = PolarY(GetUnitY(u), 70, a - 120);
        Effect("Jotarosfx1.mdx", x, y, 80, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx2.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx3.mdx", x, y, 0, a, 0, 0, 1, 4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 5);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 15)
    {
        SoundStart("JotaroW.mp3");
        SoundStart("JotaroSE2.mp3");
        SetUnitAnimationByIndex(u, 2);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count >= 15 && count <= 145)
    {
        if (dist > 220)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 5, a);
            y = PolarY(GetUnitY(t), 5, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -200, a);
            y = PolarY(GetUnitY(t), -200, a);
            SetUnitXY(u, x, y, 0);
        }

        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetUnitX(u), 90, a);
        y = PolarY(GetUnitY(u), 90, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);

        if (count == 40)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
            SetSpecialEffectAnimationByIndex(e, 3);
            SetSpecialEffectTimeScale(dummy_effect, 1);
        }
        if (count == 145)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
            SetUnitAnimationByIndex(u, 0);
        }

        if (count >= 40)
        {
            if (count % 10 == 0)
            {
                if (GetRandomInt(1, 2) == 1)
                {
                    SoundStart("JotaroSE3.mp3");
                }
                else
                {
                    SoundStart("JotaroSE4.mp3");
                }
                a2 = GetRandomReal(-45, 45);
                Effect("Alicesfx31.mdx", GetUnitX(t), GetUnitY(t), 100, a + a2, 0, 0, 1.4, 1, 255, 255, 255, 255);
                x = PolarX(GetUnitX(t), 50, a + a2);
                y = PolarY(GetUnitY(t), 50, a + a2);
                Effect("Alicesfx31.mdx", x, y, 100, a + a2, 0, 0, 1.4, 1, 255, 255, 255, 255);
                Effect("Jotarosfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + a2, -90, 0, GetRandomReal(0.9, 1.2), 1, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(1.25, 1.5));
                Effect("Alicesfx25.mdx", GetUnitX(t), GetUnitY(t), 100, a + a2 + 180, 0, 0, 2.5, 1, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
                if (GetRandomInt(1, 2) == 1)
                {
                    Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 120, randomAngle(), GetRandomReal(-30, -10), 0, GetRandomReal(4, 5), 1, 255, 255, 255, PercentTo255(80));
                }
                else
                {
                    Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 120, randomAngle(), GetRandomReal(-50, -40), 0, GetRandomReal(4, 5), 1, 255, 255, 255, PercentTo255(80));
                }
            }
        }
    }

    if (count == 155)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 4);
        TransEffect(e, 255, 5, 0.6, 0.02);
    }

    if (count == 175)
    {
        SoundStart("JotaroSE5.mp3");
        e = LoadEffectHandle(GameHT, hid, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Alicesfx31.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Vegetasfx7.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a, -90, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("vegetasfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Vegetasfx9.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 190, 0.2, 0.02, true);
    }

    if (count == 187)
    {
        Effect("Hibarisfx15.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Jotarosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Sabosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A08O')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JotaroQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    effect e = nil;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("JotaroQ.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x2 = PolarX(GetUnitX(u), 70, a - 120);
        y2 = PolarY(GetUnitY(u), 70, a - 120);
        Effect("Jotarosfx1.mdx", x2, y2, 80, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx2.mdx", x2, y2, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx3.mdx", x2, y2, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 5);
        SetSpecialEffectTimeScale(dummy_effect, 2);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 7)
    {
        SoundStart("JotaroSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        e = LoadEffectHandle(GameHT, hid, 0);
        TransEffect(e, 255, 6, 0.4, 0.02);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
        SetSpecialEffectAnimationByIndex(e, 10);
        SetSpecialEffectTimeScale(e, 1.5);
        Effect("Jotarosfx2.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jotarosfx4.mdx", x, y, 0, a, 0, 0, 1.3, 1.5, 255, 255, 255, 255);
        for (int i = 0; i < 5; i++)
        {
            a = randomAngle();
            x2 = PolarX(x, GetRandomReal(50, 250), a);
            y2 = PolarY(y, GetRandomReal(50, 250), a);
            Effect("Jotarosfx5.mdx", x2, y2, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Jotarosfx6.mdx", x2, y2, 0, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        }

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A08N'));
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BisgohanD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("BisgohanD.mp3");
        SoundStart("BisgohanSE1.mp3");
        SoundStart("BisgohanSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 14);
        SetUnitTimeScale(u, 0.9);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 10 || count == 20 || count == 30 || count == 40)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BisgohanSE4.mp3");
        }
        else
        {
            SoundStart("BisgohanSE5.mp3");
        }
        SoundStart("BisgohanSE6.mp3");
        if (count != 10)
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
        if (count < 40) { RushSlide(t, a, 170, 0.2, 0.02, true); }
        if (count == 40) { RushSlide(t, a, 320, 0.4, 0.02, true); }
        x = PolarX(GetUnitX(u), -100, a);
        y = PolarY(GetUnitY(u), -100, a);
        Effect("Bisgohansfx12.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Bisgohansfx19.mdx", GetUnitX(t), GetUnitY(t), 150, randomAngle(), GetRandomReal(-50, -30), 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 60)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BisgohanSE4.mp3");
        }
        else
        {
            SoundStart("BisgohanSE5.mp3");
        }
        SoundStart("BisgohanSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        x = PolarX(GetUnitX(u), -100, a);
        y = PolarY(GetUnitY(u), -100, a);
        Effect("Bisgohansfx12.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Bisgohansfx19.mdx", GetUnitX(t), GetUnitY(t), 150, randomAngle(), GetRandomReal(-50, -30), 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 70)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BisgohanF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("BisgohanF.mp3");
        SoundStart("BisgohanSE1.mp3");
        SoundStart("BisgohanSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 0.9);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 30 || count == 60 || count == 100)
    {
        if (count == 60)
        {
            SoundStart("BisgohanSE1.mp3");
            SoundStart("BisgohanSE3.mp3");
        }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        if (count == 30) { SetUnitAnimationByIndex(u, 13); }
        if (count == 60) { SetUnitAnimationByIndex(u, 15); }
        if (count == 100) { SetUnitAnimationByIndex(u, 10); }
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count <= 20 || count >= 30 && count <= 50 || count >= 60 && count <= 80 || count >= 100 && count <= 120)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            if (count <= 80)
            {
                x = PolarX(GetUnitX(t), 10, a);
                y = PolarY(GetUnitY(t), 10, a);
                SetUnitXY(t, x, y, 2);
            }
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count >= 100)
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 30, 0);
        }
    }

    if (count == 20 || count == 50 || count == 80)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BisgohanSE4.mp3");
        }
        else
        {
            SoundStart("BisgohanSE5.mp3");
        }
        SoundStart("BisgohanSE6.mp3");
        if (count < 80)
        {
            RushSlide(t, a, 160, 0.2, 0.02, true);
        }
        else
        {
            RushSlide(t, a, 600, 0.6, 0.02, true);
            SetUnitFlyHeight(t, 600, 1000);
        }
        x = PolarX(GetUnitX(u), -100, a);
        y = PolarY(GetUnitY(u), -100, a);
        Effect("Bisgohansfx12.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 120)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BisgohanSE4.mp3");
        }
        else
        {
            SoundStart("BisgohanSE5.mp3");
        }
        SoundStart("BisgohanSE6.mp3");
        SoundStart("bisgohanSE1.mp3");
        Effect("Bisgohansfx10.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx3.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 3, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx9.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Arthursfx11.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetUnitFlyHeight(t, 0, 3000);
        SetUnitFlyHeight(u, 0, 3000);
    }

    if (count == 130)
    {
        SoundStart("bisgohanSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Bisgohansfx2.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Bisgohansfx4.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Bisgohansfx4.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Bisgohansfx4.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Bisgohansfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Bisgohansfx7.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1.2, 2.2), 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Bisgohansfx7.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1.2, 2.2), 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Bisgohansfx7.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1.2, 2.2), 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Bisgohansfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Bisgohansfx11.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 135)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BisgohanT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("BisgohanT.mp3");
        SoundStart("BisgohanSE8.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        Effect("Vegetasfx12.mdx", GetUnitX(u), GetUnitY(u), 60, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.4);
    }

    if (count == 1 || count == 40 || count == 80)
    {
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, randomAngle(), 0, 0, GetRandomReal(2, 3), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Bisgohansfx2.mdx", GetUnitX(u), GetUnitY(u), 10, randomAngle(), 0, 0, GetRandomReal(1.5, 2.5), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 1 || count == 20 || count == 40 || count == 60 || count == 80)
    {
        Effect("Vegetasfx12.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1, 1.5), 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
    }

    if (count == 100)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BisgohanT-1.mp3");
        }
        else
        {
            SoundStart("BisgohanT-2.mp3");
        }
        SoundStart("BisgohanSE1.mp3");
        SoundStart("BisgohanSE3.mp3");
        SetUnitAnimationByIndex(u, 15);
        SetUnitTimeScale(u, 0.9);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count >= 100 && count <= 130)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 130)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BisgohanSE4.mp3");
        }
        else
        {
            SoundStart("BisgohanSE5.mp3");
        }
        SoundStart("BisgohanSE6.mp3");
        RushSlide(t, a, 200, 2.8, 0.02, true);
        x = PolarX(GetUnitX(u), -100, a);
        y = PolarY(GetUnitY(u), -100, a);
        Effect("Bisgohansfx12.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 150)
    {
        SoundStart("BisgohanSE9.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 4, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 160)
    {
        Effect("Bisgohansfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 4, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.4);
        Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Hutaosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Hutaosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a + 180, 0, 0, 8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Hutaosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 9, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Hutaosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a + 180, 0, 0, 9, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 170)
    {
        Effect("Ogitasfx12.mdx", GetUnitX(u), GetUnitY(u), 20, a, 0, 0, 7, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 190)
    {
        SoundStart("BisgohanT-3.mp3");
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 1);
    }

    if (count == 210)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count == 290)
    {
        SoundStart("BisgohanSE10.mp3");
        SoundStart("BisgohanSE11.mp3");
    }

    if (count == 195 || count == 215 || count == 235 || count == 255 || count == 275 || count == 295 || count == 315 || count == 335)
    {
        Effect("Bisgohansfx18_2.mdx", GetUnitX(u), GetUnitY(u), 30, randomAngle(), 0, 0, GetRandomReal(1, 2), 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count >= 180 && count <= 280)
    {
        if (count % 5 == 0)
        {
            SaveInteger(GameHT, hid, 'iter', 0);
            a2 = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(250, 750), a2);
            y = PolarY(GetUnitY(u), GetRandomReal(250, 750), a2);
            Effect("Yugisfx11.mdx", x, y, 0, a2, 0, 0, 1, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            a2 = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(250, 750), a2);
            y = PolarY(GetUnitY(u), GetRandomReal(250, 750), a2);
            Effect("Yugisfx11.mdx", x, y, 0, a2, 0, 0, 1, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
    }

    if (count == 300)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Bisgohansfx15.mdx", GetUnitX(u), GetUnitY(u), 70, a, 0, 0, 3, 2, 255, 255, 255, 255);
        RushSlide(t, a, 250, 1, 0.02, true);
    }

    if (count == 210 || count == 230 || count == 250 || count == 270 || count == 290 || count == 300 || count == 310 || count == 320 || count == 330 || count == 340 || count == 350)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("vegetasfx12.mdx", u, "hand right"), 1);
        if (count >= 300)
        {
            Effect("Bisgohansfx5.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.8, 1.6), 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Hutaosfx14.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, GetRandomReal(5, 6), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.4, 0.6));
        }
        if (count == 350)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        }
    }

    if (count == 360)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BisgohanR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("BisgohanR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Bisgohansfx2.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Vegetasfx12.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 25)
    {
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 3.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 40)
    {
        SoundStart("BisgohanSE1.mp3");
        SoundStart("BisgohanSE3.mp3");
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 0.8);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 75)
    {
        SetUnitAnimationByIndex(u, 15);
        SetUnitTimeScale(u, 0.9);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count >= 40 && count <= 60 || count >= 75 && count <= 95)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 60 || count == 95)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BisgohanSE4.mp3");
        }
        else
        {
            SoundStart("BisgohanSE5.mp3");
        }
        SoundStart("BisgohanSE6.mp3");
        if (count == 60) { RushSlide(t, a, 150, 0.4, 0.02, true); }
        if (count == 95) { RushSlide(t, a, 320, 0.8, 0.02, true); }
        x = PolarX(GetUnitX(u), -100, a);
        y = PolarY(GetUnitY(u), -100, a);
        Effect("Bisgohansfx12.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 105)
    {
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 1);
    }

    if (count == 130 || count == 140 || count == 150 || count == 160 || count == 170)
    {
        Effect("Vegetasfx12.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, GetRandomReal(1.5, 2.5), 2, 255, 255, 255, 255);
    }

    if (count == 170)
    {
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 1);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(50));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 125 || count == 190)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count == 185)
    {
        SoundStart("BisgohanSE7.mp3");
        SoundStart("BisgohanSE1.mp3");
        SoundStart("BisgohanSE3.mp3");
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        Effect("Bisgohansfx14.mdx", GetUnitX(u), GetUnitY(u), 70, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 260, 1.2, 0.02, true);
    }

    if (count == 190 || count == 200 || count == 210 || count == 220 || count == 230)
    {
        if (count == 220) { visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t)); }
        DestroyEffectTimed(AddSpecialEffectTarget("vegetasfx12.mdx", u, "hand right"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("vegetasfx12.mdx", u, "hand left"), 1);
        Effect("Bisgohansfx5.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.8, 1.6), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        Effect("Hutaosfx14.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, GetRandomReal(5, 6), 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.4, 0.6));
    }

    if (count == 230)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A03L')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BisgohanE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("BisgohanE.mp3");
        SoundStart("BisgohanSE1.mp3");
        SoundStart("BisgohanSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 0.9);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count <= 30)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 30)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BisgohanSE4.mp3");
        }
        else
        {
            SoundStart("BisgohanSE5.mp3");
        }
        SoundStart("BisgohanSE6.mp3");
        RushSlide(t, a, 300, 0.6, 0.02, true);
        x = PolarX(GetUnitX(u), -100, a);
        y = PolarY(GetUnitY(u), -100, a);
        Effect("Bisgohansfx12.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 40)
    {
        SoundStart("BisgohanSE1.mp3");
        SoundStart("BisgohanSE3.mp3");
        SetUnitAnimationByIndex(u, 15);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count >= 40 && count <= 60)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 60)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BisgohanSE4.mp3");
        }
        else
        {
            SoundStart("BisgohanSE5.mp3");
        }
        SoundStart("BisgohanSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(u), -100, a);
        y = PolarY(GetUnitY(u), -100, a);
        Effect("Bisgohansfx12.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        RushSlide(t, a, 350, 0.6, 0.02, true);
        KnockupUnit(t, 0.6, 0.02, 350);
    }

    if (count == 65)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A03H') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BisgohanW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("BisgohanW.mp3");
        SoundStart("BisgohanSE1.mp3");
        SoundStart("BisgohanSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 4);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
    }

    if (count == 25 || count == 55 || count == 85)
    {
        if (count == 55) 
        {
            SoundStart("BisgohanSE1.mp3");
            SoundStart("BisgohanSE3.mp3");
        }
        if (count == 25 || count == 55)
        {
            x = PolarX(GetUnitX(t), 400, a);
            y = PolarY(GetUnitY(t), 400, a);
        }
        if (count == 85)
        {
            x = PolarX(GetUnitX(t), -600, a);
            y = PolarY(GetUnitY(t), -600, a);
        }
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        if (count == 25 || count == 55) 
        { 
            SetUnitAnimationByIndex(u, 15); 
        }
        if (count == 85) 
        { 
            SetUnitAnimationByIndex(u, 17); 
        }
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count >= 25 && count <= 45 || count >= 55 && count <= 75 || count >= 85 && count <= 105)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 10 || count == 45 || count == 75 || count == 105)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BisgohanSE4.mp3");
        }
        else
        {
            SoundStart("BisgohanSE5.mp3");
        }
        SoundStart("BisgohanSE6.mp3");
        if (count == 10) { RushSlide(t, a, 290, 0.8, 0.02, true); }
        if (count == 45) { RushSlide(t, a, 250, 0.6, 0.02, true); }
        if (count == 75) { RushSlide(t, a, 230, 0.6, 0.02, true); }
        if (count == 105) { RushSlide(t, a, 350, 0.6, 0.02, true); }
        x = PolarX(GetUnitX(u), -100, a);
        y = PolarY(GetUnitY(u), -100, a);
        Effect("Bisgohansfx12.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Bisgohansfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        if (count == 105)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        }
    }

    if (count == 12 || count == 47 || count == 77 || count == 107)
    {
        Effect("Hutaosfx12.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 3.5, 1, 255, 255, 255, 255);
    }

    if (count == 110)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A082')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BisgohanQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    int iterator = LoadInteger(GameHT, hid, 'iter');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("bisgohanQ.mp3");
        SoundStart("bisgohanSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 1.4);
        Effect("Bisgohansfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Bisgohansfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1.5, 255, 255, 255, 255);
        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\Invisibility\\InvisibilityTarget.mdx", u, "hand right"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\Invisibility\\InvisibilityTarget.mdx", u, "chest"), 1);
        RushSlide(u, a, dist, 0.2, 0.02, false);
        KnockupUnit(u, 0.2, 0.02, 400);
    }

    if (count == 12)
    {
        SoundStart("bisgohanSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Bisgohansfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Bisgohansfx4.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Bisgohansfx4.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Bisgohansfx4.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Bisgohansfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bisgohansfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Bisgohansfx7.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.2, 2.2), 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Bisgohansfx7.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.2, 2.2), 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Bisgohansfx7.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.2, 2.2), 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Bisgohansfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Bisgohansfx11.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 500, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A081'));
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AcheronD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AcheronD.mp3");
        visionArea(GetOwningPlayer(u), 1500, 5, GetUnitX(u), GetUnitY(u));
        UnitHilang(u, true);
        x = PolarX(GetUnitX(t), -800, a);
        y = PolarY(GetUnitY(t), -800, a);
        Effect("Acheronred.mdx", x, y, 0, a, 0, 0, 1, 5.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 24);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Black.mdx", x, y, 0, a, 0, 0, 2, 5.6, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Gojosfx8.mdx", x, y, 100, a, 0, 0, 5, 4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count <= 200)
    {
        if (count % 4 == 0)
        {
            e = LoadEffectHandle(GameHT, hid, 0);
            a2 = randomAngle();
            x = PolarX(GetSpecialEffectX(e), GetRandomReal(100, 300), a2);
            y = PolarY(GetSpecialEffectY(e), GetRandomReal(100, 300), a2);
            Effect("Alphasfx17.mdx", x, y, GetRandomReal(100, 150), a2, 0, 0, GetRandomReal(2.5, 3.5), 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            a2 = randomAngle();
            x = PolarX(GetSpecialEffectX(e), GetRandomReal(200, 600), a2);
            y = PolarY(GetSpecialEffectY(e), GetRandomReal(200, 600), a2);
            Effect("Acheronsfx21.mdx", x, y, 0, a2, 0, 0, GetRandomReal(0.8, 1.2), 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Gojosfx9.mdx", x, y, 50, a2, 0, 0, GetRandomReal(1.5, 2.5), 1, 255, 255, 255, 255);
            Effect("Gojosfx11.mdx", x, y, 50, a2, 0, 0, GetRandomReal(0.3, 0.6), 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1.25));
        }
    }

    if (count == 200)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 7);
        SetSpecialEffectTimeScale(e, 0.8);
    }

    if (count >= 220 && count <= 240)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SaveReal(GameHT, hid, 0, LoadReal(GameHT, hid, 0) + 30);
        if (count % 3 == 0)
        {
            x = PolarX(GetSpecialEffectX(e), 50 + LoadReal(GameHT, hid, 1), a);
            y = PolarY(GetSpecialEffectY(e), 50 + LoadReal(GameHT, hid, 1), a);
            Effect("Acheronsfx22.mdx", x, y, 0, a, 0, 0, 0.6 + (count-220) * 0.02, 2 - (count-220) * 0.02, 255, 255, 255, 255);
            TimeScaleEffect(dummy_effect, 0.2, 0.2);
        }
    }

    if (count == 240)
    {
        SoundStart("AcheronSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Saltersfx38.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Acheronsfx19.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 260)
    {
        Effect("Jellalsfx23.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
    }

    if (count == 275)
    {
        UnitHilang(u, false);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AcheronF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float a2 = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;
    effect e = nil;
    float x2 = .0f;
    float y2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("AcheronF.mp3");
        visionArea(GetOwningPlayer(u), 1500, 12, x, y);
        SetUnitVertexColor(u, 255, 255, 255, 0);
        x2 = PolarX(x, -1000, a);
        y2 = PolarY(y, -1000, a);
        Effect("Acheronred.mdx", x2, y2, 0, a, 0, 0, 1, 10.5, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 30);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Acheronsfx10.mdx", x2, y2, 0, a, 0, 0, 1, 10.5, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        Effect("Gojosfx24.mdx", x2, y2, 0, a, 0, 0, 3.8, 10.5, 255, 0, 0, PercentTo255(40));
        TimeScaleEffect(dummy_effect, 1, 9.5);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
        Effect("Acheronsfx20.mdx", x2, y2, 10, randomAngle(), 0, 0, 2, 10, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SaveEffectHandle(GameHT, hid, 3, dummy_effect);
        Effect("Acheronsfx20.mdx", x2, y2, 10, randomAngle(), 0, 0, 2, 10, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SaveEffectHandle(GameHT, hid, 4, dummy_effect);
        g1 = CreateGroup();
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 700, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g2, d);
            }
        }
        DestroyGroup(g1);
        SaveGroupHandle(GameHT, hid, 'grp+', g2);
    } 

    if (count == 250)
    {
        SoundStart("AcheronSE5.mp3");
    }

    if (count <= 300)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x2 = PolarX(GetSpecialEffectX(e), 1000.f/300.f, a);
        y2 = PolarY(GetSpecialEffectY(e), 1000.f/300.f, a);
        SetEffectXY(e, x2, y2, 0);
        SetSpecialEffectHeight(e, 0);
        e = LoadEffectHandle(GameHT, hid, 1);
        SetEffectXY(e, x2, y2, 0);
        SetSpecialEffectHeight(e, 0);
        SetSpecialEffectAnimationOffsetPercent(e, count * 0.003);
        e = LoadEffectHandle(GameHT, hid, 2);
        SetEffectXY(e, x2, y2, 0);
        SetSpecialEffectHeight(e, 0);
        SetSpecialEffectAnimationOffsetPercent(e, count * 0.002);
        if (count == 300) { SetSpecialEffectTimeScale(e, 0); }
        e = LoadEffectHandle(GameHT, hid, 3);
        SetEffectXY(e, x2, y2, 0);
        SetSpecialEffectHeight(e, 0);
        e = LoadEffectHandle(GameHT, hid, 4);
        SetEffectXY(e, x2, y2, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 300)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 11);
        SetSpecialEffectTimeScale(e, 0.7);
    }

    if (count >= 300 && count <= 400)
    {
        if (count % 5 == 0)
        {
            a2 = randomAngle();
            x2 = PolarX(x, GetRandomReal(200, 800), a2);
            y2 = PolarY(y, GetRandomReal(200, 800), a2);
            Effect("Acheronsfx14.mdx", x2, y2, 100, a2, 0, 0, GetRandomReal(0.5, 1), 4 - (count-300) * 0.02, 255, 255, 255, 255);
            Effect("Acheronsfx12.mdx", x2, y2, 100, a2, 0, 0, GetRandomReal(1, 1.5), 4 - (count-300) * 0.02, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
            TimeScaleEffect(dummy_effect, 0, 0.4);
        }
    }

    if (count == 430)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Acheronsfx18.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 1.4);
    }

    if (count == 480)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Acheronsfx19.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 490)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SoundStart("AcheronSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetSpecialEffectX(e), GetSpecialEffectY(e));
        Effect("Yomisfx17.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Gojosfx18.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a, 0, 0, 15, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Saltersfx38.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Gojosfx19.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 10, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Acheronsfx17.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx16.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 10, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 500)
    {
        SetUnitXY(u, x, y, 1);
        SetUnitVertexColor(u, 255, 255, 255, 255);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, false);
            SetInvulUnit(d, false);
        }
        DestroyGroup(g1);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 700, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 11 * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AcheronT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("AcheronT.mp3");
        visionArea(GetOwningPlayer(u), 1500, 12, GetUnitX(u), GetUnitY(u));
        UnitHilang(u, true);
        x = PolarX(GetUnitX(t), -800, a);
        y = PolarY(GetUnitY(t), -800, a);
        Effect("Acheronred.mdx", x, y, 0, a, 0, 0, 1, 12.2, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 30);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Acheronsfx10.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 12.2, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
    }

    if (count <= 200)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 2, a);
        y = PolarY(GetSpecialEffectY(e), 2, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectAnimationOffsetPercent(e, count * 0.005);
    }

    if (count == 200)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 10);
    }

    if (count == 290)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 25);
        Effect("Acheronsfx11.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx12.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acheronsfx14.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx13.mdx", GetUnitX(t), GetUnitY(t), 100, a, -45, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Gojosfx26.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Saltersfx38.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count >= 290 && count <= 310)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 20, a - 80);
        y = PolarY(GetSpecialEffectY(e), 20, a - 80);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
        a2 = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        SetSpecialEffectYaw(e, a2);
    }

    if (count == 340)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 27);
        SetSpecialEffectTimeScale(e, 0.9);
        a2 = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        Effect("Acheronsfx11.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a2, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx12.mdx", GetUnitX(t), GetUnitY(t), 100, a2 - 90, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acheronsfx14.mdx", GetUnitX(t), GetUnitY(t), 100, a2 - 90, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx13.mdx", GetUnitX(t), GetUnitY(t), 100, a2, 20, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Gojosfx26.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Saltersfx38.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count >= 340 && count <= 355)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 45, a + 80);
        y = PolarY(GetSpecialEffectY(e), 45, a + 80);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
        a2 = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        SetSpecialEffectYaw(e, a2);
    }

    if (count == 365)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        a2 = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        Effect("Acheronsfx11.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 200, a2, 0, -90, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx12.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a2 + 180, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acheronsfx14.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a2 + 180, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx13.mdx", GetUnitX(t), GetUnitY(t), 100, a2, -130, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Gojosfx26.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Saltersfx38.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count >= 360 && count <= 375)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), -25, a);
        y = PolarY(GetSpecialEffectY(e), -25, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
        a2 = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        SetSpecialEffectYaw(e, a2);
    }

    if (count == 420)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 29);
        a2 = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        SetSpecialEffectYaw(e, a2);
    }

    if (count == 435)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        a2 = GetSpecialEffectYaw(e);
        Effect("Acheronsfx11.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a2, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx12.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a2, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acheronsfx14.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a2, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx13.mdx", GetUnitX(t), GetUnitY(t), 100, a2, -130, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Gojosfx26.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Saltersfx38.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count >= 420 && count <= 450)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 35, GetSpecialEffectYaw(e));
        y = PolarY(GetSpecialEffectY(e), 35, GetSpecialEffectYaw(e));
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 470)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 15);
        SetSpecialEffectTimeScale(e, 0.75);
    }

    if (count == 530)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 16);
        Effect("Acheronsfx18.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
    }

    if (count == 580)
    {
        Effect("Acheronsfx19.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 590)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yomisfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Gojosfx18.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 15, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Saltersfx38.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Gojosfx19.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Acheronsfx17.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx16.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 600)
    {
        UnitHilang(u, false);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AcheronR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    int iterator = LoadInteger(GameHT, hid, 'iter');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;
    effect e = nil;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AcheronR.mp3");
        SoundStart("AcheronSE5.mp3");
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 0.85);
        Effect("Acheronsfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 0.8, 1.5, 255, 255, 255, 255);
        Effect("Alphasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 3 || count == 6 || count == 9 || count == 12)
    {
        Effect("Alphasfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Alphasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.6, 1, 255, 255, 255, 255);
    }

    if (count <= 20)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 20)
    {
        SoundStart("AcheronSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitVertexColor(u, 255, 255, 255, 0);
        Effect("Acheronsfx1.mdx", GetUnitX(t), GetUnitY(t), 150, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a + 180, 0, 0, 1.8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, -45, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 45, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Alphasfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 126, 28, 182, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Yomisfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 30)
    {
        x = PolarX(GetUnitX(t), -700, a + 150);
        y = PolarY(GetUnitY(t), -700, a + 150);
        a = Angle(GetUnitX(u), GetUnitY(u), x, y);
        dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        Effect("Acheron.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 19);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveReal(GameHT, hid, 0, dist);
        
        x2 = PolarX(GetUnitX(u), dist / 2, a);
        y2 = PolarY(GetUnitY(u), dist / 2, a);
        Effect("Acheronsfx8.mdx", x2, y2, 50, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acheronsfx5.mdx", x2, y2, 150, a, 0, 0, 1.8, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx6.mdx", x2, y2, 150, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count >= 30 && count <= 40)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        a = GetSpecialEffectYaw(e);
        dist = LoadReal(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), dist / 10, a);
        y = PolarY(GetSpecialEffectY(e), dist / 10, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 50)
    {
        x = PolarX(GetUnitX(t), -550, a + 220);
        y = PolarY(GetUnitY(t), -550, a + 220);
        a = Angle(GetUnitX(u), GetUnitY(u), x, y);
        dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        Effect("Acheron.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.8, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 20);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        SaveReal(GameHT, hid, 1, dist);
        
        x2 = PolarX(GetUnitX(u), dist / 2, a);
        y2 = PolarY(GetUnitY(u), dist / 2, a);
        Effect("Acheronsfx8.mdx", x2, y2, 50, a, 0, 0, 2, 2.8, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acheronsfx5.mdx", x2, y2, 150, a, 0, 0, 1.8, 2.8, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx6.mdx", x2, y2, 150, a, 0, 0, 3, 2.8, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count >= 50 && count <= 60)
    {
        e = LoadEffectHandle(GameHT, hid, 1);
        a = GetSpecialEffectYaw(e);
        dist = LoadReal(GameHT, hid, 1);
        x = PolarX(GetSpecialEffectX(e), dist / 10, a);
        y = PolarY(GetSpecialEffectY(e), dist / 10, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 70)
    {
        x = PolarX(GetUnitX(t), -600, a + 60);
        y = PolarY(GetUnitY(t), -600, a + 60);
        a = Angle(GetUnitX(u), GetUnitY(u), x, y);
        dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        Effect("Acheron.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 21);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        SaveReal(GameHT, hid, 1, dist);
        
        x2 = PolarX(GetUnitX(u), dist / 2, a);
        y2 = PolarY(GetUnitY(u), dist / 2, a);
        Effect("Acheronsfx8.mdx", x2, y2, 50, a, 0, 0, 2, 2.6, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acheronsfx5.mdx", x2, y2, 150, a, 0, 0, 1.8, 2.6, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx6.mdx", x2, y2, 150, a, 0, 0, 3, 2.6, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count >= 70 && count <= 80)
    {
        e = LoadEffectHandle(GameHT, hid, 1);
        a = GetSpecialEffectYaw(e);
        dist = LoadReal(GameHT, hid, 1);
        x = PolarX(GetSpecialEffectX(e), dist / 10, a);
        y = PolarY(GetSpecialEffectY(e), dist / 10, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 90)
    {
        x = PolarX(GetUnitX(t), -500, a + 300);
        y = PolarY(GetUnitY(t), -500, a + 300);
        a = Angle(GetUnitX(u), GetUnitY(u), x, y);
        dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        Effect("Acheron.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 22);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        SaveReal(GameHT, hid, 1, dist);
        
        x2 = PolarX(GetUnitX(u), dist / 2, a);
        y2 = PolarY(GetUnitY(u), dist / 2, a);
        Effect("Acheronsfx8.mdx", x2, y2, 50, a, 0, 0, 2, 2.4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acheronsfx5.mdx", x2, y2, 150, a, 0, 0, 1.8, 2.4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx6.mdx", x2, y2, 150, a, 0, 0, 3, 2.4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count >= 90 && count <= 100)
    {
        e = LoadEffectHandle(GameHT, hid, 1);
        a = GetSpecialEffectYaw(e);
        dist = LoadReal(GameHT, hid, 1);
        x = PolarX(GetSpecialEffectX(e), dist / 10, a);
        y = PolarY(GetSpecialEffectY(e), dist / 10, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 110)
    {
        SetUnitVertexColor(u, 255, 255, 255, 255);
        SetUnitAnimationByIndex(u, 11);
        SetUnitTimeScale(u, 0.8);
        Effect("Acheronsfx9.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 0.9, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gojosfx24.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        TimeScaleEffect(dummy_effect, 0, 0.6);
        TimeScaleEffect(dummy_effect, 1, 1);
    }

    if (count >= 120 && count <= 169)
    {
        iterator++;
        SaveInteger(GameHT, hid, 'iter', iterator);
        if (iterator >= 5)
        {
            SaveInteger(GameHT, hid, 'iter', 0);
            SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1);
            if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
            {
                if (count != 169)
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\AcheronR (" + I2S(LoadInteger(GameHT, hid, 0)) + ").blp", 100, 100, 100, 0, 100, 100, 100, 0);
                }
                else
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\AcheronR (" + I2S(LoadInteger(GameHT, hid, 0)) + ").blp", 100, 100, 100, 0, 100, 100, 100, 100);
                }
            }
        }
    }

    if (count == 160)
    {
        Effect("Cidsfx30.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 170)
    {
        Effect("Yomisfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Gojosfx18.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 10, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Saltersfx38.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Gojosfx19.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Cidsfx6.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Cidsfx1.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 185)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A08J')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AcheronE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    int iterator = LoadInteger(GameHT, hid, 'iter');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;
    effect e = nil;
    effect e2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AcheronE.mp3");
        SoundStart("AcheronSE4.mp3");
        x = PolarX(GetUnitX(t), -500, a);
        y = PolarY(GetUnitY(t), -500, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 11);
        SetUnitTimeScale(u, 0.8);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        x = PolarX(GetUnitX(t), -650, a + 150);
        y = PolarY(GetUnitY(t), -650, a + 150);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        Effect("Acheron.mdx", x, y, 0, a + 150, 0, 0, 1, 0.7, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 19);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveReal(GameHT, hid, 10, x);
        SaveReal(GameHT, hid, 11, y);

        x2 = PolarX(GetUnitX(t), -500, a + 220);
        y2 = PolarY(GetUnitY(t), -500, a + 220);
        visionArea(GetOwningPlayer(u), 1200, 3, x2, y2);
        SaveReal(GameHT, hid, 0, Distance(x, y, x2, y2));
        Effect("Acheron.mdx", x2, y2, 0, a + 220, 0, 0, 1, 1.1, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 20);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        SaveReal(GameHT, hid, 12, x2);
        SaveReal(GameHT, hid, 13, y2);

        x = PolarX(GetUnitX(t), -550, a + 60);
        y = PolarY(GetUnitY(t), -550, a + 60);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        SaveReal(GameHT, hid, 1, Distance(x2, y2, x, y));
        Effect("Acheron.mdx", x, y, 0, a + 240, 0, 0, 1, 1.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 21);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
        SaveReal(GameHT, hid, 14, x);
        SaveReal(GameHT, hid, 15, y);

        x2 = PolarX(GetUnitX(t), -400, a + 300);
        y2 = PolarY(GetUnitY(t), -400, a + 300);
        visionArea(GetOwningPlayer(u), 1200, 3, x2, y2);
        SaveReal(GameHT, hid, 2, Distance(x, y, x2, y2));
        Effect("Acheron.mdx", x2, y2, 0, a + 120, 0, 0, 1, 2.1, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 22);
        SaveEffectHandle(GameHT, hid, 3, dummy_effect);
        SaveReal(GameHT, hid, 16, x2);
        SaveReal(GameHT, hid, 17, y2);

        SaveReal(GameHT, hid, 3, Distance(x2, y2, GetUnitX(u), GetUnitY(u)));
    }

    if (count >= 10 && count <= 25)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        e2 = LoadEffectHandle(GameHT, hid, 1);
        a = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectX(e2), GetSpecialEffectY(e2));
        dist = LoadReal(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), dist / 15, a);
        y = PolarY(GetSpecialEffectY(e), dist / 15, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 25)
    {
        e2 = LoadEffectHandle(GameHT, hid, 1);
        x = LoadReal(GameHT, hid, 10);
        y = LoadReal(GameHT, hid, 11);
        a = Angle(x, y, GetSpecialEffectX(e2), GetSpecialEffectY(e2));
        Effect("Acheronsfx2.mdx", GetSpecialEffectX(e2), GetSpecialEffectY(e2), 400, a, -45, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        x = PolarX(x, LoadReal(GameHT, hid, 0) / 2, a);
        y = PolarY(y, LoadReal(GameHT, hid, 0) / 2, a);
        Effect("Acheronsfx5.mdx", x, y, 400, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx6.mdx", x, y, 400, a, 0, 0, 2.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count >= 35 && count <= 50)
    {
        e = LoadEffectHandle(GameHT, hid, 1);
        e2 = LoadEffectHandle(GameHT, hid, 2);
        a = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectX(e2), GetSpecialEffectY(e2));
        dist = LoadReal(GameHT, hid, 1);
        x = PolarX(GetSpecialEffectX(e), dist / 15, a);
        y = PolarY(GetSpecialEffectY(e), dist / 15, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 50)
    {
        e2 = LoadEffectHandle(GameHT, hid, 2);
        x = LoadReal(GameHT, hid, 12);
        y = LoadReal(GameHT, hid, 13);
        a = Angle(x, y, GetSpecialEffectX(e2), GetSpecialEffectY(e2));
        Effect("Acheronsfx2.mdx", GetSpecialEffectX(e2), GetSpecialEffectY(e2), 400, a, 45, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        x = PolarX(x, LoadReal(GameHT, hid, 1) / 2, a);
        y = PolarY(y, LoadReal(GameHT, hid, 1) / 2, a);
        Effect("Acheronsfx5.mdx", x, y, 400, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx6.mdx", x, y, 400, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count >= 60 && count <= 75)
    {
        e = LoadEffectHandle(GameHT, hid, 2);
        e2 = LoadEffectHandle(GameHT, hid, 3);
        a = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectX(e2), GetSpecialEffectY(e2));
        dist = LoadReal(GameHT, hid, 2);
        x = PolarX(GetSpecialEffectX(e), dist / 15, a);
        y = PolarY(GetSpecialEffectY(e), dist / 15, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 75)
    {
        e2 = LoadEffectHandle(GameHT, hid, 3);
        x = LoadReal(GameHT, hid, 14);
        y = LoadReal(GameHT, hid, 15);
        a = Angle(x, y, GetSpecialEffectX(e2), GetSpecialEffectY(e2));
        Effect("Acheronsfx2.mdx", GetSpecialEffectX(e2), GetSpecialEffectY(e2), 400, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        x = PolarX(x, LoadReal(GameHT, hid, 2) / 2, a);
        y = PolarY(y, LoadReal(GameHT, hid, 2) / 2, a);
        Effect("Acheronsfx5.mdx", x, y, 400, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx6.mdx", x, y, 400, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count >= 85 && count <= 100)
    {
        e = LoadEffectHandle(GameHT, hid, 3);
        a = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(u), GetUnitY(u));
        dist = LoadReal(GameHT, hid, 3);
        x = PolarX(GetSpecialEffectX(e), dist / 20, a);
        y = PolarY(GetSpecialEffectY(e), dist / 20, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 100)
    {
        x = LoadReal(GameHT, hid, 16);
        y = LoadReal(GameHT, hid, 17);
        a = Angle(x, y, GetUnitX(u), GetUnitY(u));
        x = PolarX(x, LoadReal(GameHT, hid, 3) / 2, a);
        y = PolarY(y, LoadReal(GameHT, hid, 3) / 2, a);
        Effect("Acheronsfx5.mdx", x, y, 400, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx6.mdx", x, y, 400, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 110)
    {
        SoundStart("AcheronSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Acheronsfx1.mdx", GetUnitX(t), GetUnitY(t), 150, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a + 180, 0, 0, 1.8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, -45, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 45, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Alphasfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 126, 28, 182, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Yomisfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 120)
    {
        Effect("Acheronsfx7-2.mdx", GetUnitX(t), GetUnitY(t), 120, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 125)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A08I') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AcheronW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AcheronW.mp3");
        SoundStart("AliceSE4.mp3");
        SoundStart("AcheronSE2.mp3");
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 0.85);
        Effect("Acheronsfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acheronsfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 0.8, 1.5, 255, 255, 255, 255);
        Effect("Alphasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 3 || count == 6 || count == 9 || count == 12)
    {
        Effect("Alphasfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Alphasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.6, 1, 255, 255, 255, 255);
    }

    if (count <= 25)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 25)
    {
        SoundStart("AcheronSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Acheronsfx1.mdx", GetUnitX(t), GetUnitY(t), 150, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a + 180, 0, 0, 1.8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, -45, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acheronsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 45, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Alphasfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 126, 28, 182, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Yomisfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 30)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A08H')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AcheronQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("AcheronQ.mp3");
        SoundStart("AcheronSE1.mp3");
        SoundStart("AcheronSE2.mp3");
        SoundStart("AcheronSE3.mp3");
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 1.5);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Hutaosfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A08F'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        if (count % 3 == 0)
        {
            Effect("Cidsfx23.mdx", x, y, 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Acheronsfx1.mdx", x, y, 150, randomAngle(), 0, 0, 3, 1.5, 255, 255, 255, 255);
            for (int i = 1; i < 4; i++)
            {
                if (GetRandomInt(1, 2) == 1)
                {
                    Effect("Acheronsfx2.mdx", x, y, 100, randomAngle(), 0, 0, GetRandomReal(0.8, 1.2), 1.5, 255, 255, 255, 255);
                }
                else
                {
                    Effect("Acheronsfx2.mdx", x, y, 100, randomAngle(), -45, 0, GetRandomReal(0.8, 1.2), 1.5, 255, 255, 255, 255);
                }
            }
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CidD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;
    ability ab = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("CidD.mp3");
        SoundStart("CidSE2.mp3");
        SoundStart("CidSE3.mp3");
        x = PolarX(GetUnitX(t), -700, a);
        y = PolarY(GetUnitY(t), -700, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 12);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Cidsfx2.mdx", GetUnitX(u), GetUnitY(u), 150, a, 0, 0, 4, 5, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count <= 190)
    {
        a2 = LoadReal(GameHT, hid, 0);
        if (count < 100)
        {
            x = PolarX(GetUnitX(u), 16 - count * 0.13, a2);
            y = PolarY(GetUnitY(u), 16 - count * 0.13, a2);
        }
        else
        {
            x = PolarX(GetUnitX(u), 3, a2);
            y = PolarY(GetUnitY(u), 3, a2);
        }
        SetUnitXY(u, x, y, 0);

        e = LoadEffectHandle(GameHT, hid, 0);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 150);
        SetSpecialEffectAnimationOffsetPercent(e, count * 0.005);

        if (count % 10 == 0)
        {
            Effect("Ryogisfx3.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2, 1, 104, 34, 158, PercentTo255(40));
            Effect("Ryogisfx7.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2, 1, 104, 34, 158, PercentTo255(70));
            Effect("Ryogisfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 104, 34, 158, 255);
            Effect("Cidsfx17.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(50));
        }
    }

    if (count == 160)
    {
        a2 = LoadReal(GameHT, hid, 0);
        SetUnitFacing(u, a2 + 180);
    }

    if (count == 210)
    {
        SetUnitAnimationByIndex(u, 12);
    }

    if (count >= 210 && count <= 230)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
            RushSlide(u, a, 280, 0.2, 0.02, false);
            a2 = LoadReal(GameHT, hid, 0);
            SetUnitFacing(u, a2);
            SaveInteger(GameHT, hid, 'coun', 230);
        }
    }

    if (count == 240)
    {
        SoundStart("CidSE4.mp3");
        SoundStart("CidSE5.mp3");
        SoundStart("CidSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Cidsfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Cidsfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Cidsfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.55);
        Effect("Cidsfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a - 90, 0, 0, 0.1, 1, 255, 255, 255, 255);
        Effect("Cidsfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a + 90, 0, 0, 0.1, 1, 255, 255, 255, 255);
        Effect("Cidsfx11.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        Effect("Gokusfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, -45, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 45, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
    }

    if (count == 245)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 360, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CidF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    ability ab = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("CidF.mp3");
        SoundStart("CidSE2.mp3");
        SoundStart("CidSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 15);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
    }

    if (count <= 25)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 25 || count == 80 || count == 135)
    {
        SetUnitAnimationByIndex(u, 3);
    }

    if (count == 40 || count == 95)
    {
        SoundStart("CidSE8.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Cidsfx27.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Cidsfx1.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 3.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Cidsfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx28.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Mystosfx23.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        Effect("Mystosfx15.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 0.5, 1.5, 255, 255, 255, 255);
        if (count == 95)
        {
            Effect("Cidsfx29.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 4.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }
    }

    if (count == 150)
    {
        SoundStart("CidSE9.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Cidsfx27.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Cidsfx1.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 3.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Cidsfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx28.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Mystosfx23.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        Effect("Mystosfx15.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 0.5, 1.5, 255, 255, 255, 255);
        Effect("Cidsfx30.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 160)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CidT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("CidT.mp3");
        x = PolarX(GetUnitX(t), -200, a);
        y = PolarY(GetUnitY(t), -200, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 20, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
    }

    if (count <= 50)
    {
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 10, 0);

        if (count == 10 || count == 20 || count == 30 || count == 40)
        {
            Effect("Fuxuansfx3.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, GetRandomReal(1.5, 2.5), 1.5, 104, 34, 158, PercentTo255(90));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            Effect("Fuxuansfx3.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 104, 34, 158, PercentTo255(80));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
    }

    if (count == 50)
    {
        SetUnitAnimationByIndex(u, 6);
        Effect("Gojosfx2.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 7, 1.5, 104, 34, 158, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2.5, 19, 255, 255, 255, PercentTo255(70));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 60)
    {
        Effect("Cidsfx24.mdx", GetUnitX(u), GetUnitY(u), 10, randomAngle(), 0, 0, 10, 18.8, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 80)
    {
        Effect("Cidsfx25.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2.5, 18.4, 255, 255, 255, 255);
    }

    if (count == 90)
    {
        Effect("Cidsfx26.mdx", GetUnitX(u), GetUnitY(u), 10, randomAngle(), 0, 0, 7, 18.2, 50, 50, 255, 255);
        AnimEffect2(dummy_effect, "death", 17.2);
    }

    if (count == 100)
    {
        Effect("Cidsfx13.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 8, 16, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 15);
        Effect("Cidsfx14.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 5, 16, 255, 255, 255, PercentTo255(50));
        AnimEffect2(dummy_effect, "death", 15);
        Effect("Cidsfx16.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 6, 16, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 15);
    }

    if (count == 120)
    {
        SoundStart("CidT-1.mp3");
    }

    if (count == 130 || count == 160 || count == 190 || count == 220 || count == 250 || count == 280 || count == 310)
    {
        Effect("Cidsfx17.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, GetRandomReal(4, 5), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 150 || count == 250 || count == 350 || count == 450)
    {
        Effect("Cidsfx1.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, GetRandomReal(2.5, 3.5), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 320 || count == 350 || count == 380 || count == 410 || count == 440 || count == 470 || count == 510)
    {
        Effect("Cidsfx17.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, GetRandomReal(6, 7), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 490 || count == 530 || count == 570 || count == 610 || count == 650 || count == 690 || count == 730 || count == 770)
    {
        Effect("Ogitasfx18.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, GetRandomReal(3, 3.5), 1.5, 104, 34, 158, PercentTo255(GetRandomReal(60, 80)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 550 || count == 650 || count == 750)
    {
        Effect("Cidsfx1.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, GetRandomReal(3.5, 4.5), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 560 || count == 590 || count == 630 || count == 650 || count == 680 || count == 720 || count == 760)
    {
        Effect("Kianasfx8.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, GetRandomReal(7, 8), 1.5, 255, 255, 255, 255);
    }

    if (count >= 530 && count <= 730)
    {
        if (count % 10 == 0)
        {
            Effect("Kianasfx7.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, GetRandomReal(6, 7), 1, 104, 34, 158, PercentTo255(GetRandomReal(80, 100)));
            Effect("Mystosfx17.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
    }

    if (count == 750)
    {
        SoundStart("CidT-2.mp3");
        SetUnitAnimationByIndex(u, 7);
    }

    if (count == 800)
    {
        visionArea(GetOwningPlayer(u), 1200, 5, GetUnitX(t), GetUnitY(t));
        Effect("Cidsfx15.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 0.75, 6, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 5);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Mystosfx19.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 0.5, 5, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 4);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
    }

    if (count >= 800 && count <= 1000)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.0225);
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.0225);
    }

    if (count == 1000)
    {
        SetUnitFlyHeight(u, 0, 1250);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CidR2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    ability ab = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("CidR2.mp3");
        SoundStart("CidSE2.mp3");
        SoundStart("CidSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
    }

    if (count <= 15)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 15)
    {
        SoundStart("CidSE4.mp3");
        SoundStart("CidSE5.mp3");
        SoundStart("CidSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitTimeScale(u, 2);
        Effect("Cidsfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Cidsfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Cidsfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.55);
        Effect("Cidsfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a - 90, 0, 0, 0.1, 1, 255, 255, 255, 255);
        Effect("Cidsfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a + 90, 0, 0, 0.1, 1, 255, 255, 255, 255);
        Effect("Cidsfx11.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        Effect("Gokusfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, -45, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 45, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        RushSlide(t, a, 400, 0.4, 0.02, true);
        RushSlide(u, a + 180, 150, 1, 0.02, true);
    }

    if (count == 25 || count == 33 || count == 41 || count == 49 || count == 57 || count == 65)
    {
        SoundStart("CidSE7.mp3");
        SetUnitAnimationByIndex(u, 2);
        Effect("Hutaosfx12.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(4, 5), 1, 104, 34, 158, 255);
        Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), -30, 0, GetRandomReal(7, 8), 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), -50, 0, GetRandomReal(7, 8), 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        a2 = randomAngle();
        Effect("Cidsfx20.mdx", GetUnitX(t), GetUnitY(t), 120, a2, 0, 0, 0.9, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Cidsfx22.mdx", GetUnitX(t), GetUnitY(t), 20, a2, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        x = PolarX(GetUnitX(t), -50, a2);
        y = PolarY(GetUnitY(t), -50, a2);
        Effect("Cidsfx21.mdx", x, y, 120, a2, 0, 0, 0.9, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        RushSlide(t, a2, 20, 0.2, 0.02, true);
    }

    if (count == 80)
    {
        x = PolarX(GetUnitX(t), -130, a);
        y = PolarY(GetUnitY(t), -130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 2);
    }

    if (count == 90)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Cidsfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        x = PolarX(GetUnitX(u), -60, a);
        y = PolarY(GetUnitY(u), -60, a);
        Effect("Cidsfx11.mdx", x, y, 200, a, 0, -90, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Cidsfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, -45, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 45, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
    }

    if (count == 95)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A08A')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CidR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 140)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
    }

    if (count == 1)
    {
        SoundStart("CidR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Cidsfx13.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Cidsfx14.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 4, 2.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 1);
        TimeScaleEffect(dummy_effect, 0.6, 1);
        Effect("Cidsfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 3.5, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 2.5);
    }

    if (count == 60)
    {
        Effect("Cidsfx15.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        AnimEffect2(dummy_effect, "death", 1);
    }

    if (count == 1 || count == 25 || count == 50 || count == 75 || count == 100 || count == 125)
    {
        Effect("Mystosfx21.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(1, 2), 1, 255, 255, 255, 255);
        Effect("Cidsfx1.mdx", GetUnitX(u), GetUnitY(u), 10, randomAngle(), 0, 0, GetRandomReal(2, 3), 1.5, 255, 255, 255, 255);
    }

    if (count == 10 || count == 30 || count == 45 || count == 60 || count == 85 || count == 100 || count == 120)
    {
        Effect("Cidsfx17.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(2.5, 3.5), 1, 255, 255, 255, 255);
    }

    if (count == 100)
    {
        Effect("Cidsfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 4, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Cidsfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.3);
        Effect("Cidsfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 120)
    {
        Effect("Cidsfx18.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 0.8, 2, 255, 255, 255, 255);
    }

    if (count == 140)
    {
        Effect("Cidsfx19.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        UnitAddBuffById(u, 'B00L');
        SetBuffRemainingDuration(GetUnitBuff(u, 'B00L'), 15 + 5 * GetUnitAbilityLevel(u, 'A089'));

        DisableAbility(GetUnitAbility(u, 'A086'), true, true);
        UnitAddAbility(u, 'A08C');
        UnitMakeAbilityPermanent(u, true, 'A08C');
        SetUnitAbilityLevel(u, 'A08C', GetUnitAbilityLevel(u, 'A089'));

        DisableAbility(GetUnitAbility(u, 'A089'), true, true);
        UnitAddAbility(u, 'A08A');
        UnitMakeAbilityPermanent(u, true, 'A08A');
        SetUnitAbilityLevel(u, 'A08A', GetUnitAbilityLevel(u, 'A089'));

        UnitAddStat(u, 0, 0, 10);
    }

    if (count > 140 && GetUnitAbilityLevel(u, 'B00L') == 0)
    {
        EnableAbility(GetUnitAbility(u, 'A086'), true, true);
        UnitRemoveAbility(u, 'A08C');
        EnableAbility(GetUnitAbility(u, 'A089'), true, true);
        UnitRemoveAbility(u, 'A08A');

        UnitAddStat(u, 0, 0, -10);

        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CidE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    ability ab = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 105)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("CidE.mp3");
        SoundStart("CidSE2.mp3");
        SoundStart("CidSE3.mp3");
        x = PolarX(GetUnitX(t), -130, a);
        y = PolarY(GetUnitY(t), -130, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 1);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Cidsfx2.mdx", GetUnitX(u), GetUnitY(u), 120, a, 0, 0, 3.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 1 || count == 15 || count == 30 || count == 45 || count == 60 || count == 75 || count == 90)
    {
        Effect("Alicesfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1, 104, 34, 158, 255);
        Effect("Alicesfx20.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(0.8, 1.4), 1, 104, 34, 158, PercentTo255(GetRandomReal(80, 90)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        Effect("Alicesfx30.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(0.9, 1.6), 1, 104, 34, 158, PercentTo255(GetRandomReal(60, 80)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 0.8));
        Effect("Mystosfx21.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(0.75, 1.5), 1, 255, 255, 255, 255);
    }

    if (count == 90)
    {
        SetUnitAnimationByIndex(u, 2);
    }

    if (count == 100)
    {
        SoundStart("CidSE4.mp3");
        SoundStart("CidSE5.mp3");
        SoundStart("CidSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Cidsfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        x = PolarX(GetUnitX(u), -60, a);
        y = PolarY(GetUnitY(u), -60, a);
        Effect("Cidsfx11.mdx", x, y, 200, a, 0, -90, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Cidsfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Gokusfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, -45, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 45, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        RushSlide(t, a, 150, 0.6, 0.02, true);
    }

    if (count == 105)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A087') * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }

    if (count > 200)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 201)
    {
        SoundStart("CidE2.mp3");
        SoundStart("CidSE2.mp3");
        SoundStart("CidSE3.mp3");
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 12);
        SetUnitFacingEx(u, a, true);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count == 210)
    {
        SoundStart("CidE2-1.mp3");
    }

    if (count >= 201 && count <= 220)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 12, a);
            y = PolarY(GetUnitY(u), dist / 12, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 220)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        Effect("Cidsfx1.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 2.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Cidsfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 230 || count == 250 || count == 270 || count == 290)
    {
        Effect("Cidsfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 240)
    {
        Effect("Cidsfx6.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 255)
    {
        Effect("Cidsfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Hydesfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 275)
    {
        Effect("Cidsfx29.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
        Effect("Hydesfx4.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
    }

    if (count == 285)
    {
        SoundStart("ReinforceSE3.mp3");
        Effect("Hydesfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Cidsfx30.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 295)
    {
        Effect("Cidsfx31.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 300)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A087') * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CidW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    ability ab = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 30)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("CidW.mp3");
        SoundStart("CidSE2.mp3");
        SoundStart("CidSE3.mp3");
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 12);
        SetUnitTimeScale(u, 1.2);
        SetUnitFacingEx(u, a, true);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count <= 25)
    {
        x = PolarX(GetUnitX(u), 32, LoadReal(GameHT, hid, 0));
        y = PolarY(GetUnitY(u), 32, LoadReal(GameHT, hid, 0));
        SetUnitXY(u, x, y, 0);
        if (count == 15)
        {
            SetUnitFacing(u, LoadReal(GameHT, hid, 0) + 180);
        }
    }

    if (count == 25)
    {
        SoundStart("CidSE4.mp3");
        SoundStart("CidSE5.mp3");
        SoundStart("CidSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Cidsfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Cidsfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Cidsfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.55);
        Effect("Cidsfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a - 90, 0, 0, 0.1, 1, 255, 255, 255, 255);
        Effect("Cidsfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a + 90, 0, 0, 0.1, 1, 255, 255, 255, 255);
        Effect("Cidsfx11.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        Effect("Gokusfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, -45, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 45, 0, 2, 1.5, 104, 34, 158, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
    }

    if (count == 30)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A087')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 390, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }

    if (count > 100)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 101)
    {
        SoundStart("CidW2.mp3");
        SoundStart("CidSE2.mp3");
        SoundStart("CidSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 12);
        SetUnitTimeScale(u, 1.3);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        RushSlide(u, a + 180, 300, 0.2, 0.02, false);
    }

    if (count >= 112 && count <= 128)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 12, a);
            y = PolarY(GetUnitY(t), 12, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 128)
    {
        SoundStart("CidSE11.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("cronussfx13.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cronussfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Cronussfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 1.5, 102, 0, 204, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        for (int i = 1; i < 7; i++)
        {
            x = PolarX(GetUnitX(t), 100, a);
            y = PolarY(GetUnitY(t), 100, a);
            x = PolarX(x, 20 * i, a + 90);
            y = PolarY(y, 20 * i, a + 90);
            Effect("Cronussfx26.mdx", x, y, 0, a + 180 + 5 * i, 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
            x = PolarX(GetUnitX(t), 100, a);
            y = PolarY(GetUnitY(t), 100, a);
            x = PolarX(x, 20 * i, a - 90);
            y = PolarY(y, 20 * i, a - 90);
            Effect("Cronussfx26.mdx", x, y, 0, a + 180 - 5 * i, 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }
        Effect("Cidsfx1.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 2.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Cidsfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 8, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.2);
        Effect("Cidsfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 7.8, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.1);
        Effect("Cidsfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 7.6, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1);
        Effect("Cidsfx5.mdx", GetUnitX(t), GetUnitY(t), 70, a, 0, 0, 10, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Cidsfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx28.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        RushSlide(t, a, 430, 0.6, 0.02, true);
    }

    if (count == 132)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A087')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CidQ2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;
    ability ab = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("CidQ2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 1);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
        SaveReal(GameHT, hid, 0, 250);
        x = PolarX(GetUnitX(u), 10, a);
        y = PolarY(GetUnitY(u), 10, a);
        MouseWorldX[GetPlayerId(GetOwningPlayer(u))] = x;
        MouseWorldY[GetPlayerId(GetOwningPlayer(u))] = y;
    }

    if (count == 1 || count == 10 || count == 20 || count == 35 || count == 45 || count == 55 || count == 70 || count == 80 || count == 95 || count == 105 || count == 120)
    {
        Effect("Alicesfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1, 104, 34, 158, 255);
        Effect("Alicesfx20.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(0.8, 1.4), 1, 104, 34, 158, PercentTo255(GetRandomReal(80, 90)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        Effect("Alicesfx30.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(0.9, 1.6), 1, 104, 34, 158, PercentTo255(GetRandomReal(60, 80)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 0.8));
        Effect("Mystosfx21.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(0.75, 1.5), 1, 255, 255, 255, 255);
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 10, randomAngle(), 0, 0, GetRandomReal(1, 2), 1, 104, 34, 158, PercentTo255(GetRandomReal(40, 60)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));

        if (count == 120)
        {
            SetUnitAnimationByIndex(u, 12);
            Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Cidsfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.7);
            Effect("Cidsfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count < 125)
    {
        a = Angle(GetUnitX(u), GetUnitY(u), MouseWorldX[GetPlayerId(GetOwningPlayer(u))], MouseWorldY[GetPlayerId(GetOwningPlayer(u))]);
        SetUnitFacing(u, a);
        SaveReal(GameHT, hid, 'angl', GetUnitFacing(u));
    }

    if (count >= 125 && count <= 150)
    {
        x = PolarX(GetUnitX(u), 80, a);
        y = PolarY(GetUnitY(u), 80, a);
        SetUnitXY(u, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 350, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, (2 + GetUnitAbilityLevel(u, 'A08C')) * GetHeroInt(u, true));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 126 || count == 129 || count == 132 || count == 135 || count == 138 || count == 141 || count == 144 || count == 147)
        {
            Effect("Cidsfx23.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2 - (count - 100) * 0.02, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
            Effect("Esdeathsfx6.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 3, 1.5, 104, 34, 158, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
        }

        if (count == 128 || count == 132 || count == 136 || count == 140 || count == 144 || count == 148)
        {
            x = PolarX(GetUnitX(u), LoadReal(GameHT, hid, 0), a + 90);
            y = PolarY(GetUnitY(u), LoadReal(GameHT, hid, 0), a + 90);
            Effect("Cidsfx2.mdx", x, y, 150, a, 0, 0, 2.5, 2.5 - (count - 100) * 0.02, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
            Effect("Esdeathsfx11.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, -30, 6, 1.5, 104, 34, 158, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
            SaveReal(GameHT, hid, 0, -LoadReal(GameHT, hid, 0));
        }

        Effect("Cidsfx3.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 150)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CidQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float a2 = .0f;
    float x2 = .0f;
    float y2 = .0f;
    float x3 = .0f;
    float y3 = .0f;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 5)
    {
        SetPauseUnit(u, true);
    }
    
    if (count == 1)
    {
        SoundStart("CidQ.mp3");
        SoundStart("CidSE1.mp3");
        SoundStart("CidSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 1.7);
        SetUnitFacingEx(u, a, true);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cidsfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Cidsfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 5)
    {
        SetUnitXY(u, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 2, 101, 38, 144, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Cidsfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, PercentTo255(90));
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Cidsfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        x2 = PolarX(GetUnitX(u), -50, a);
        y2 = PolarY(GetUnitY(u), -50, a);
        Effect("Cidsfx4.mdx", x2, y2, 100, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);

        x = GetUnitX(u);
        y = GetUnitY(u);
        x2 = PolarX(x, 350, a + 300);
        y2 = PolarY(y, 350, a + 300);
        x3 = PolarX(x, 350, a + 60);
        y3 = PolarY(y, 350, a + 60);
        a2 = Angle(x2, y2, x3, y3);
        Effect("Cidsfx9.mdx", (x2 + x3) / 2, (y2 + y3) / 2, 10, a2, 0, 0, 0.7, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);

        SaveReal(GameHT, hid, 0, x);
        SaveReal(GameHT, hid, 1, y);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                Effect("Gokusfx1.mdx", GetUnitX(d), GetUnitY(d), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A086'), 1);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
    }

    if (count == 7)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        x2 = PolarX(x, 350, a + 60);
        y2 = PolarY(y, 350, a + 60);
        x3 = PolarX(x, 350, a + 180);
        y3 = PolarY(y, 350, a + 180);
        a2 = Angle(x2, y2, x3, y3);
        Effect("Cidsfx9.mdx", (x2 + x3) / 2, (y2 + y3) / 2, 10, a2, 0, 0, 0.7, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 9)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        x2 = PolarX(x, 350, a + 180);
        y2 = PolarY(y, 350, a + 180);
        x3 = PolarX(x, 350, a + 300);
        y3 = PolarY(y, 350, a + 300);
        a2 = Angle(x2, y2, x3, y3);
        Effect("Cidsfx9.mdx", (x2 + x3) / 2, (y2 + y3) / 2, 10, a2, 0, 0, 0.7, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 11)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        x2 = PolarX(x, 350, a);
        y2 = PolarY(y, 350, a);
        x3 = PolarX(x, 350, a + 120);
        y3 = PolarY(y, 350, a + 120);
        a2 = Angle(x2, y2, x3, y3);
        Effect("Cidsfx9.mdx", (x2 + x3) / 2, (y2 + y3) / 2, 10, a2, 0, 0, 0.7, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 13)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        x2 = PolarX(x, 350, a + 120);
        y2 = PolarY(y, 350, a + 120);
        x3 = PolarX(x, 350, a + 240);
        y3 = PolarY(y, 350, a + 240);
        a2 = Angle(x2, y2, x3, y3);
        Effect("Cidsfx9.mdx", (x2 + x3) / 2, (y2 + y3) / 2, 10, a2, 0, 0, 0.7, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 15)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        x2 = PolarX(x, 350, a + 240);
        y2 = PolarY(y, 350, a + 240);
        x3 = PolarX(x, 350, a);
        y3 = PolarY(y, 350, a);
        a2 = Angle(x2, y2, x3, y3);
        Effect("Cidsfx9.mdx", (x2 + x3) / 2, (y2 + y3) / 2, 10, a2, 0, 0, 0.7, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 15)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 90)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("NatsuD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
    }

    if (count == 40)
    {
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 0.7);
    }

    if (count == 1 || count == 30 || count == 60 || count == 90)
    {
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.6, 0.8), 1, 255, 255, 255, PercentTo255(60));
        Effect("Natsusfx6.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.5, 2), 1, 255, 255, 255, PercentTo255(GetRandomReal(40, 60)));
        Effect("Natsusfx12.mdx", GetUnitX(u), GetUnitY(u), 20, randomAngle(), 0, 0, GetRandomReal(2, 2.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(40, 80)));
        Effect("Natsusfx7.mdx", GetUnitX(u), GetUnitY(u), 40, randomAngle(), 0, 0, 3.5, 1, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1.25));
    }

    if (count >= 40 && count <= 90)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 20, a);
            y = PolarY(GetUnitY(u), dist / 20, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 90)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Natsusfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 0.9, 1, 255, 255, 255, PercentTo255(80));
        Effect("Natsusfx12.mdx", GetUnitX(t), GetUnitY(t), 50, a, -90, 0, 1.4, 1, 255, 255, 255, PercentTo255(20));
        Effect("Natsusfx15.mdx", GetUnitX(t), GetUnitY(t), 30, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx16.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1.5, 255, 255, 255, PercentTo255(60));
        Effect("Natsusfx19.mdx", GetUnitX(t), GetUnitY(t), 50, a, -90, 0, 1.5, 2, 255, 255, 255, PercentTo255(70));
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Natsusfx23.mdx", GetUnitX(u), GetUnitY(u), -50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 95)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 400, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("NatsuF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        Effect("Natsusfx39.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.6, 2, 255, 255, 255, 255);
        Effect("Natsusfx40.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.6, 2, 255, 255, 255, 255);
    }

    if (count == 1 || count == 40 || count == 80 || count == 120 || count == 160)
    {
        Effect("Natsusfx41.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count == 1 || count == 20 || count == 40 || count == 60 || count == 80 || count == 100 || count == 120 || count == 140 || count == 160 || count == 180)
    {
        Effect("Natsusfx42.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx43.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 0.7, 1, 255, 255, 255, PercentTo255(60));
    }

    if (count == 10 || count == 30 || count == 50 || count == 70 || count == 90 || count == 110 || count == 130 || count == 150 || count == 170)
    {
        Effect("Natsusfx42.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 195)
    {
        SoundStart("NatsuF-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 0.8);
    }

    if (count == 195 || count == 200 || count == 205 || count == 210 || count == 215 || count == 220 || count == 225)
    {
        Effect("Fuxuansfx3.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1.5, 1, 255, 255, 255, PercentTo255(GetRandomReal(40, 60)));
        Effect("Natsusfx44.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, PercentTo255(90));
    }

    if (count >= 190 && count <= 230)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 230)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Natsusfx45.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Natsusfx42.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx41.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx46.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Natsusfx47.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1.5, 255, 255, 255, PercentTo255(90));
        RushSlide(t, a, 100, 0.6, 0.02, true);
    }

    if (count == 245)
    {
        SoundStart("NatsuF-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 10, GetUnitX(u), GetUnitY(u));
    }

    if (count == 670)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Natsusfx43.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1.5, 255, 255, 255, PercentTo255(60));
        Effect("Natsusfx42.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx46.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Natsusfx41.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx52.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 3.5, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 710)
    {
        SetUnitAnimationByIndex(u, 11);
    }

    if (count == 720)
    {
        visionArea(GetOwningPlayer(u), 1200, 5, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        Effect("Natsusfx48.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.5, 0, 255, 255, 255, PercentTo255(50));
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count >= 720 && count <= 880)
    {
        x = PolarX(GetUnitX(t), 5, a);
        y = PolarY(GetUnitY(t), 5, a);
        SetUnitXY(t, x, y, 2);
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 5, 0);
        x = PolarX(GetUnitX(t), -110, a);
        y = PolarY(GetUnitY(t), -110, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);

        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetUnitX(u), 20, a);
        y = PolarY(GetUnitY(u), 20, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetUnitFlyHeight(u) + 20);
        
        if (count == 880)
        {
            Effect("Natsusfx41.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, -45, 0, 2.5, 1, 255, 255, 255, 255);
            Effect("Natsusfx42.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, -45, 0, 2, 1.5, 255, 255, 255, 255);
            Effect("Natsusfx47.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, -45, 0, 2, 2, 255, 255, 255, 255);
            DestroyEffectTimed(e, .01f);
        }
    }

    if (count >= 245 && count <= 880)
    {
        if (count % 10 == 0 || count % 20 == 0 || count % 30 == 0 || count % 40 == 0)
        {
            if (count <= 690)
            {
                Effect("Natsusfx42.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
            }

            if (count >= 720)
            {
                Effect("Fuxuansfx3.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, -45, 0, 1.5, 1, 255, 255, 255, PercentTo255(GetRandomReal(20, 60)));
                Effect("Natsusfx42.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 50, a, -45, 0, 2, 1, 255, 255, 255, 255);
                Effect("Natsusfx44.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 50, a + 180, -225, 0, 2, 1, 255, 255, 255, 255);
            }

            if (count % 20 == 0)
            {
                if (count <= 650)
                {
                    if (count <= 395)
                    {
                        Effect("Natsusfx50.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.5, 2), 1, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
                    }
                    else
                    {
                        Effect("Natsusfx50.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(2, 2.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
                        Effect("Natsusfx41.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
                        Effect("Natsusfx51.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 3.5, 1.5, 255, 255, 255, PercentTo255(GetRandomReal(50, 70)));
                    }
                }
            }
        }
    }

    if (count >= 880 && count <= 900)
    {
        if (count == 885 || count == 890 || count == 895)
        {
            Effect("Fuxuansfx3.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), -180, 0, 1.5, 1, 255, 255, 255, PercentTo255(GetRandomReal(20, 60)));
        }

        x = PolarX(GetUnitX(t), 5, a);
        y = PolarY(GetUnitY(t), 5, a);
        SetUnitXY(t, x, y, 2);
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) - 40, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);
    }

    if (count == 900)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Natsusfx47.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx42.mdx", GetUnitX(t), GetUnitY(t), 50, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx46.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Natsusfx41.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 905)
    {
        SetUnitFlyHeight(u, 0, 0);
        SetUnitFlyHeight(t, 0, 0);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuT2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("NatsuT2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 8, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
    }

    if (count == 150)
    {
        SoundStart("NatsuT2-1.mp3");
    }

    if (count == 330)
    {
        SetUnitAnimationByIndex(u, 5);
    }

    if (count == 350)
    {
        SoundStart("NatsuT2-2.mp3");
        SetUnitTimeScale(u, 0);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count >= 350 && count <= 380)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 50, a);
        y = PolarY(GetSpecialEffectY(e), 50, a);
        SetEffectXY(e, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        if (count % 3 == 0)
        {
            Effect("Natsusfx32.mdx", x, y, 0, a, 0, 0, 1.5, 1, 255, 255, 255, PercentTo255(60));
            Effect("Natsusfx30.mdx", x, y, 50, a, 0, 0, 2, 1, 255, 255, 255, PercentTo255(GetRandomReal(60, 70)));
            Effect("Natsusfx31.mdx", x, y, 50, a, 0, 0, 2, 1, 255, 255, 255, PercentTo255(90));
            SetSpecialEffectAnimation(dummy_effect, "death");
            Effect("Natsusfx21.mdx", x, y, 0, a, 0, 0, 2.5, 1, 255, 255, 255, PercentTo255(20));
            Effect("Natsusfx34.mdx", x, y, 20, a, 0, 0, 2, 1, 255, 255, 255, PercentTo255(40));
        }
    }

    if (count <= 370)
    {
        if (count % 5 == 0 || count % 10 == 0 || count % 15 == 0 || count % 20 == 0)
        {
            Effect("Natsusfx29.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(10, 40)));
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.8, 1));
            if (count % 20 == 0)
            {
                SaveInteger(GameHT, hid, 'iter', 0);
                Effect("natsusfx12.mdx", GetUnitX(u), GetUnitY(u), 10, randomAngle(), 0, 0, GetRandomReal(1.5, 2), 1.5, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 0.7));
                Effect("natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.5, 0.7), 1, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 0.7));
                Effect("natsusfx13.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 0.7));
            }
        }
    }

    if (count == 380)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 12 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("NatsuT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
    }

    if (count == 1 || count == 20 || count == 40 || count == 60 || count == 80 || count == 120 || count == 140 || count == 160 || count == 230)
    {
        Effect("Natsusfx6.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.3, 1.5, 255, 255, 255, PercentTo255(40));
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 0.5, 1, 255, 255, 255, PercentTo255(60));
        Effect("Natsusfx11.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.2, 1.5, 255, 255, 255, PercentTo255(40));
        Effect("Natsusfx12.mdx", GetUnitX(u), GetUnitY(u), 30, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, PercentTo255(90));
    }

    if (count == 100)
    {
        Effect("Natsusfx6.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1.5, 255, 255, 255, PercentTo255(40));
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 0.5, 1, 255, 255, 255, PercentTo255(60));
        Effect("Natsusfx11.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1.5, 255, 255, 255, PercentTo255(40));
        Effect("Natsusfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 0.6, 1.5, 255, 255, 255, 255);
    }

    if (count == 170)
    {
        SoundStart("NatsuT-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        DestroyEffectTimed(AddSpecialEffectTarget("Natsusfx7.mdx", u, "hand right"), 13);
        DestroyEffectTimed(AddSpecialEffectTarget("Natsusfx7.mdx", u, "hand left"), 13);
        DestroyEffectTimed(AddSpecialEffectTarget("Natsusfx7.mdx", u, "foot left"), 13);
    }

    if (count == 180)
    {
        Effect("Natsusfx13.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Natsusfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 0.5, 1, 255, 255, 255, PercentTo255(60));
        Effect("Natsusfx11.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1.5, 255, 255, 255, PercentTo255(40));
    }

    if (count == 240)
    {
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 250)
    {
        SoundStart("NatsuT-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count >= 230 && count <= 270)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 5, a);
            y = PolarY(GetUnitY(t), 5, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 270)
    {
        Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 2, 1, 255, 255, 255, 255);
        Effect("Natsusfx15.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 3, 1, 255, 255, 255, 255);
        Effect("Natsusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.2, 1, 255, 255, 255, 255);
        Effect("Natsusfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1, 255, 255, 255, 255);
        Effect("Natsusfx16.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1, 255, 255, 255, 255);
        RushSlide(t, a, 300, 0.6, 0.02, true);
    }

    if (count == 310)
    {
        SetUnitTimeScale(u, 0.85);
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 330)
    {
        x = PolarX(GetUnitX(t), -100, a);
        y = PolarY(GetUnitY(t), -100, a);
        Effect("Natsusfx17.mdx", x, y, 400, a, 0, 0, 2, 1.5, 255, PercentTo255(20), PercentTo255(20), 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 340)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Natsusfx18.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 4, 1, 255, 255, 255, 255);
        Effect("Natsusfx12.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 2, 1, 255, 255, 255, 255);
        Effect("Natsusfx15.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 350, 0.8, 0.02, true);
    }

    if (count == 370)
    {
        SetUnitAnimationByIndex(u, 10);
    }

    if (count >= 300 && count <= 340 || count >= 370 && count <= 410 || count >= 440 && count <= 500 || count >= 520 && count <= 560 || count >= 580 && count <= 620)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            if (count >= 440 && count <= 480)
            {
                x = PolarX(GetUnitX(t), 8, a);
                y = PolarY(GetUnitY(t), 8, a);
                SetUnitXY(t, x, y, 2);
            }
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count >= 370 && count <= 410)
    {
        if (count < 390)
        {
            x = PolarX(GetUnitX(u), 250 - (count - 370) * 6, a - 90);
            y = PolarY(GetUnitY(u), 250 - (count - 370) * 6, a - 90);
            Effect("Natsusfx10.mdx", x, y, 150, a + 55, -125, 0, 1, 1, 255, 255, 255, PercentTo255(70));
            x = PolarX(GetUnitX(u), 250 - (count - 370) * 6, a + 90);
            y = PolarY(GetUnitY(u), 250 - (count - 370) * 6, a + 90);
            Effect("Natsusfx10.mdx", x, y, 150, a - 55, -125, 0, 1, 1, 255, 255, 255, PercentTo255(70));
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 20, 0);
        }
        else
        {
            x = PolarX(GetUnitX(u), 150 - (count - 390) * 6, a - 90);
            y = PolarY(GetUnitY(u), 150 - (count - 390) * 6, a - 90);
            Effect("Natsusfx10.mdx", x, y, 150, a + 55, -35, 0, 1, 1, 255, 255, 255, PercentTo255(70));
            x = PolarX(GetUnitX(u), 150 - (count - 390) * 6, a + 90);
            y = PolarY(GetUnitY(u), 150 - (count - 390) * 6, a + 90);
            Effect("Natsusfx10.mdx", x, y, 150, a - 55, -35, 0, 1, 1, 255, 255, 255, PercentTo255(70));
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 20, 0);
        }
    }

    if (count == 410)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Natsusfx2.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 0.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx6.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx11.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx19.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx12.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx14.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 250, 0.8, 0.02, true);
    }

    if (count == 420)
    {
        SetUnitTimeScale(u, 1.25);
        SetUnitAnimationByIndex(u, 11);
    }

    if (count >= 440 && count <= 500)
    {
        if (count % 8 == 0)
        {
            Effect("Natsusfx20.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1.5, 1, 255, 255, 255, PercentTo255(40));
            Effect("Natsusfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, PercentTo255(40));
        }
    }

    if (count == 480)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Natsusfx12.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Natsusfx22.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Natsusfx11.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 2, 1, 255, 255, 255, 255);
        RushSlide(t, a, 300, 1, 0.02, true);
    }

    if (count == 530)
    {
        SetUnitTimeScale(u, 0.55);
        SetUnitAnimationByIndex(u, 5);
    }

    if (count == 560)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Natsusfx23.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Natsusfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1, 255, 255, 255, 255);
        Effect("Natsusfx22.mdx", GetUnitX(t), GetUnitY(t), 100, a + 180, 0, 0, 2.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx22.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Natsusfx15.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx18.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 4, 1, 255, 255, 255, 255);
        Effect("Natsusfx24.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 200, 0.4, 0.02, true);
    }

    if (count == 580)
    {
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 1);
    }

    if (count == 590)
    {
        SoundStart("NatsuT-3.mp3");
    }

    if (count == 600)
    {
        visionArea(GetOwningPlayer(u), 1200, 5, GetUnitX(t), GetUnitY(t));
        SetUnitTimeScale(u, 0);
        RushSlide(t, a, 250, 4, 0.02, true);
    }

    if (count >= 600 && count <= 790)
    {
        if (count > 750)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) - 7.5, 0);
        }
        else
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 2, 0);
        }
    }

    if (count >= 600 && count <= 790)
    {
        if (count % 5 == 0 || count % 10 == 0 || count % 15 == 0 || count % 20 == 0)
        {
            for (int i = 0; i < 5; i++)
            {
                Effect("Natsusfx25.mdx", GetUnitX(u), GetUnitY(u), GetRandomReal(150, 500), randomAngle(), 0, 0, GetRandomReal(1, 2.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(10, 40)));
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            }

            if (count % 20 == 0)
            {
                SaveInteger(GameHT, hid, 'iter', 0);
                Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.8, 1), 1, 255, 255, 255, PercentTo255(60));
                Effect("Natsusfx12.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, GetRandomReal(2, 3), 1, 255, 255, 255, PercentTo255(90));
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            }
        }
    }

    if (count == 790)
    {
        SetUnitFlyHeight(t, 0, 0);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuR2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float lf = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("NatsuR2.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Natsusfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 40)
    {
        SoundStart("NatsuR2-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 1);
    }

    if (count == 40 || count == 70 || count == 100 || count == 130 || count == 160)
    {
        Effect("Natsusfx6.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1.5, 255, 255, 255, 255);
    }

    if (count >= 40 && count <= 190)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);

        if (count % 5 == 0 || count % 10 == 0 || count % 15 == 0)
        {
            for (int i = 0; i < 5; i++)
            {
                lf = GetRandomReal(0.7, 1.2);
                Effect("Natsusfx10.mdx", GetUnitX(t), GetUnitY(t), 50, a + GetRandomReal(-60, 60), 0, 0, GetRandomReal(1, 1.5), lf, 255, 255, 255, 255);
                NatsuR_2(dummy_effect, lf);
                Effect("Natsusfx30.mdx", GetUnitX(t), GetUnitY(t), 50, a + GetRandomReal(-60, 60), 0, 0, GetRandomReal(1.5, 2), lf, 255, 255, 255, 255);
                NatsuR_2(dummy_effect, lf);
            }

            if (count % 10 == 0) { SoundStart("NatsuSE1.mp3"); }
        }
        if (count % 5 == 0 || count % 15 == 0)
        {
            Effect("Natsusfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, GetRandomReal(0.75, 1), 1, 255, 255, 255, PercentTo255(70));
        }
        if (count % 15 == 0)
        {
            SaveInteger(GameHT, hid, 'iter', 0);
            Effect("Natsusfx2.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(0.5, 0.75), 1, 255, 255, 255, PercentTo255(60));
            Effect("Natsusfx6.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1, 1.25), 1, 255, 255, 255, PercentTo255(90));
        }

        if (count == 180)
        {
            Effect("Natsusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1, 255, 255, 255, PercentTo255(40));
            Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1, 255, 255, 255, PercentTo255(70));
        }
    }

    if (count == 190)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("natsusfx37.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("natsusfx38.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Natsusfx28.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("natsusfx33.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("natsusfx29.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Natsusfx39.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 195)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (7 + GetUnitAbilityLevel(u, 'A07X')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuR_2(effect e, float life)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);

    SaveEffectHandle(GameHT, hid, 'eff', e);
    SaveReal(GameHT, hid, 'life', life);
    TimerStart(tmr, 0.02, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        effect e = LoadEffectHandle(GameHT, hid, 'eff');
        float x = PolarX(GetSpecialEffectX(e), 15, GetSpecialEffectYaw(e));
        float y = PolarY(GetSpecialEffectY(e), 15, GetSpecialEffectYaw(e));
        float life = LoadReal(GameHT, hid, 'life');
        
        life -= .02f;
        SaveReal(GameHT, hid, 'life', life);
        SetEffectXY(e, x, y, 0);
        if (life <= .0f)
        {
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    });
}

void NatsuR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float lf = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 300)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("NatsuR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Natsusfx7.mdx", u, "hand right"), 6);
        DestroyEffectTimed(AddSpecialEffectTarget("Natsusfx7.mdx", u, "hand left"), 6);
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Natsusfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 60 || count == 80 || count == 100 || count == 120)
    {
        Effect("Natsusfx6.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1.5, 255, 255, 255, 255);
    }

    if (count >= 50 && count <= 100)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 120)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 1);
    }

    if (count >= 120 && count <= 300)
    {
        x = PolarX(GetUnitX(t), 5, a);
        y = PolarY(GetUnitY(t), 5, a);
        SetUnitXY(t, x, y, 2);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);

        if (count % 5 == 0 || count % 10 == 0 || count % 15 == 0)
        {
            for (int i = 0; i < 5; i++)
            {
                lf = GetRandomReal(0.6, 1);
                Effect("Natsusfx10.mdx", GetUnitX(t), GetUnitY(t), 50, a + GetRandomReal(-60, 60), 0, 0, GetRandomReal(1, 1.5), lf, 255, 255, 255, 255);
                NatsuR_2(dummy_effect, lf);
            }
        }
        if (count % 10 == 0 || count % 20 == 0)
        {
            Effect("Natsusfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, GetRandomReal(0.75, 1), 1, 255, 255, 255, PercentTo255(70));
        }
        if (count % 20 == 0)
        {
            Effect("Natsusfx2.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(0.5, 0.75), 1, 255, 255, 255, PercentTo255(60));
            Effect("Natsusfx6.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1, 1.25), 1, 255, 255, 255, PercentTo255(90));
        }

        if (count == 300)
        {
            Effect("Natsusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1, 255, 255, 255, PercentTo255(40));
            Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1, 255, 255, 255, PercentTo255(70));
        }
    }

    if (count == 300)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A07T')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 450, 0.6, 0.02, true);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count >= 300 && count <= 330)
    {
        if (count % 3 == 0)
        {
            a = LoadReal(GameHT, hid, 0);
            Effect("Natsusfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 1, 255, 255, 255, PercentTo255(40));
        }
    }

    if (count == 330)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    
    count++;
    SaveInteger(GameHT, hid, 'coun', count);

    if (count == 1)
    {
        SoundStart("NatsuE.mp3");
        if (GetUnitAbilityLevel(u, 'A07Q') > 0)
        {
            DisableAbility(GetUnitAbility(u, 'A07Q'), true, true);
            EnableAbility(GetUnitAbility(u, 'A07V'), true, true);
            SetUnitAbilityLevel(u, 'A07V', GetUnitAbilityLevel(u, 'A07Q'));
            SaveBoolean(GameHT, hid, 'q', true);
        }
        if (GetUnitAbilityLevel(u, 'A07R') > 0)
        {
            DisableAbility(GetUnitAbility(u, 'A07R'), true, true);
            EnableAbility(GetUnitAbility(u, 'A07W'), true, true);
            SetUnitAbilityLevel(u, 'A07W', GetUnitAbilityLevel(u, 'A07R'));
            SaveBoolean(GameHT, hid, 'w', true);
        }
        if (GetUnitAbilityLevel(u, 'A07T') > 0)
        {
            DisableAbility(GetUnitAbility(u, 'A07T'), true, true);
            EnableAbility(GetUnitAbility(u, 'A07X'), true, true);
            SetUnitAbilityLevel(u, 'A07X', GetUnitAbilityLevel(u, 'A07T'));
            SaveBoolean(GameHT, hid, 'r', true);
        }
        if (GetUnitAbilityLevel(u, 'A07U') > 0)
        {
            DisableAbility(GetUnitAbility(u, 'A07U'), true, true);
            EnableAbility(GetUnitAbility(u, 'A07Y'), true, true);
            SaveBoolean(GameHT, hid, 't', true);
        }
        Effect("Natsusfx28.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Natsusfx28.mdx", GetUnitX(u), GetUnitY(u), 0, a + 90, 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Natsusfx29.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Natsusfx11.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx12.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count > 1 && (GetUnitAbilityLevel(u, 'B00J') == 0 || !IsUnitAlive(u)))
    {
        if (LoadBoolean(GameHT, hid, 'q'))
        {
            EnableAbility(GetUnitAbility(u, 'A07Q'), true, true);
            DisableAbility(GetUnitAbility(u, 'A07V'), true, true);
        }
        if (LoadBoolean(GameHT, hid, 'w'))
        {
            EnableAbility(GetUnitAbility(u, 'A07R'), true, true);
            DisableAbility(GetUnitAbility(u, 'A07W'), true, true);
        }
        if (LoadBoolean(GameHT, hid, 'r'))
        {
            EnableAbility(GetUnitAbility(u, 'A07T'), true, true);
            DisableAbility(GetUnitAbility(u, 'A07X'), true, true);
        }
        if (LoadBoolean(GameHT, hid, 't'))
        {
            EnableAbility(GetUnitAbility(u, 'A07U'), true, true);
            DisableAbility(GetUnitAbility(u, 'A07Y'), true, true);
        }
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuW2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 135)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("NatsuW2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
    }

    if (count == 100)
    {
        SoundStart("NatsuW2-1.mp3");
        SetUnitAnimationByIndex(u, 5);
    }

    if (count <= 100)
    {
        if (count % 5 == 0)
        {
            Effect("Natsusfx29.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1, 255, 255, 255, PercentTo255(GetRandomReal(10, 40)));
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            Effect("Natsusfx28.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1, 1.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(10, 40)));
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(1, 2));
        }
    }

    if (count >= 100 && count <= 130)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 130)
    {
        SoundStart("NatsuW2-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Natsusfx22.mdx", GetUnitX(t), GetUnitY(t), 100, a, -180, 0, 2.5, 1.5, 255, 255, 255, PercentTo255(70));
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1.5, 255, 255, 255, PercentTo255(70));
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Natsusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 180, 0, 0, 1, 1.5, 255, 255, 255, PercentTo255(40));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Natsusfx28.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1.5, 255, 255, 255, PercentTo255(40));
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Natsusfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1.5, 255, 255, 255, PercentTo255(20));
        SetSpecialEffectTimeScale(dummy_effect, 1.2);
        Effect("Natsusfx33.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1.5, 255, 255, 255, PercentTo255(90));
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Natsusfx34.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx35.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 135)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A07W')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 400, 0.4, 0.02, true);
    }

    if (count == 157)
    {
        Effect("natsusfx37.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("natsusfx38.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Natsusfx28.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("natsusfx33.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("natsusfx29.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("NatsuW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Natsusfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 30)
    {
        SoundStart("NatsuW-1.mp3");
        Effect("Natsusfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        DestroyEffectTimed(AddSpecialEffectTarget("Natsusfx7.mdx", u, "hand right"), 1);
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 0.9);
    }

    if (count >= 30 && count <= 60)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 60)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.3, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Natsusfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 65)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A07R')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 340, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuQ2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("NatsuQ2.mp3");
        SetUnitAnimationByIndex(u, 9);
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.5, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(u), 10, a);
        y = PolarY(GetUnitY(u), 10, a);
        MouseWorldX[GetPlayerId(GetOwningPlayer(u))] = x;
        MouseWorldY[GetPlayerId(GetOwningPlayer(u))] = y;
    }

    if (count <= 180)
    {
        g1 = CreateGroup();
        GroupEnumUnitsInRect(g1, GetWorldBounds(), nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            CC_SLOW_EFFECT = 0.5f;
            CC_Unit(d, "slow", 0.1f);
        }
        DestroyGroup(g1);

        a = Angle(GetUnitX(u), GetUnitY(u), MouseWorldX[GetPlayerId(GetOwningPlayer(u))], MouseWorldY[GetPlayerId(GetOwningPlayer(u))]);
        SetUnitFacing(u, a);
        SaveReal(GameHT, hid, 'angl', GetUnitFacing(u));

        if (count % 5 == 0)
        {
            Effect("Natsusfx29.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(10, 40)));
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            Effect("Natsusfx29.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(10, 40)));
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            Effect("Natsusfx28.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1.75, 2.5), 1, 255, 255, 255, PercentTo255(GetRandomReal(10, 40)));
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(1, 2));
        }
    }

    if (count == 180)
    {
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count >= 180 && count <= 220)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 60, a);
        y = PolarY(GetSpecialEffectY(e), 60, a);
        SetEffectXY(e, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 350, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A07V') * GetHeroAgi(u, true));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 220) { DestroyGroup(g1); }

        if (count % 2 == 0)
        {
            x = PolarX(x, -50, a);
            y = PolarY(y, -50, a);
            Effect("Natsusfx30.mdx", x, y, 50, a, 0, 0, 2 + (count - 180) * 0.08, 1, 255, 255, 255, PercentTo255(20));
            Effect("Natsusfx4.mdx", x, y, 50, a, -90, 0, 1.5 + (count - 180) * 0.096, 1, 255, 255, 255, PercentTo255(60));
            Effect("Natsusfx5.mdx", x, y, 50, a, -90, 0, 0.45 + (count - 180) * 0.028, 1, 255, 255, 255, PercentTo255(20));
            Effect("Natsusfx31.mdx", x, y, 50, a, 0, 0, 1.2 + (count - 180) * 0.085, 1, 255, 255, 255, PercentTo255(60));
            SetSpecialEffectAnimation(dummy_effect, "death");
            Effect("Natsusfx32.mdx", x, y, 50, a, 0, 0, 1 + (count - 180) * 0.023, 1, 255, 255, 255, PercentTo255(20));
        }
    }

    if (count == 220)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void NatsuQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("NatsuQ.mp3");
        SetUnitAnimationByIndex(u, 9);
        x = PolarX(GetUnitX(u), 50, a);
        y = PolarY(GetUnitY(u), 50, a);
        Effect("Natsusfx1.mdx", x, y, 100, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Natsusfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(u), 50, a);
        y = PolarY(GetUnitY(u), 50, a);
        Effect("Natsusfx3.mdx", x, y, 100, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A07Q'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        x = PolarX(x, -60, a);
        y = PolarY(y, -60, a);
        Effect("Natsusfx4.mdx", x, y, 50, a, -90, 0, 1.6 + 0.083 * count, 1, 255, 255, 255, PercentTo255(60));
        Effect("Natsusfx5.mdx", x, y, 100, a, -90, 0, 0.28 + 0.029 * count, 1, 255, 255, 255, PercentTo255(20));
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HibariD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = .0f;
    float y = .0f;
    effect e = nil;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 20)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
    }

    if (count == 1)
    {
        SoundStart("HibariD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 11);
        Effect("Hibarisfx18.mdx", GetUnitX(u), GetUnitY(u), 50, 90, 0, 0, 2.5, 2, 255, 255, 255, 255);
        Effect("Hibarisfx18.mdx", GetUnitX(u), GetUnitY(u), 50, 0, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SaveReal(GameHT, hid, 'ux', GetUnitX(u));
        SaveReal(GameHT, hid, 'uy', GetUnitY(u));
    }

    if (count == 20)
    {
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
    }

    if (count <= 100)
    {
        x = LoadReal(GameHT, hid, 'ux');
        y = LoadReal(GameHT, hid, 'uy');
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 8 * GetHeroAgi(u, true), 100);
                CC_Unit(d, "stun", 0.1);
            }
        }
        DestroyGroup(g1);

        if (count % 5 == 0)
        {
            Effect("hibarisfx19.mdx", x, y, 0, randomAngle(), 0, 0, GetRandomReal(0.5, 1.25), 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "stand");
            Effect("hibarisfx19.mdx", x, y, 0, randomAngle(), 0, 0, GetRandomReal(1.25, 1.75), 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "stand");
            Effect("hibarisfx19.mdx", x, y, 0, randomAngle(), 0, 0, GetRandomReal(2, 2.75), 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "stand");
            Effect("hibarisfx19.mdx", x, y, 0, randomAngle(), 0, 0, GetRandomReal(2.75, 3.5), 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "stand");
        }
    }

    if (count == 100)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HibariF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HibariF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 2);
        Effect("Hibarisfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Weapons\\SludgeMissile\\SludgeMissile.mdx", u, "hand left"), 4);
        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Weapons\\SludgeMissile\\SludgeMissile.mdx", u, "hand right"), 4);
    }

    if (count <= 140)
    {
        if (count % 5 == 0 || count % 10 == 0)
        {
            a = randomAngle();
            x = PolarX(GetUnitX(t), -200, a);
            y = PolarY(GetUnitY(t), -200, a);
            SetUnitXY(u, x, y, 0);
            a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
            SetUnitFacingEx(u, a, true);
            SetUnitAnimationByIndex(u, GetRandomInt(2, 3));
            Effect("Hibarisfx12.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 51, 255, 255);
            if (count % 10 == 0)
            {
                a = randomAngle();
                x = PolarX(GetUnitX(t), GetRandomReal(100, 200), a);
                y = PolarY(GetUnitY(t), GetRandomReal(100, 200), a);
                Effect("Hibarisfx13.mdx", x, y, 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
                Effect("Hibarisfx14.mdx", x, y, 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
            }
        }
    }

    if (count == 150)
    {
        SetUnitAnimationByIndex(u, 1);
    }

    if (count == 160)
    {
        SetUnitAnimationByIndex(u, 3);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hibarisfx15.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Hibarisfx16.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Hibarisfx13.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Hibarisfx17.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 165)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HibariT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HibariT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 4);
        Effect("Alphasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ogitasfx20.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count <= 25)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 25)
    {
        SetUnitAnimationByIndex(u, 2);
        Effect("Hibarisfx1.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2.5, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count >= 25 && count <= 50)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), 25, a);
        y = PolarY(GetUnitY(t), 25, a);
        SetUnitXY(t, x, y, 2);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.2);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) + 4);
    }

    if (count == 50 || count == 60 || count == 70 || count == 80)
    {
        Effect("Hibarisfx5.mdx", GetUnitX(t), GetUnitY(t), 10, randomAngle(), 0, 0, GetRandomReal(1, 2), 1, 255, 255, 255, 255);
        Effect("Hibarisfx4.mdx", GetUnitX(t), GetUnitY(t), 40, randomAngle(), 0, 0, GetRandomReal(5, 7), 1, 255, 255, 255, 255);
    }

    if (count == 80)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        for (int i = 0; i < 5; i++)
        {
            Effect("Hibarisfx1.mdx", GetUnitX(t), GetUnitY(t), 50, i * 72, 0, 0, 5, 1.5, 255, 255, 255, 255);
            SaveEffectHandle(GameHT, hid, i + 1, dummy_effect);
        }
    }

    if (count >= 80 && count <= 110)
    {
        for (int i = 1; i < 6; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            x = PolarX(GetSpecialEffectX(e), 40, GetSpecialEffectYaw(e));
            y = PolarY(GetSpecialEffectY(e), 40, GetSpecialEffectYaw(e));
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectHeight(e, 50);
            SetSpecialEffectYaw(e, GetSpecialEffectYaw(e) + 8);
            if (count % 3 == 0)
            {
                Effect("Abilities\\Spells\\Human\\ThunderClap\\ThunderClapCaster.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 1, 1, 255, 255, 255, 255);
            }
        }
    }

    if (count >= 110 && count <= 140)
    {
        for (int i = 1; i < 6; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            a = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
            x = PolarX(GetSpecialEffectX(e), 40, a);
            y = PolarY(GetSpecialEffectY(e), 40, a);
            SetEffectXY(e, x, y, 0);
            if (count > 125)
            {
                SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - 40);
            }
            else
            {
                SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) + 40);
            }
        }
    }

    if (count == 140)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hibarisfx2.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Hibarisfx3.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 3, 1.5, 255, 255, 255, 255);
        Effect("Hibarisfx10.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Hibarisfx4.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 7, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 145)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HibariR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 50)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1 && RectContainsCoords(area_boss, GetUnitX(u), GetUnitY(u)))
    {
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
        return;
    }

    if (count == 1)
    {
        SoundStart("HibariR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        GroupAddUnit(HibariR_Group, u);
        GroupAddUnit(HibariR_Group, t);
        SetUnitAnimationByIndex(u, 8);
        Effect("Hibarisfx11.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 0, 255, 255, 255, PercentTo255(30));
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveReal(GameHT, hid, 0, dist / 2);
    }

    if (count <= 50)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        dist = LoadReal(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), dist / 50, a);
        y = PolarY(GetSpecialEffectY(e), dist / 50, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.35);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) + 3);
    }

    if (count == 50)
    {
        SoundStart("HibariR-1.mp3");
        CreateFogModifierRectBJ(true, GetOwningPlayer(u), FOG_OF_WAR_VISIBLE, HibariArea);
        SaveFogModifierHandle(GameHT, hid, 'fogu', bj_lastCreatedFogModifier);
        CreateFogModifierRectBJ(true, GetOwningPlayer(t), FOG_OF_WAR_VISIBLE, HibariArea);
        SaveFogModifierHandle(GameHT, hid, 'fogt', bj_lastCreatedFogModifier);
        SaveReal(GameHT, hid, 'ux', GetUnitX(u));
        SaveReal(GameHT, hid, 'uy', GetUnitY(u));
        SaveReal(GameHT, hid, 'tx', GetUnitX(t));
        SaveReal(GameHT, hid, 'ty', GetUnitY(t));
        x = GetRandomReal(GetRectMinX(HibariArea), GetRectMaxX(HibariArea));
        y = GetRandomReal(GetRectMinY(HibariArea), GetRectMaxY(HibariArea));
        SetUnitXY(u, x, y, 2);
        PanCameraToTimedForPlayer(GetOwningPlayer(u), GetUnitX(u), GetUnitY(u), .0f);
        x = GetRandomReal(GetRectMinX(HibariArea), GetRectMaxX(HibariArea));
        y = GetRandomReal(GetRectMinY(HibariArea), GetRectMaxY(HibariArea));
        SetUnitXY(t, x, y, 2);
        PanCameraToTimedForPlayer(GetOwningPlayer(t), GetUnitX(t), GetUnitY(t), .0f);
        CC_Unit(u, "silence", 999);
        CC_Unit(t, "silence", 999);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
    }

    if (count > 50)
    {
        if (RectContainsCoords(area_boss, GetUnitX(u), GetUnitY(u)) || RectContainsCoords(area_boss, GetUnitX(t), GetUnitY(t)))
        {
            e = LoadEffectHandle(GameHT, hid, 0);
            DestroyEffectTimed(e, .01f);
            DestroyFogModifier(LoadFogModifierHandle(GameHT, hid, 'fogu'));
            DestroyFogModifier(LoadFogModifierHandle(GameHT, hid, 'fogt'));
            GroupClear(HibariR_Group);

            UnitRemoveAbility(u, 'B002');
            UnitRemoveAbility(t, 'B002');
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
            return;
        }

        if (IsUnitInGroup(u, TOUR_GROUP) && !RectContainsCoords(HibariArea, GetUnitX(u), GetUnitY(u)) && !HaveSavedBoolean(GameHT, hid, 'bu'))
        {
            SaveReal(GameHT, hid, 'ux', GetUnitX(u));
            SaveReal(GameHT, hid, 'uy', GetUnitY(u));
            SaveBoolean(GameHT, hid, 'bu', true);
        }
        
        if (IsUnitInGroup(t, TOUR_GROUP) && !RectContainsCoords(HibariArea, GetUnitX(t), GetUnitY(t)) && !HaveSavedBoolean(GameHT, hid, 'tu'))
        {
            SaveReal(GameHT, hid, 'tx', GetUnitX(t));
            SaveReal(GameHT, hid, 'tx', GetUnitY(t));
            SaveBoolean(GameHT, hid, 'tu', true);
        }

        x = GetUnitX(u);
        y = GetUnitY(u);
        if (x < GetRectMinX(HibariArea)) { x = GetRectMinX(HibariArea) + 64; }
        if (x > GetRectMaxX(HibariArea)) { x = GetRectMaxX(HibariArea) - 64; }
        if (y < GetRectMinY(HibariArea)) { y = GetRectMinY(HibariArea) + 64; }
        if (y > GetRectMaxY(HibariArea)) { y = GetRectMaxY(HibariArea) - 64; }
        if (!RectContainsCoords(HibariArea, x, y) && IsUnitAlive(u))
        {
            SetUnitXY(u, x, y, 2);
            PanCameraToTimedForPlayer(GetOwningPlayer(u), GetUnitX(u), GetUnitY(u), .0f);
        }

        x = GetUnitX(t);
        y = GetUnitY(t);
        if (x < GetRectMinX(HibariArea)) { x = GetRectMinX(HibariArea) + 64; }
        if (x > GetRectMaxX(HibariArea)) { x = GetRectMaxX(HibariArea) - 64; }
        if (y < GetRectMinY(HibariArea)) { y = GetRectMinY(HibariArea) + 64; }
        if (y > GetRectMaxY(HibariArea)) { y = GetRectMaxY(HibariArea) - 64; }
        if (!RectContainsCoords(HibariArea, x, y) && IsUnitAlive(t))
        {
            SetUnitXY(t, x, y, 2);
            PanCameraToTimedForPlayer(GetOwningPlayer(u), GetUnitX(t), GetUnitY(t), .0f);
        }

        if (GetUnitCurrentLife(u) > GetUnitMaxLife(u) * 0.1)
        {
            SetUnitCurrentLife(u, GetUnitCurrentLife(u) - 2);
        }

        if (GetUnitCurrentLife(t) > GetUnitMaxLife(t) * 0.1)
        {
            SetUnitCurrentLife(t, GetUnitCurrentLife(t) - 2);
        }

        if (!IsUnitAlive(u))
        {
            e = LoadEffectHandle(GameHT, hid, 0);
            DestroyEffectTimed(e, .01f);
            DestroyFogModifier(LoadFogModifierHandle(GameHT, hid, 'fogu'));
            DestroyFogModifier(LoadFogModifierHandle(GameHT, hid, 'fogt'));
            x = LoadReal(GameHT, hid, 'tx');
            y = LoadReal(GameHT, hid, 'ty');
            SetUnitXY(t, x, y, 0);
            PanCameraToTimedForPlayer(GetOwningPlayer(u), GetUnitX(t), GetUnitY(t), .0f);
            GroupClear(HibariR_Group);

            UnitRemoveAbility(u, 'B002');
            UnitRemoveAbility(t, 'B002');
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }

        if (!IsUnitAlive(t))
        {
            e = LoadEffectHandle(GameHT, hid, 0);
            DestroyEffectTimed(e, .01f);
            DestroyFogModifier(LoadFogModifierHandle(GameHT, hid, 'fogu'));
            DestroyFogModifier(LoadFogModifierHandle(GameHT, hid, 'fogt'));
            x = LoadReal(GameHT, hid, 'ux');
            y = LoadReal(GameHT, hid, 'uy');
            SetUnitXY(u, x, y, 0);
            PanCameraToTimedForPlayer(GetOwningPlayer(u), GetUnitX(u), GetUnitY(u), .0f);
            GroupClear(HibariR_Group);

            UnitRemoveAbility(u, 'B002');
            UnitRemoveAbility(t, 'B002');
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void HibariE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    int iterator = LoadInteger(GameHT, hid, 'iter');
    
    count++;
    SaveInteger(GameHT, hid, 'coun', count);

    if (count == 1)
    {
        SoundStart("HibariE.mp3");
        DisableAbility(GetUnitAbility(u, 'A07K'), true, true);
        UnitAddAbility(u, 'A07L');
        UnitMakeAbilityPermanent(u, true, 'A07L');
        Effect("Hibarisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Hibarisfx9.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, 255);
        Effect("Hibarisfx10.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count > 1 && (GetUnitAbilityLevel(u, 'B00I') == 0 || !IsUnitAlive(u)))
    {
        EnableAbility(GetUnitAbility(u, 'A07K'), true, true);
        UnitRemoveAbility(u, 'A07L');
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HibariW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HibariW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 4);
        Effect("Alphasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ogitasfx20.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count <= 25)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 25)
    {
        SetUnitAnimationByIndex(u, 2);
        Effect("vegetasfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Hibarisfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count == 40)
    {
        SetUnitAnimationByIndex(u, 8);
        Effect("Hibarisfx1.mdx", GetUnitX(t), GetUnitY(t), 700, a, 0, 0, 5, 0.7, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count >= 40 && count <= 65)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - 24);
    }

    if (count == 60)
    {
        Effect("Hibarisfx5.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 65)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Mokuosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 30, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 70)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A07J')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HibariQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("HibariQ.mp3");
        SoundStart("AlphaSE3.mp3");
        SetUnitAnimationByIndex(u, 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "right hand"), 1);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1400, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A07I'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        if (count % 2 == 0)
        {
            Effect("Alphasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Alphasfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Alphasfx4.mdx", GetUnitX(u), GetUnitY(u), 30, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }

    if (count == 101)
    {
        SoundStart("HibariQ-1.mp3");
        SetUnitAnimationByIndex(u, 2);
        Effect("Hibarisfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3, 0.4, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Hibarisfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a + 20, 0, 0, 3, 0.4, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        Effect("Hibarisfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a - 20, 0, 0, 3, 0.4, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count >= 100 && count <= 112)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        for (int i = 0; i < 3; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            x = PolarX(GetSpecialEffectX(e), 1600/12, GetSpecialEffectYaw(e));
            y = PolarY(GetSpecialEffectY(e), 1600/12, GetSpecialEffectYaw(e));
            SetEffectXY(e, x, y, 1);
            SetSpecialEffectHeight(e, 100);
            if (i == 0)
            {
                visionArea(GetOwningPlayer(u), 1200, 3, x, y);
            }
            
            GroupEnumUnitsInRange(g2, x, y, 250, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A07I'));
                    GroupAddUnit(g1, d);
                }
            }

            if (count % 2 == 0)
            {
                Effect("Hibarisfx2.mdx", x, y, 110, a, -90, 0, 1, 1, 255, 255, 255, 255);
                Effect("Alphasfx5.mdx", x, y, 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
            }

            if (count == 112)
            {
                Effect("Hibarisfx3.mdx", x, y, 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            }
        }
        DestroyGroup(g2);
        if (count == 112) { DestroyGroup(g1); }
    }

    if (count == 112)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void OkitaD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("OkitaD.mp3");
        x = PolarX(GetUnitX(t), -140, a);
        y = PolarY(GetUnitY(t), -140, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        Effect("Ogitasfx22.mdx", GetUnitX(u), GetUnitY(u), 200, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
    }

    if (count == 10 || count == 30 || count == 50 || count == 70)
    {
        Effect("Ogitasfx23.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ogitasfx24.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 60)
    {
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 0.8);
    }

    if (count == 65)
    {
        Effect("Ogitasfx25.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 7, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Ogitasfx25.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 6.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Ogitasfx25.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
    }

    if (count == 90)
    {
        SoundStart("OkitaSE9.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ogitasfx26.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Ogitasfx27.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Ogitasfx28.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Ogitasfx29.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 95)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void OkitaF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("OgitaF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ogitasfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -900, a);
        y = PolarY(GetUnitY(t), -900, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 14);
        SetUnitTimeScale(u, 0.85);
        Effect("Ogitasfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 20 || count == 50)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ogitasfx17.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 5, 2, 0, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 10 || count == 25 || count == 40 || count == 55)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ogitasfx18.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 0, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Ogitasfx19.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1.5, 1.5, 0, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);;
    }

    if (count == 10 || count == 30)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ogitasfx20.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count <= 70)
    {
        x = PolarX(GetUnitX(u), 8, a);
        y = PolarY(GetUnitY(u), 8, a);
        SetUnitXY(u, x, y, 0);

        if (count % 5 == 0)
        {
            Effect("Ogitasfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Ogitasfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 70)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitVertexColor(u, 255, 255, 255, 0);
        Effect("Ogitasfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 90)
    {
        SoundStart("OgitaF-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -140, a);
        y = PolarY(GetUnitY(t), -140, a);
        SetUnitXY(u, x, y, 0);
        SetUnitVertexColor(u, 255, 255, 255, 255);
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 1);
        Effect("Ogitasfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1.5, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 100)
    {
        SoundStart("OgitaF-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count == 120)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 8);
        Effect("Ogitasfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Ogitasfx7.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ogitasfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Ogitasfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, -45, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Ogitasfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a + 90, 45, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Ogitasfx10.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Ogitasfx11.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 130)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        for (int i = 1; i < 8; i++)
        {
            a = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(50, 250), a);
            y = PolarY(GetUnitY(t), GetRandomReal(50, 250), a);
            Effect("Ogitasfx9.mdx", x, y, 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }
    }

    if (count == 135)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void OkitaT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("OgitaT.mp3");
        SoundStart("OgitaSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        Effect("Ogitasfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -500, a);
        y = PolarY(GetUnitY(t), -500, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 0.9);
        Effect("Ogitasfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 5)
    {
        SoundStart("OgitaSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ogitasfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ogitasfx3.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count >= 10 && count <= 30)
    {
        x = PolarX(GetUnitX(u), 30, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 30, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);

        if (count % 3 == 0)
        {
            Effect("Ogitasfx6.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 30)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitFacing(u, a);
        SetUnitAnimationByIndex(u, 3);
    }

    if (count == 35)
    {
        SoundStart("OgitaSE3.mp3");
        Effect("Ogitasfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a + 40, 0, 0, 1, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ogitasfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        RushSlide(t, a, 300, 0.2, 0.02, true);
        SetUnitFlyHeight(t, 400, 2000);
    }

    if (count == 40)
    {
        SoundStart("OgitaT-1.mp3");
    }

    if (count == 45)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, 400, 0);
        SetUnitTimeScale(u, 2);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SaveReal(GameHT, hid, 0, GetUnitX(t));
        SaveReal(GameHT, hid, 1, GetUnitY(t));
    }

    if (count == 50 || count == 65 || count == 75 || count == 90)
    {
        SoundStart("OgitaSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count >= 45 && count <= 95)
    {
        if (count % 5 == 0)
        {
            x = LoadReal(GameHT, hid, 0);
            y = LoadReal(GameHT, hid, 1);
            a = randomAngle();
            x = PolarX(x, GetRandomReal(100, 500), a);
            y = PolarY(y, GetRandomReal(100, 500), a);
            SetUnitXY(t, x, y, 1);
            a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
            SetUnitFacingEx(u, a, true);
            SetUnitAnimation(u, "attack");
            Effect("Ogitasfx14.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a + 90, -45, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Ogitasfx14.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a + 90, 45, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Ogitasfx15.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), -35, 0, 1, 1, 0, 255, 255, 255);
        }
    }

    if (count == 95)
    {
        SoundStart("OgitaSE7.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count == 100)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        SetUnitXY(t, x, y, 0);
        SetUnitFlyHeight(t, 700, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, 700, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 16);
        SetUnitTimeScale(u, 1.2);
        SetUnitFlyHeight(u, 0, 1750);
        SetUnitFlyHeight(t, 0, 1750);
    }

    if (count == 120)
    {
        SoundStart("OgitaSE8.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ogitasfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Ogitasfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 125)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void OkitaR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("OgitaR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitVertexColor(u, 255, 255, 255, 0);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 20)
    {
        Effect("Arthursfx11.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ogitasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        for (int i = 1; i < 9; i++)
        {
            x = PolarX(GetUnitX(u), 400, i * 45);
            y = PolarY(GetUnitY(u), 400, i * 45);
            Effect("Ogitasfx13.mdx", x, y, 30, i * 45, 0, 0, 1, 1, 0, 255, 255, 255);
            Effect("Ogitasoji.mdx", x, y, 0, i * 45, 0, 0, 0.95, 1, 255, 255, 255, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, GetRandomInt(11, 13));
            AnimEffect(dummy_effect, GetRandomInt(11, 13), 0.6);
        }

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
    }

    if (count == 25 || count == 50)
    {
        SoundStart("OgitaSE5.mp3");
    }

    if (count >= 20 && count < 55)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+'); 
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, true);
            SetInvulUnit(d, true);
        }
    }

    if (count == 55)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, false);
            SetInvulUnit(d, false);
        }
        DestroyGroup(g1);

        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, (9 + GetUnitAbilityLevel(u, 'A05L')) * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g2);

        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitVertexColor(u, 255, 255, 255, 255);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void OkitaE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("OgitaE.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        Effect("Ogitasfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SetUnitXY(u, x, y, 1);
        SetUnitFlyHeight(u, 900, 0);
        SetUnitFlyHeight(u, 0, 3000);
        SetUnitAnimationByIndex(u, 16);
        SetUnitTimeScale(u, 1.4);
    }

    if (count == 15)
    {
        SoundStart("OgitaSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ogitasfx9.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Ogitasfx7.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ogitasfx8.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Ogitasfx8.mdx", GetUnitX(u), GetUnitY(u), 100, a + 90, -45, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Ogitasfx8.mdx", GetUnitX(u), GetUnitY(u), 100, a + 90, 45, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Ogitasfx10.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Ogitasfx11.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 500, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A05K') * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void OkitaW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("OgitaSE2.mp3");
        SoundStart("OgitaW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ogitasfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ogitasfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 400, a);
        y = PolarY(GetUnitY(t), 400, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 0);
    }

    if (count == 5)
    {
        SetUnitAnimationByIndex(u, 14);
    }

    if (count >= 5 && count <= 25)
    {
        x = PolarX(GetUnitX(u), 40, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 40, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);

        if (count % 3 == 0)
        {
            Effect("Ogitasfx6.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 25)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 11);
        SetUnitTimeScale(u, 1.2);
        SetUnitFacingEx(u, a, true);
        Effect("Ogitasfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ogitasfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Ogitasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 35)
    {
        SoundStart("OgitaSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -130, a);
        y = PolarY(GetUnitY(t), -130, a);
        SetUnitXY(u, x, y, 0);
        Effect("Ogitasfx4.mdx", GetUnitX(t), GetUnitY(t), 150, a - 90, -45, 0, 2, 1.5, 51, 153, 255, 255);
        Effect("Ogitasfx4.mdx", GetUnitX(t), GetUnitY(t), 150, a - 90, 45, 0, 2, 1.5, 51, 153, 255, 255);
        Effect("Ogitasfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Ogitasfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ogitasfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a + 90, -45, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ogitasfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a + 90, 45, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 40)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A05J')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void OkitaQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("OgitaQ.mp3");
        SetUnitAnimationByIndex(u, 12);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 5)
    {
        SoundStart("OgitaSE1.mp3");
    }

    if (count == 2 || count == 5 || count == 8 || count == 11)
    {
        Effect("Ogitasfx2.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1400, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A05I'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        if (count % 2 == 0)
        {
            Effect("Ogitasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Ogitasfx3.mdx", GetUnitX(u), GetUnitY(u), 40, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void VegetaD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("vegetasfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(8, 9));
    }

    if (count == 5)
    {
        SoundStart("VegetaSE1.mp3");
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 1, 255, 255, 255, 255);
        RushSlide(t, a, 600, 2, 0.02, true);
    }

    if (count == 20)
    {
        SoundStart("VegetaD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 21);
        SetUnitTimeScale(u, 1);
    }

    if (count >= 20 && count <= 70)
    {
        if (count % 5 == 0)
        {
            Effect("vegetasfx12.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.8, 1));
        }
    }

    if (count == 70)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("vegetasfx15.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Abilities\\Spells\\Orc\\Purge\\PurgeBuffTarget.mdx", GetUnitX(u), GetUnitY(u), 150, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("vegetasfx21.mdx", GetUnitX(u), GetUnitY(u), 150, a, 0, 0, 3, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
    }

    if (count >= 70 && count <= 90)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), dist / 20, a);
        y = PolarY(GetSpecialEffectY(e), dist / 20, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 150);
        e = LoadEffectHandle(GameHT, hid, 1);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 150);
    }

    if (count == 90)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(dummy_effect, "death");
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("vegetasfx13.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 100)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void VegetaF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("VegetaF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("vegetasfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 6);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
    }

    if (count == 5)
    {
        SoundStart("VegetaSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.3, 0.02, true);
    }

    if (count == 20)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 15);
    }

    if (count == 25)
    {
        SoundStart("VegetaSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, -45, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.3, 0.02, true);
        SetUnitFlyHeight(t, 400, 1333);
    }

    if (count == 40)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, 400, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 15);
    }

    if (count == 45)
    {
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.3, 0.02, true);
    }

    if (count == 60)
    {
        SoundStart("VegetaF-1.mp3");
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, 600, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 1.5);
    }

    if (count == 70)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Vegetasfx15.mdx", GetUnitX(u), GetUnitY(u), 600, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Vegetasfx20.mdx", GetUnitX(u), GetUnitY(u), 600, a, -45, 0, 1, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.3, 0.02, true);
        SetUnitFlyHeight(t, 0, 1333);
    }

    if (count == 80)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count == 87)
    {
        SoundStart("VegetaSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("vegetasfx18.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 0.6, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
    }

    if (count == 90)
    {
        SetUnitFlyHeight(u, 0, 1500);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void VegetaT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("VegetaT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("vegetasfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(8, 9));
    }

    if (count == 5)
    {
        SoundStart("VegetaSE1.mp3");
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 1, 255, 255, 255, 255);
        RushSlide(t, a, 300, 4, 0.02, true);
    }

    if (count >= 10 && count <= 230)
    {
        if (count % 10 == 0)
        {
            Effect("vegetasfx14.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(1.5, 2.5), 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("vegetasfx19.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.5, 2.5), 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 180)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 17);
        SetUnitTimeScale(u, 0.75);
    }

    if (count == 200)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("vegetasfx15.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 230)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("vegetasfx18.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        for (int i = 1; i < 9; i++)
        {
            Effect("vegetasfx16.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        }
    }

    if (count == 250)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void VegetaR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("VegetaR.mp3");
        Effect("vegetasfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(8, 9));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
    }

    if (count == 5)
    {
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.4, 0.02, true);
    }

    if (count == 25)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(8, 9));
    }

    if (count == 30)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, -45, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.4, 0.02, true);
        SetUnitFlyHeight(t, 400, 1000);
    }

    if (count == 50)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, 400, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(8, 9)); 
    }

    if (count == 55)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 420, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx4.mdx", GetUnitX(t), GetUnitY(t), 430, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 420, a, 0, 0, 3, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.4, 0.02, true);
    }

    if (count == 75)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(8, 9)); 
    }

    if (count == 80)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 420, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx4.mdx", GetUnitX(t), GetUnitY(t), 430, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 420, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, PercentTo255(80));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        RushSlide(t, a, 300, 2, 0.02, true);
    }

    if (count >= 80 && count <= 180)
    {
        if (count % 10 == 0)
        {
            Effect("vegetasfx14.mdx", GetUnitX(u), GetUnitY(u), 410, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        }
    }

    if (count == 150)
    {
        SetUnitAnimationByIndex(u, 5);
    }

    if (count == 180)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitTimeScale(u, 0);
        Effect("Vegetasfx15.mdx", GetUnitX(u), GetUnitY(u), 400, a, 0, 0, 0.8, 2, 255, 255, 255, 255);
    }

    if (count == 190)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("vegetasfx16.mdx", GetUnitX(u), GetUnitY(u), 400, a + 205, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("vegetasfx16.mdx", GetUnitX(u), GetUnitY(u), 400, a + 180, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("vegetasfx16.mdx", GetUnitX(u), GetUnitY(u), 400, a + 155, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("vegetasfx17.mdx", GetUnitX(u), GetUnitY(u), 400, a + 205, 0, 0, 10, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("vegetasfx17.mdx", GetUnitX(u), GetUnitY(u), 400, a + 180, 0, 0, 10, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("vegetasfx17.mdx", GetUnitX(u), GetUnitY(u), 400, a + 155, 0, 0, 10, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        RushSlide(t, a, 200, 0.2, 0.02, true);
        SetUnitFlyHeight(t, 0, 2000);
    }

    if (count == 202)
    {
        Effect("vegetasfx18.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetUnitFlyHeight(u, 0, 1000);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A057')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void VegetaW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("VegetaSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Vegetasfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 15);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
    }

    if (count == 5)
    {
        Effect("vegetasfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, -45, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.4, 0.02, true);
    }

    if (count >= 5 && count <= 25)
    {
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 20, 0);
    }

    if (count == 25)
    {
        SoundStart("VegetaW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);
        SetUnitTimeScale(u, 1.5);
        Effect("Vegetasfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Hutaosfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SaveReal(GameHT, hid, 0, GetUnitX(t));
        SaveReal(GameHT, hid, 1, GetUnitY(t));
    }

    if (count == 25 || count == 35 || count == 45 || count == 55)
    {
        SoundStart("VegetaSE2.mp3");
    }

    if (count >= 25 && count <= 60)
    {
        if (count % 7 == 0 || count == 25)
        {
            x = LoadReal(GameHT, hid, 0);
            y = LoadReal(GameHT, hid, 1);
            a2 = randomAngle();
            x2 = PolarX(x, GetRandomReal(100, 350), a2);
            y2 = PolarY(y, GetRandomReal(100, 350), a2);
            SetUnitXY(t, x2, y2, 0);
            a2 = randomAngle();
            x2 = PolarX(GetUnitX(t), -120, a2);
            y2 = PolarY(GetUnitY(t), -120, a2);
            SetUnitXY(u, x2, y2, 0);
            a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
            SetUnitFacingEx(u, a, true);
            SetUnitAnimationByIndex(u, GetRandomInt(9, 10));
            if (GetRandomInt(1, 2) == 1)
            {
                Effect("vegetasfx22.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
            }
            else
            {
                Effect("vegetasfx22.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), -40, 0, 1.5, 1, 255, 255, 255, 255);
            }
            Effect("Vegetasfx9.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
            Effect("Vegetasfx10.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Vegetasfx11.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 4, 1.5, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
        }
    }

    if (count == 70)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        SetUnitXY(t, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 0.9);
    }

    if (count == 70 || count == 75 || count == 80)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("vegetasfx12.mdx", u, "right hand"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("vegetasfx12.mdx", u, "left hand"), 1);
    }

    if (count == 80)
    {
        SoundStart("VegetaW-1.mp3");
        SoundStart("VegetaSE1.mp3");
        SetUnitFlyHeight(u, 0, 1333);
        SetUnitFlyHeight(t, 0, 1333);
    }

    if (count == 95)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("vegetasfx13.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 100)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A055')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void VegetaQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("VegetaQ.mp3");
        SetUnitAnimationByIndex(u, 6);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 1 || count == 3 || count == 5 || count == 7 || count == 9)
    {
        Effect("vegetasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("vegetasfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1400, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A054'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        if (count % 2 == 0)
        {
            x = PolarX(GetUnitX(u), 40, a + 90);
            y = PolarY(GetUnitY(u), 40, a + 90);
            Effect("vegetasfx3.mdx", x, y, 0, a - 90, 0, 0, 1, 1, 255, 255, 255, 255);
            x = PolarX(GetUnitX(u), 40, a - 90);
            y = PolarY(GetUnitY(u), 40, a - 90);
            Effect("vegetasfx3.mdx", x, y, 0, a + 90, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("vegetasfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            Effect("vegetasfx5.mdx", GetUnitX(u), GetUnitY(u), 40, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GokuD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("GokuD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 18);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "right hand"), 1);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
    }

    if (count <= 20)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 10)
    {
        SetUnitAnimationByIndex(u, 38);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "left hand"), 1);
    }

    if (count == 20)
    {
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), -40, 0, 6, 1, 255, 255, 255, 255);
        Effect("Mokuosfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 80, a, 0, 0, 6, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(t), GetUnitY(t), 60, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 600, 0.4, 0.02, true);
    }

    if (count >= 20 && count <= 40)
    {
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 30, 0);
    }

    if (count == 40)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 1.4);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "right hand"), 1);
    }

    if (count == 60)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 1.2);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "left hand"), 1);
    }

    if (count == 80)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 1.3);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "right hand"), 1);
    }

    if (count == 45 || count == 65 || count == 85)
    {
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 30, randomAngle(), GetRandomReal(-40, -30), 0, 2, 1, 255, 255, 255, 255);
        if (count != 85)
        {
            RushSlide(t, a, 250, 0.2, 0.02, true);
        }
        else
        {
            RushSlide(t, a, 300, 0.4, 0.02, true);
        }
    }

    if (count >= 45 && count <= 55 || count >= 65 && count <= 75)
    {
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 25, 0);
    }

    if (count == 105)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 1.25);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "right hand"), 1);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 115)
    {
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 30, randomAngle(), GetRandomReal(-40, -30), 0, 2, 1, 255, 255, 255, 255);
        Effect("Arthursfx11.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 10, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetUnitFlyHeight(t, 0, 3333);
        SetUnitFlyHeight(u, 0, 3333);
    }

    if (count == 130)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hutaosfx26.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        Effect("Hutaosfx31.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Mystosfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("Gokusfx11.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 135)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GokuF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("GokuF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 19);
    }

    if (count == 1 || count == 20 || count == 40)
    {
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, GetRandomReal(1, 2), 1.5, 255, 255, 255, PercentTo255(GetRandomReal(40, 60)));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        if (count == 40)
        {
            DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "right hand"), 1);
            Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
            SetUnitAnimationByIndex(u, 36);
        }
    }

    if (count == 50)
    {
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), -40, 0, 6, 1, 255, 255, 255, 255);
        Effect("Mokuosfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 80, a, 0, 0, 6, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(t), GetUnitY(t), 60, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 500, 0.4, 0.02, true);
    }

    if (count >= 50 && count <= 70)
    {
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 30, 0);

        if (count % 5 == 0)
        {
            Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, -45, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Gokusfx11.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 10, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 90)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "right hand"), 1);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 8);
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);
    }

    if (count == 100)
    {
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 30, randomAngle(), -30, 0, 2, 1, 255, 255, 255, 255);
        RushSlide(t, a, 300, 0.4, 0.02, true);
    }

    if (count == 120)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "left hand"), 1);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 9);
    }

    if (count == 130)
    {
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 30, randomAngle(), -20, 0, 2, 1, 255, 255, 255, 255);
        RushSlide(t, a, 300, 0.4, 0.02, true);
    }

    if (count == 150)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "right hand"), 1);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 38);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
    }

    if (count == 160)
    {
        Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 80, randomAngle(), -40, 0, 6, 1, 255, 255, 255, 255);
        Effect("Mokuosfx4.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 20, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, a, 0, 0, 6, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 30, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 500, 0.4, 0.02, true);
    }

    if (count >= 160 && count <= 180)
    {
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) - 30, 0);
    }

    if (count == 180)
    {
        SetUnitAnimationByIndex(u, 19);
        SetUnitFlyHeight(t, 0, 0);
        Effect("Hutaosfx26.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        Effect("Hutaosfx31.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Mystosfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("Gokusfx11.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 200 || count == 210 || count == 220 || count == 230 || count == 240 || count == 250 || count == 260 || count == 270 || count == 280)
    {
        Effect("Gokusfx12.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gokusfx10.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, GetRandomReal(1.5, 2), 1.5, 255, 255, 255, 255);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "chest"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "right hand"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "left hand"), 1);
        if (count == 240)
        {
            SetUnitAnimationByIndex(u, 2);
        }
        if (count == 260)
        {
            SetUnitTimeScale(u, 0);
        }
        if (count == 260 || count == 280)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
            Effect("Gokusfx13.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, -45, 0, 2, 1.5, 255, 255, 255, 255);
        }
    }

    if (count == 270 || count == 290 || count == 310)
    {
        Effect("Hydesfx21.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("Hutaosfx25.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 320)
    {
        SetUnitFlyHeight(u, 0, 1500);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (GetUnitAbilityLevel(u, 'B00H') > 0 ? 11 * 1.1 : 11) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GokuT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("GokuT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 18);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "chest"), 1);
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, PercentTo255(60));
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 25)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "right hand"), 1);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count <= 50)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 5, a);
            y = PolarY(GetUnitY(t), 5, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 35)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 38);
        SetUnitTimeScale(u, 1.2);
    }

    if (count == 50)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Gokusfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Gokusfx4.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 1, 255, 255, 255, 255);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Hutaosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        RushSlide(t, a, 800, 3, 0.02, true);
    }

    if (count == 60 || count == 80 || count == 100 || count == 120 || count == 140 || count == 160 || count == 180)
    {
        Effect("Hutaosfx10.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        Effect("Hutaosfx11.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count == 180 || count == 200 || count == 220 || count == 240)
    {
        if (count == 180)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
            SetUnitAnimationByIndex(u, 18);
            SetUnitTimeScale(u, 1);
            DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "chest"), 1);
        }
        if (count == 220)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
            SetUnitAnimationByIndex(u, 8);
            SetUnitTimeScale(u, 0.5);
        }
        if (count >= 220)
        {
            DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "right hand"), 1);
        }
    }

    if (count >= 180 && count <= 260)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 260)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Hutaosfx23.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Hutaosfx21.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 1, 255, 255, 255, 255);
        Effect("Hutaosfx22.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 290)
    {
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 0.7);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "left hand"), 1);
    }

    if (count == 320)
    {
        SetUnitTimeScale(u, 0);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "left hand"), 1);
        Effect("Hutaosfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Hutaosfx32.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Hutaosfx30.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
    }

    if (count == 340)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "left hand"), 1);
        Effect("Hutaosfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Hutaosfx23.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Hutaosfx22.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 360)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "left hand"), 1);
        Effect("Hutaosfx26.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        Effect("Hutaosfx31.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Mystosfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
    }
    
    if (count == 370)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "left hand"), 1);
        Effect("Gokusfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        Effect("Gokusfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, -90, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 390)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hydesfx21.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("Hutaosfx25.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Hutaosfx17.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 400)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GokuR2_2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    effect e = LoadEffectHandle(GameHT, hid, 0);
    unit t = LoadUnitHandle(GameHT, hid, 1);
    int alpha = LoadInteger(GameHT, hid, 'alph');
    float x = PolarX(GetSpecialEffectX(e), 70, GetSpecialEffectYaw(e));
    float y = PolarY(GetSpecialEffectY(e), 70, GetSpecialEffectYaw(e));

    alpha -= 12;
    SaveInteger(GameHT, hid, 'alph', alpha);
    SetEffectXY(e, x, y, 0);
    SetSpecialEffectVertexColour(e, 255, 255, 255, alpha);

    if (alpha == 183)
    {
        Effect("Gokusfx1.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (alpha < 135)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            Effect("Gokusfx8.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 50, randomAngle(), GetRandomReal(10, 20), 0, 2, 1, 255, 255, 255, 255);
            Effect("Hutaosfx14.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, randomAngle(), GetRandomReal(30, 40), 0, 4, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }
        else
        {
            Effect("Gokusfx8.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 50, randomAngle(), GetRandomReal(30, 40), 0, 2, 1, 255, 255, 255, 255);
            Effect("Hutaosfx14.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, randomAngle(), GetRandomReal(40, 50), 0, 4, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }
        Effect("Arthursfx5.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GokuR2_1(effect e, unit t)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);
    SaveEffectHandle(GameHT, hid, 0, e);
    SaveUnitHandle(GameHT, hid, 1, t);
    SaveInteger(GameHT, hid, 'alph', 255);
    TimerStart(tmr, 0.02, true, @GokuR2_2);
}

void GokuR2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("GokuR2.mp3");
        x = PolarX(GetUnitX(t), -700, a);
        y = PolarY(GetUnitY(t), -700, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 18);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "right hand"), 1);
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, PercentTo255(60));
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
    }

    if (count <= 25)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 25)
    {
        SoundStart("GojoSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitVertexColor(u, 255, 255, 255, 0);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count >= 30 && count <= 230)
    {
        x = PolarX(GetUnitX(t), 3, LoadReal(GameHT, hid, 0));
        y = PolarY(GetUnitY(t), 3, LoadReal(GameHT, hid, 0));
        SetUnitXY(t, x, y, 2);

        if (count == 160)
        {
            x = PolarX(GetUnitX(t), 200, a);
            y = PolarY(GetUnitY(t), 200, a);
            if (!IsPointWalkable(x, y))
            {
                x = PolarX(GetUnitX(t), 140, a);
                y = PolarY(GetUnitY(t), 140, a);
                SetUnitXY(u, x, y, 0);
            }
            else
            {
                x = PolarX(GetUnitX(t), 350, a);
                y = PolarY(GetUnitY(t), 350, a);
                if (!SetUnitXY(u, x, y, 1))
                {
                    x = PolarX(GetUnitX(t), 140, a);
                    y = PolarY(GetUnitY(t), 140, a);
                    SetUnitXY(u, x, y, 0);
                }
            }
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
            a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
            SetUnitFacingEx(u, a, true);
            SetUnitAnimationByIndex(u, 35);
            SetUnitTimeScale(u, 0.85);
            SetUnitVertexColor(u, 255, 255, 255, 255);
        }

        if (count <= 150)
        {
            if (count % 5 == 0)
            {
                a2 = randomAngle();
                x = PolarX(GetUnitX(t), 350, a2);
                y = PolarY(GetUnitY(t), 350, a2);
                a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
                Effect("Gokus4.mdx", x, y, 0, a2, 0, 0, 1, 0.4, 255, 255, 255, 255);
                SetSpecialEffectAnimationByIndex(dummy_effect, 25);
                GokuR2_1(dummy_effect, t);
            }
        }
    }

    if (count == 170 || count == 180 || count == 190 || count == 200 || count == 210 || count == 220 || count == 230 || count == 240 || count == 250)
    {
        Effect("Gokusfx12.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gokusfx10.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(2, 2.5), 1.5, 255, 255, 255, 255);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "chest"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "right hand"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "left hand"), 1);
        if (count == 230)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
            Effect("Gokusfx13.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            RushSlide(t, a, 300, 0.8, 0.02, true);
        }
    }

    if (count == 260)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GokuR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("GokuR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 0.8);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "right hand"), 1);
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, PercentTo255(60));
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 10 || count == 20 || count == 30)
    {
        Effect("Gokusfx2.mdx", GetUnitX(u), GetUnitY(u), 30, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Gokusfx4.mdx", GetUnitX(u), GetUnitY(u), 70, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Hutaosfx11.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count <= 40)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 15, a);
            y = PolarY(GetUnitY(t), 15, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 40)
    {
        SoundStart("GokuSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), -35, 0, 6, 1, 255, 255, 255, 255);
        Effect("Mokuosfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 80, a, 0, 0, 6, 1, 255, 255, 255, 255);
        Effect("Gokusfx5.mdx", GetUnitX(t), GetUnitY(t), 60, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 300, 0.8, 0.02, true);
        KnockupUnit(t, 0.8, 0.02, 300);
    }

    if (count == 45)
    {
        DisableAbility(GetUnitAbility(u, 'A07A'), true, true);
        UnitAddAbility(u, 'A07B');
        UnitMakeAbilityPermanent(u, true, 'A07B');
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (3 + GetUnitAbilityLevel(u, 'A07A')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        TimerStart(tmr, 5, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            unit u = LoadUnitHandle(GameHT, hid, 'cstr');

            EnableAbility(GetUnitAbility(u, 'A07A'), true, true);
            UnitRemoveAbility(u, 'A07B');
            FlushChildHashtable(GameHT, hid);
            DestroyTimer(tmr);
        });
    }
}

void GokuE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    
    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 50)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
    }

    if (count == 1)
    {
        SoundStart("GokuE.mp3");
        SetUnitAnimationByIndex(u, 19);
    }

    if (count == 10 || count == 20 || count == 30 || count == 40)
    {
        Effect("Gokusfx10.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 50)
    {
        Effect("Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 5, 1, 174, 71, 71, 255);
        Effect("Astasfx4.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        DisableAbility(GetUnitAbility(u, 'A078'), true, true);
        UnitAddAbility(u, 'A079');
        UnitMakeAbilityPermanent(u, true, 'A079');
    }

    if (count > 50 && (GetUnitAbilityLevel(u, 'B00H') == 0 || !IsUnitAlive(u)))
    {
        EnableAbility(GetUnitAbility(u, 'A078'), true, true);
        UnitRemoveAbility(u, 'A079');
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GokuW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("GokuW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 19);
    }

    if (count == 1 || count == 15 || count == 30)
    {
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, GetRandomReal(1, 2), 1.5, 255, 255, 255, PercentTo255(GetRandomReal(40, 60)));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        if (count == 30)
        {
            SetUnitAnimationByIndex(u, 8);
            SetUnitTimeScale(u, 1.2);
            DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "right hand"), 1);
            Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        }
    }

    if (count == 40)
    {
        SoundStart("GokuSE1.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        RushSlide(t, a, 250, 0.3, 0.02, true);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 70, randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 30, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), -40, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count >= 45 && count <= 65 || count >= 70 && count <= 90)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 55 || count == 80)
    {
        SetUnitAnimationByIndex(u, 9);
        DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx7.mdx", u, "left hand"), 1);
    }

    if (count == 65)
    {
        SoundStart("GokuSE1.mp3");
        RushSlide(t, a, 250, 0.3, 0.02, true);
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 70, randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 30, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), -50, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count == 90)
    {
        SoundStart("GokuSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Gokusfx6.mdx", GetUnitX(t), GetUnitY(t), 70, randomAngle(), 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Gokusfx2.mdx", GetUnitX(t), GetUnitY(t), 30, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gokusfx8.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), -30, 0, 2, 1, 255, 255, 255, 255);
        RushSlide(t, a, 380, 0.6, 0.02, true);
    }

    if (count == 95)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A077')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GokuQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("GokuQ.mp3");
        SetUnitAnimationByIndex(u, 38);
        SetUnitTimeScale(u, 1.5);
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                Effect("Gokusfx1.mdx", GetUnitX(d), GetUnitY(d), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A076'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        if (count % 2 == 0)
        {
            Effect("Gokusfx2.mdx", x, y, 30, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Gokusfx3.mdx", x, y, 120, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Gokusfx4.mdx", x, y, 70, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GojoD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("GojoD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 11);
        Effect("Arthursfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Arthursfx13.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Jingliusfx2.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 15)
    {
        Effect("Gojosfx3.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 3, 2.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 1.5);
        Effect("Gojosfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 1.5);
    }

    if (count == 25)
    {
        Effect("Gojosfx1.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 1);
    }

    if (count == 30)
    {
        Effect("Gojosfx8.mdx", GetUnitX(t), GetUnitY(t), 80, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
    }

    if (count == 40)
    {
        Effect("Gojosfx9.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 10, 1.5, 255, 255, 255, 255);
    }

    if (count == 30 || count == 70)
    {
        Effect("Jingliusfx2.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 50)
    {
        Effect("Gojosfx11.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.7, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Gojosfx12.mdx", GetUnitX(t), GetUnitY(t), 70, a, 0, 0, 1.4, 2, 255, 255, 255, 255);
    }

    if (count == 70)
    {
        Effect("Gojosfx27.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 80)
    {
        Effect("Gojosfx28.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Gojosfx30.mdx", GetUnitX(t), GetUnitY(t), 80, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 100)
    {
        SoundStart("GojoSE13.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Gojosfx29.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Gojosfx31.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
    }

    if (count == 105)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GojoF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("GojoF.mp3");
        SoundStart("GojoF-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 22);
        SetUnitTimeScale(u, 0.9);
        Effect("Gojosfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        AnimEffect2(dummy_effect, "death", 3.5);
        Effect("Gojosfx22.mdx", GetUnitX(u), GetUnitY(u), 5, a, 0, 0, 2, 5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        AnimEffect2(dummy_effect, "death", 3.5);
        Effect("Gojosfx24.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        TimeScaleEffect(dummy_effect, 0, 0.7);
        TimeScaleEffect(dummy_effect, 1, 2);
    }

    if (count == 100)
    {
        SoundStart("GojoF-2.mp3");
        SoundStart("GojoF-3.mp3");
        Effect("Gojosfx23.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        AnimEffect2(dummy_effect, "death", 1.5);
        Effect("Gojosfx15.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.8, 2.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.4);
        AnimEffect2(dummy_effect, "death", 1.5);
    }

    if (count == 170)
    {
        SoundStart("GojoF-4.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 24);
        SetUnitTimeScale(u, 0.8);
    }

    if (count == 200)
    {
        SoundStart("GojoF-5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Gojosfx11.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Gojosfx12.mdx", GetUnitX(t), GetUnitY(t), 70, a, 0, 0, 1.3, 2, 255, 255, 255, 255);
    }

    if (count == 205)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GojoT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("GojoT.mp3");
        SoundStart("GojoSE11.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 0.9);
        Effect("Gojosfx14.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Gojosfx15.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.6, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        AnimEffect2(dummy_effect, "death", 0.8);
        Effect("Gojosfx16.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 15, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 3);

        g1 = CreateGroup();
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 700, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        SaveGroupHandle(GameHT, hid, 'grp+', g1);
    }

    if (count == 30)
    {
        Effect("Gojosfx20.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.8, 1.5, 255, 255, 255, 255);
        Effect("Gojosfx17.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 15, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count < 40)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+'); 
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, true);
            SetInvulUnit(d, true);
        }
    }

    if (count == 40)
    {
        SoundStart("GojoSE12.mp3");
        Effect("Gojosfx18.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 12, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Saltersfx38.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Gojosfx19.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, false);
            SetInvulUnit(d, false);
        }
        DestroyGroup(g1);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 700, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 15 * GetHeroStr(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GojoR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("GojoR.mp3");
        SoundStart("GojoSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx6-x2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bellsfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -130, a);
        y = PolarY(GetUnitY(t), -130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 1.3);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 10)
    {
        SoundStart("GojoSE6.mp3");
        Effect("Gojosfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Gojosfx7.mdx", GetUnitX(u), GetUnitY(u), 30, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Gojosfx10.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        RushSlide(t, a, 400, 0.5, 0.02, true);
    }

    if (count >= 10 && count <= 40)
    {
        if (count % 5 == 0)
        {
            Effect("Sehasfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        }
    }

    if (count == 35)
    {
        SoundStart("GojoR-1.mp3");
        SoundStart("GojoSE10.mp3");
        SetUnitAnimationByIndex(u, 10);
        Effect("Gojosfx8.mdx", GetUnitX(t), GetUnitY(t), 70, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
    }

    if (count == 40)
    {
        Effect("Gojosfx9.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 8, 1.5, 255, 255, 255, 255);
    }

    if (count == 50)
    {
        SoundStart("GojoR-2.mp3");
        SoundStart("GojoSE9.mp3");
        Effect("Gojosfx11.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Gojosfx12.mdx", GetUnitX(t), GetUnitY(t), 70, a, 0, 0, 1.3, 2, 255, 255, 255, 255);
    }

    if (count == 60)
    {
        SoundStart("GojoSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Astasfx4.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        Effect("Hydesfx10.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 65)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A072')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GojoE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("GojoE.mp3");
        SoundStart("GojoSE7.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 0.8);
        Effect("Gojosfx3.mdx", x, y, 10, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 1);
        Effect("Gojosfx2.mdx", x, y, 100, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 1);
    }

    if (count == 15)
    {
        Effect("Gojosfx1.mdx", x, y, 100, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 0.6);
    }

    if (count == 25)
    {
        Effect("Gojosfx4.mdx", x, y, 10, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 40)
    {
        SoundStart("GojoE-1.mp3");
        SoundStart("GojoSE8.mp3");
        for (int i = 1; i < 13; i++)
        {
            x2 = PolarX(x, 300, i * 30);
            y2 = PolarY(y, 300, i * 30);
            Effect("Gojosfx5.mdx", x2, y2, 50, i * 30, 0, 0, 1.5, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
        }
    }

    if (count == 55)
    {
        SoundStart("GojoSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        Effect("Sehasfx6.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Sehasfx11.mdx", x, y, 50, a, 0, 0, 2, 1.5, 81, 150, 210, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Sehasfx12.mdx", x, y, 0, a, 0, 0, 2.5, 1.5, 81, 150, 210, PercentTo255(70));
        SetSpecialEffectTimeScale(dummy_effect, 0.5);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 500, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A071') * GetHeroStr(u, true));
                KnockupUnit(d, 0.6, 0.02, 400);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GojoW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("GojoW.mp3");
        SoundStart("GojoSE3.mp3");
        Effect("Ichigosfx6-x2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Bellsfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -130, a);
        y = PolarY(GetUnitY(t), -130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 1.2);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 6)
    {
        SoundStart("GojoSE4.mp3");
        Effect("Bellsfx5.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Ichigosfx7.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Bellsfx13.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        RushSlide(t, a, 290, 0.3, 0.02, true);
    }

    if (count == 25)
    {
        SoundStart("GojoW-1.mp3");
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 1.6);
        RushSlide(t, a, 120, 0.16, 0.02, true);
    }

    if (count >= 25 && count <= 55)
    {
        if (count % 10 == 0)
        {
            SoundStart("GojoSE5.mp3");
            x = PolarX(GetUnitX(t), -130, a);
            y = PolarY(GetUnitY(t), -130, a);
            SetUnitXY(u, x, y, 0);
            SetUnitAnimationByIndex(u, 4);
            Effect("Bellsfx5.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
            Effect("Ichigosfx7.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.7);
            Effect("Bellsfx13.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
            RushSlide(t, a, 120, 0.16, 0.02, true);
        }
    }

    if (count == 62)
    {
        SoundStart("GojoSE6.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 1.5);
        Effect("Bellsfx5.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Ichigosfx7.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Bellsfx13.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        RushSlide(t, a, 310, 0.6, 0.02, true);
    }

    if (count == 67)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A070')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void GojoQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("GojoQ.mp3");
        SoundStart("GojoSE1.mp3");
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 26);
        SetUnitTimeScale(u, 1.4);
        DestroyEffectTimed(AddSpecialEffectTarget("ichigosfx37.mdx", u, "hand right"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\Invisibility\\InvisibilityTarget.mdx", u, "hand right"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\Invisibility\\InvisibilityTarget.mdx", u, "chest"), 1);
        Effect("Arthursfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        RushSlide(u, a, dist, 0.2, 0.02, false);
        KnockupUnit(u, 0.2, 0.02, 400);
    }

    if (count == 12)
    {
        SoundStart("GojoSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitFlyHeight(u, 0, 0);
        Effect("Arthursfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a + 180, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx11.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Mystosfx24.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A06Z'));
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void RyougiD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("RyougiD.mp3");
        SoundStart("RyougiD-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Ryogisfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 20)
    {
        SetUnitAnimationByIndex(u, 3);
    }

    if (count == 20 || count == 40)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ryougi.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1, 0.6, 255, 255, 255, PercentTo255(90));
        SetSpecialEffectAnimationByIndex(dummy_effect, 1);
        Effect("Ryogisfx30.mdx", GetUnitX(u), GetUnitY(u), 50, GetUnitFacing(u), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 25 || count == 35 || count == 50)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ryougi.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1, 0.6, 255, 255, 255, PercentTo255(90));
        SetSpecialEffectAnimationByIndex(dummy_effect, 4);
        Effect("Ryogisfx31.mdx", GetUnitX(u), GetUnitY(u), 50, GetUnitFacing(u), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 30 || count == 45 || count == 55)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ryougi.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1, 0.6, 255, 255, 255, PercentTo255(90));
        SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        Effect("Ryogisfx29.mdx", GetUnitX(u), GetUnitY(u), 50, GetUnitFacing(u), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 45)
    {
        Effect("Ryogisfx32.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count >= 20 && count <= 60)
    {
        x = PolarX(GetUnitX(u), 20, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 20, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 60)
    {
        SoundStart("RyougiD-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ryogisfx7.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 1.5, 51, 51, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ryogisfx10.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Ryogisfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 7, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("ryogisfx28.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 65)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void RyougiF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("RyougiF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -500, a);
        y = PolarY(GetUnitY(t), -500, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 1);
        Effect("black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 7.6, 255, 255, 255, PercentTo255(40));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 25)
    {
        Effect("Ryogisfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("ryogisfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 51, 153, 255, PercentTo255(80));
        Effect("Ryogisfx25.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count == 70)
    {
        SetUnitAnimationByIndex(u, 8);
    }

    if (count == 85)
    {
        Effect("Ryogisfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 1.5, 255, 255, 255, 255);
        Effect("Ryogisfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ryogisfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 90)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 9);
        Effect("Ryogisfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ryogisfx4.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
        Effect("Ryogisfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count >= 85 && count <= 105)
    {
        x = PolarX(GetUnitX(u), 45, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 45, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 110 || count == 140 || count == 170 || count == 200)
    {
        SetUnitAnimationByIndex(u, 8);
    }

    if (count == 115 || count == 145 || count == 175 || count == 205)
    {
        a = randomAngle();
        x = PolarX(GetUnitX(t), 500, a);
        y = PolarY(GetUnitY(t), 500, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        Effect("Ryogisfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 1.5, 255, 255, 255, 255);
        Effect("Ryogisfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ryogisfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 120 || count == 150 || count == 180 || count == 210)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 9);
        Effect("Ryogisfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ryogisfx4.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
        Effect("Ryogisfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count >= 115 && count <= 135 || count >= 145 && count <= 165 || count >= 175 && count <= 195 || count >= 205 && count <= 225)
    {
        x = PolarX(GetUnitX(u), 45, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 45, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 240)
    {
        a = randomAngle();
        x = PolarX(GetUnitX(t), 500, a);
        y = PolarY(GetUnitY(t), 500, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 1);
    }

    if (count == 275)
    {
        SetUnitAnimationByIndex(u, 1);
    }

    if (count == 290)
    {
        Effect("Ryogisfx27.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 320)
    {
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 0.6);
        Effect("Ryogisfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 1.5, 255, 255, 255, 255);
        Effect("Ryogisfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ryogisfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
    }

    if (count >= 330 && count <= 350)
    {
        x = PolarX(GetUnitX(u), 15, a);
        y = PolarY(GetUnitY(u), 15, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 20, 0);
    }

    if (count == 354)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, 0, 0);
        Effect("Ryogisfx10.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Ryogisfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 7, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Ryogisfx28.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 357)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void RyougiT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("RyougiT.mp3");
        SoundStart("RyougiT-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -400, a);
        y = PolarY(GetUnitY(t), -400, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 15);
        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\Invisibility\\InvisibilityTarget.mdx", u, "hand right"), 1);
        Effect("Ryogisfx21.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(40));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        for (int i = 1; i < 13; i++)
        {
            x = PolarX(GetUnitX(t), 550, i * 30);
            y = PolarY(GetUnitY(t), 550, i * 30);
            Effect("Ryogisfx22.mdx", x, y, 0, i * 30, 0, 0, 1, 2, 255, 255, 255, 255);
        }
    }

    if (count == 1 || count == 20 || count == 35)
    {
        Effect("Ryogisfx20.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 0.6, 1, 255, 255, 255, 255);
    }

    if (count == 10)
    {
        SoundStart("RyougiT-2.mp3");
    }

    if (count == 20)
    {
        SetUnitAnimationByIndex(u, 16);
    }

    if (count >= 40 && count <= 80)
    {
        x = PolarX(GetUnitX(u), 18, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 18, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 60)
    {
        SoundStart("RyougiT-3.mp3");
        SoundStart("RyougiT-4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 17);
    }

    if (count == 80)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ryogisfx18.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Ryogisfx23.mdx", GetUnitX(t), GetUnitY(t), 100, a + 225, -10, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Ryogisfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 85)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void RyougiR2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("RyougiW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ryogisfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Ryogisfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        UnitHilang(u, true);
    }

    if (count == 10 || count == 30)
    {
        Effect("Vegetasfx12.mdx", GetUnitX(t), GetUnitY(t), 50, a2, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 10 || count == 20 || count == 30 || count == 40)
    {
        SoundStart("RyougiSE2.mp3");
    }

    if (count >= 10 && count <= 50)
    {
        if (count % 5 == 0)
        {
            a2 = randomAngle();
            Effect("Ryogisfx34.mdx", GetUnitX(t), GetUnitY(t), 50, a2, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Esdeathsfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a2, 0, 0, GetRandomReal(1.5, 2), 1, 191, 255, 255, PercentTo255(GetRandomReal(60, 80)));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1.25));
            RushSlide(t, a2, 20, 0.08, 0.02, true);
        }
    }

    if (count == 40)
    {
        SoundStart("RyougiR2.mp3");
    }

    if (count == 55)
    { 
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 0.8);
        UnitHilang(u, false);
        Effect("Esdeathsfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx8.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
    }

    if (count >= 60 && count <= 72)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 8, a);
            y = PolarY(GetUnitY(u), dist / 8, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 70)
    {
        Effect("Esdeathsfx11.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Esdeathsfx6.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 72)
    {
        SetUnitFacing(u, a + 180);
        Effect("Esdeathsfx21.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count >= 72 && count <= 80)
    {
        a2 = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(u), 35, a2);
        y = PolarY(GetUnitY(u), 35, a2);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 80)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Esdeathsfx26.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Ryogisfx10-x2.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Ryogisfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
    }

    if (count == 83)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (2 + GetUnitAbilityLevel(u, 'A02R')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void RyougiR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("RyougiR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 3);
        RushSlide(u, a, dist, 0.32, 0.02, false);
    }

    if (count <= 16)
    {
        if (count >= 8)
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 50, 0);
        }
        else
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 50, 0);
        }
    }

    if (count == 18)
    {
        SoundStart("RyougiSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ryogisfx4.mdx", GetUnitX(u), GetUnitY(u), 60, a, 90, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Ryogisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ryogisfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Ryogisfx14.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        for (int i = 0; i < 7; i++)
        {
            x2 = PolarX(GetUnitX(u), 150, i * 60);
            y2 = PolarY(GetUnitY(u), 150, i * 60);
            Effect("Ryogisfx13.mdx", x2, y2, 0, i * 60, 0, 0, 1.5, 2, 255, 255, 255, 255);
            x2 = PolarX(GetUnitX(u), 300, i * 60);
            y2 = PolarY(GetUnitY(u), 300, i * 60);
            Effect("Ryogisfx13.mdx", x2, y2, 0, i * 60, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
            x2 = PolarX(GetUnitX(u), 450, i * 60);
            y2 = PolarY(GetUnitY(u), 450, i * 60);
            Effect("Ryogisfx13.mdx", x2, y2, 0, i * 60, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, (5 + GetUnitAbilityLevel(u, 'A02Q')) * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        DisableAbility(GetUnitAbility(u, 'A02Q'), true, true);
        UnitAddAbility(u, 'A02R');
        UnitMakeAbilityPermanent(u, true, 'A02R');
        SetUnitAbilityLevel(u, 'A02R', GetUnitAbilityLevel(u, 'A02Q'));

        SetUnitFlyHeight(u, 0, 0);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        TimerStart(tmr, 5, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            unit u = LoadUnitHandle(GameHT, hid, 'cstr');

            EnableAbility(GetUnitAbility(u, 'A02Q'), true, true);
            UnitRemoveAbility(u, 'A02R');
            FlushChildHashtable(GameHT, hid);
            DestroyTimer(tmr);
        });
    }
}

void RyougiE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = .0f;
    float dist = .0f;
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    if (t != nil)
    {
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("RyougiE.mp3");
        SoundStart("RyougiSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ryogisfx7.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, 3, 1.5, 92, 130, 220, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Ryogisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ryogisfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ryogisfx10-x2.mdx", GetUnitX(u), GetUnitY(u), 10, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Jingliusfx21.mdx", GetUnitX(u), GetUnitY(u), 30, randomAngle(), 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        if (t != nil)
        {
            Effect("Ryogisfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        }

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 500, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A02P') * GetHeroAgi(u, true));
            }
        }
        DestroyGroup(g1);

        if (t == nil)
        {
            SetUnitTimeScale(u, 1);
            SetPauseUnit(u, false);
            SetInvulUnit(u, false);
            IssueImmediateOrderById(u, 851972);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }

    if (count == 10)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 1);
        SetUnitTimeScale(u, 1.5);
        Effect("Ryogisfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Ryogisfx13.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Ryogisfx27.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Ryogisfx14.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
    }

    if (count == 15)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A02P') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 300, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void RyougiW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("RyougiW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitAnimationByIndex(u, 10);
        Effect("Ryogisfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count <= 12)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 7, a);
            y = PolarY(GetUnitY(u), dist / 7, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 12)
    {
        SoundStart("RyougiW-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 1);
        Effect("Ryogisfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Ryogisfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 350, 0.4, 0.02, true);
        SetUnitFlyHeight(t, 400, 1000);
    }

    if (count == 32)
    {
        SoundStart("RyougiW-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ryogisfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, 400, 0);
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 1.5);
        Effect("Ryogisfx4.mdx", GetUnitX(t), GetUnitY(t), 400, a, -45, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ryogisfx5.mdx", GetUnitX(t), GetUnitY(t), 450, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        Effect("Ryogisfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 36)
    {
        RushSlide(t, a, 400, 0.6, 0.02, true);
        SetUnitFlyHeight(u, 0, 1000);
        SetUnitFlyHeight(t, 0, 1000);
        SaveUnitHandle(GameHT, GetHandleId(u), StringHash("RyogiE"), t);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A02O')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        TimerStart(tmr, 5, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            unit u = LoadUnitHandle(GameHT, hid, 'cstr');

            if (HaveSavedHandle(GameHT, GetHandleId(u), StringHash("RyogiE")))
            {
                RemoveSavedHandle(GameHT, GetHandleId(u), StringHash("RyogiE"));
            }
            FlushChildHashtable(GameHT, hid);
            DestroyTimer(tmr);
        });
    }
}

void RyougiQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("RyougiQ.mp3");
        SetUnitAnimationByIndex(u, 3);
        Effect("Ryogisfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ryogisfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ryogisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 1 || count == 3 || count == 5 || count == 7 || count == 10 || count == 12 || count == 14)
    {
        Effect("Ryogisfx25.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, 255);
    }

    if (count == 3 || count == 9)
    {
        Effect("Ryogisfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 1.5, 255, 255, 255, 255);
    }

    if (count == 2 || count == 5 || count == 7 || count == 10 || count == 12 || count == 15)
    {
        Effect("Ryogisfx33.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1400, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A02N'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        if (count % 2 == 0)
        {
            Effect("Ryogisfx7.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.4, 1, 92, 130, 220, PercentTo255(80));
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MystoD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = GetUnitFacing(u);
    float dist = .0f;
    float a2 = .0f;
    float x2 = .0f;
    float y2 = .0f;
    float x3 = .0f;
    float y3 = .0f;
    float h = .0f;
    unit d = nil;
    effect e = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 50)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
    }

    if (count == 1)
    {
        SoundStart("MystoD.mp3");
        SoundStart("MystoSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 8);
        Effect("Mystosfx25.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 4, 2, 255, 255, 255, 255);
        Effect("Mystosfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 1);

        for (int i = 0; i < 8; i++)
        {
            a2 = randomAngle();
            x2 = PolarX(GetUnitX(u), GetRandomReal(150, 300), a2);
            y2 = PolarY(GetUnitY(u), GetRandomReal(150, 300), a2);
            x3 = PolarX(x, GetRandomReal(100, 450), a2);
            y3 = PolarY(y, GetRandomReal(100, 450), a2);
            a2 = Angle(x2, y2, x3, y3);
            dist = Distance(x2, y2, x3, y3);
            Effect("Mystosfx27.mdx", x2, y2, 0, a2, 0, 0, 1.5, 0, 255, 255, 255, 255);
            SaveEffectHandle(GameHT, hid, i, dummy_effect);
            SaveReal(GameHT, hid, i, dist);
            SaveReal(GameHT, hid, i + 10, GetRandomReal(450, 800));
        }
    }

    if (count == 50)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
    }

    if (count <= 105)
    {
        if (count <= 50)
        {
            for (int i = 0; i < 8; i++)
            {
                e = LoadEffectHandle(GameHT, hid, i);
                dist = LoadReal(GameHT, hid, i);
                h = LoadReal(GameHT, hid, i + 10) / 50;
                SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) + h);
            }
        }
        else
        {
            if (count % 5 == 0)
            {
                SaveBoolean(GameHT, hid, LoadInteger(GameHT, hid, 0), true);
                SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1);
            }

            g1 = CreateGroup();
            for (int i = 0; i < 8; i++)
            {
                e = LoadEffectHandle(GameHT, hid, i);
                if (HaveSavedBoolean(GameHT, hid, i) && e != nil)
                {
                    SaveInteger(GameHT, hid, i + 1, LoadInteger(GameHT, hid, i + 1) + 1);
                    dist = LoadReal(GameHT, hid, i);
                    x2 = PolarX(GetSpecialEffectX(e), dist / 15, GetSpecialEffectYaw(e));
                    y2 = PolarY(GetSpecialEffectY(e), dist / 15, GetSpecialEffectYaw(e));
                    h = LoadReal(GameHT, hid, 10 + i) / 15;
                    SetEffectXY(e, x2, y2, 1);
                    SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - h);

                    if (LoadInteger(GameHT, hid, i + 1) >= 15)
                    {
                        SoundStart("MystoSE2.mp3");
                        visionArea(GetOwningPlayer(u), 1200, 3, x2, y2);
                        Effect("Mystosfx28.mdx", x2, y2, 0, randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
                        SetSpecialEffectTimeScale(dummy_effect, 0.8);
                        Effect("Mystosfx29.mdx", x2, y2, 0, randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
                        SetSpecialEffectTimeScale(dummy_effect, 0.6);

                        GroupEnumUnitsInRange(g1, x2, y2, 400, nil);
                        for (int j = 0; j < GroupGetCount(g1); j++)
                        {
                            d = GroupGetUnitByIndex(g1, j);
                            if (FilterGeneric(u, d))
                            {
                                UnitDamageTarget(u, d, 1.5 * GetHeroInt(u, true));
                                CC_Unit(d, "stun", 0.1);
                            }
                        }

                        DestroyEffectTimed(e, .01f);
                        RemoveSavedHandle(GameHT, hid, i);
                    }
                }
            }
            DestroyGroup(g1);
        }
    }

    if (count == 105)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MystoF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float a2 = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 50)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
    }
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MystoF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 8, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 6);
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitFacing(t, a + 180);
        Effect("black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 8.4, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Mystosfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 5, 8.4, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0, 1);
        Effect("Mystosfx4.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 6, 3, 178, 102, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Mystosfx20.mdx", GetUnitX(t), GetUnitY(t), 200, a, 0, 0, 8, 8.4, 178, 102, 255, PercentTo255(40));
        SetSpecialEffectAnimation(dummy_effect, "birth");
        TimeScaleEffect(dummy_effect, 0, 1);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count == 50)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
    }

    if (count == 250)
    {
        a2 = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -200, a);
        y = PolarY(GetUnitY(t), -200, a);
        Effect("Units\\Demon\\felhound\\felhound.mdx", x, y, 990, a, 0, 0, 2, 2.6, 255, 255, 255, 0);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count <= 300)
    {
        if (count >= 30 && count <= 150)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 7, 0);
        }
        else if (count <= 30)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 5, 0);
        }

        if (count >= 250)
        {
            e = LoadEffectHandle(GameHT, hid, 0);
            SetSpecialEffectVertexColour(e, 255, 255, 255, PercentTo255(2 * (count - 250)));
        }

        if (count % 5 == 0)
        {
            Effect("Mystosfx21.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 10, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Mystosfx22.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 10, randomAngle(), 0, 0, 1, 1, 255, 255, 255, PercentTo255(60));
        }
    }

    if (count == 330)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 3);
        SetSpecialEffectTimeScale(e, 0.7);
    }

    if (count == 360)
    {
        Effect("Mystosfx23.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
    }

    if (count >= 370 && count <= 420)
    {
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) - 19, 0);

        if (count % 5 == 0)
        {
            Effect("Mystosfx22.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 10, randomAngle(), 180, 0, 1, 1, 255, 255, 255, PercentTo255(60));
        }
    }

    if (count == 420)
    {
        SoundStart("MystoF-1.mp3");
        SetUnitFlyHeight(t, 0, 0);
        Effect("Mystosfx24.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
    }

    if (count == 430)
    {
        SetPauseUnit(t, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroInt(u, true));
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MystoT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = GetUnitFacing(u);
    float a2 = .0f;
    float x2 = .0f;
    float y2 = .0f;
    effect e = nil;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 200)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
    }

    if (count == 1)
    {
        SoundStart("MystoT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 5, x, y);
        SetUnitAnimationByIndex(u, 8);
        Effect("Black.mdx", x, y, 0, a, 0, 0, 2, 5, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 200)
    {
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 800, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                CC_SLOW_EFFECT = 0.7;
                CC_Unit(d, "silence", 0.1);
            }
        }
        DestroyGroup(g1);

        if (count % 2 == 0 && count <= 170)
        {
            x2 = PolarX(x, count * 6, count * 1440 / 170);
            y2 = PolarY(y, count * 6, count * 1440 / 170);
            Effect("Gilcastersfx17.mdx", x2, y2, 1000, randomAngle(), 0, 0, 1, 5 - count * 0.02, 255, 255, 255, 255);
        }
    }

    if (count == 170)
    {
        Effect("Mystosfx19.mdx", x, y, 0, randomAngle(), 0, 0, 0, 3, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 200)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
    }

    if (count >= 170 && count <= 250)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();

        if (count <= 230)
        {
            e = LoadEffectHandle(GameHT, hid, 0);
            SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.055);
            GroupEnumUnitsInRange(g2, x, y, 16 * (count - 170), nil);
        }
        else
        {
            GroupEnumUnitsInRange(g2, x, y, 800, nil);
        }
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 15 * GetHeroInt(u, true));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 250) { DestroyGroup(g1); }
    }

    if (count == 250)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(e, "death");
        SetSpecialEffectTimeScale(e, 0.6);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MystoR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = GetUnitFacing(u);
    float a2 = .0f;
    float dist = .0f;
    float x2 = .0f;
    float y2 = .0f;
    lightning lt = nil;
    effect e = nil;
    effect e2 = nil;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 50)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
    }

    if (count == 1)
    {
        SoundStart("MystoR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 7, x, y);
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 1.5);

        x2 = PolarX(x, 600, 72);
        y2 = PolarY(y, 600, 72);
        a2 = Angle(x2, y2, x, y);
        Effect("Mystosfx10.mdx", x2, y2, 0, a2, 0, 0, 4, 7, 255, 255, 255, 0);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);

        x2 = PolarX(x, 600, 144);
        y2 = PolarY(y, 600, 144);
        a2 = Angle(x2, y2, x, y);
        Effect("Mystosfx11.mdx", x2, y2, 0, a2, 0, 0, 4, 7, 255, 255, 255, 0);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);

        x2 = PolarX(x, 600, 216);
        y2 = PolarY(y, 600, 216);
        a2 = Angle(x2, y2, x, y);
        Effect("Mystosfx12.mdx", x2, y2, 0, a2, 0, 0, 4, 7, 255, 255, 255, 0);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);

        x2 = PolarX(x, 600, 288);
        y2 = PolarY(y, 600, 288);
        a2 = Angle(x2, y2, x, y);
        Effect("Mystosfx13.mdx", x2, y2, 0, a2, 0, 0, 4, 7, 255, 255, 255, 0);
        SaveEffectHandle(GameHT, hid, 3, dummy_effect);
        
        x2 = PolarX(x, 600, 360);
        y2 = PolarY(y, 600, 360);
        a2 = Angle(x2, y2, x, y);
        Effect("Mystosfx14.mdx", x2, y2, 0, a2, 0, 0, 4, 7, 255, 255, 255, 0);
        SaveEffectHandle(GameHT, hid, 4, dummy_effect);

        e = LoadEffectHandle(GameHT, hid, 0);
        e2 = LoadEffectHandle(GameHT, hid, 1);
        lt = AddLightningEx("CLPB", true, GetSpecialEffectX(e), GetSpecialEffectY(e), 300, GetSpecialEffectX(e2), GetSpecialEffectY(e2), 300);
        SetLightningTexture(lt, "MystoRantai.blp");
        SetLightningColour(lt, 255, 255, 255, 0);
        SetLightningWidth(lt, 100);
        SetLightningTextureCoordinates(lt, 0);
        SaveLightningHandle(GameHT, hid, 10, lt);

        e = LoadEffectHandle(GameHT, hid, 1);
        e2 = LoadEffectHandle(GameHT, hid, 2);
        lt = AddLightningEx("CLPB", true, GetSpecialEffectX(e), GetSpecialEffectY(e), 300, GetSpecialEffectX(e2), GetSpecialEffectY(e2), 300);
        SetLightningTexture(lt, "MystoRantai.blp");
        SetLightningColour(lt, 255, 255, 255, 0);
        SetLightningWidth(lt, 100);
        SetLightningTextureCoordinates(lt, 0);
        SaveLightningHandle(GameHT, hid, 11, lt);

        e = LoadEffectHandle(GameHT, hid, 2);
        e2 = LoadEffectHandle(GameHT, hid, 3);
        lt = AddLightningEx("CLPB", true, GetSpecialEffectX(e), GetSpecialEffectY(e), 300, GetSpecialEffectX(e2), GetSpecialEffectY(e2), 300);
        SetLightningTexture(lt, "MystoRantai.blp");
        SetLightningColour(lt, 255, 255, 255, 0);
        SetLightningWidth(lt, 100);
        SetLightningTextureCoordinates(lt, 0);
        SaveLightningHandle(GameHT, hid, 12, lt);

        e = LoadEffectHandle(GameHT, hid, 3);
        e2 = LoadEffectHandle(GameHT, hid, 4);
        lt = AddLightningEx("CLPB", true, GetSpecialEffectX(e), GetSpecialEffectY(e), 300, GetSpecialEffectX(e2), GetSpecialEffectY(e2), 300);
        SetLightningTexture(lt, "MystoRantai.blp");
        SetLightningColour(lt, 255, 255, 255, 0);
        SetLightningWidth(lt, 100);
        SetLightningTextureCoordinates(lt, 0);
        SaveLightningHandle(GameHT, hid, 13, lt);
        
        e = LoadEffectHandle(GameHT, hid, 4);
        e2 = LoadEffectHandle(GameHT, hid, 0);
        lt = AddLightningEx("CLPB", true, GetSpecialEffectX(e), GetSpecialEffectY(e), 300, GetSpecialEffectX(e2), GetSpecialEffectY(e2), 300);
        SetLightningTexture(lt, "MystoRantai.blp");
        SetLightningColour(lt, 255, 255, 255, 0);
        SetLightningWidth(lt, 100);
        SetLightningTextureCoordinates(lt, 0);
        SaveLightningHandle(GameHT, hid, 14, lt);
    }

    if (count <= 50)
    {
        for (int i = 0; i < 5; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            lt = LoadLightningHandle(GameHT, hid, i + 10);
            SetSpecialEffectVertexColour(e, 255, 255, 255, PercentTo255(count * 2));
            SetLightningColour(lt, 255, 255, 255, PercentTo255(count * 2));
        }
    }

    if (count == 50)
    {
        SoundStart("MystoR-1.mp3");
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        Effect("Black.mdx", x, y, 0, a, 0, 0, 2, 4.9, 255, 255, 255, PercentTo255(80));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Mystosfx16.mdx", x, y, 0, a, 0, 0, 8, 4.9, 255, 255, 255, 255);
    }

    if (count >= 50 && count <= 325)
    {
        if (count % 20 == 0)
        {
            Effect("Mystosfx15.mdx", x, y, 0, randomAngle(), 0, 0, 0.8, 1, 255, 255, 255, 255);
        }
    }

    if (count >= 50 && count <= 170)
    {
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (IsUnitAlive(d) && IsUnitEnemy(d, GetOwningPlayer(u)))
            {
                a2 = Angle(x, y, GetUnitX(d), GetUnitY(d));
                dist = Distance(x, y, GetUnitX(d), GetUnitY(d));
                if (dist > 550)
                {
                    x2 = PolarX(x, 500, a2);
                    y2 = PolarY(y, 500, a2);
                    SetUnitXY(d, x2, y2, 2);
                }
                CC_Unit(d, "silence", 0.1);
            }
        }
        DestroyGroup(g1);
    }

    if (count == 70)
    {
        Effect("Mystosfx18.mdx", x, y, 300, a, 0, 0, 5, 5.1, 255, 240, 90, 255);
    }

    if (count == 90)
    {
        Effect("Mystosfx18.mdx", x, y, 500, a, 0, 0, 4.5, 4.7, 200, 255, 255, 255);
    }

    if (count == 110)
    {
        Effect("Mystosfx18.mdx", x, y, 750, a, 0, 0, 4, 4.3, 255, 0, 0, 255);
    }

    if (count == 130)
    {
        Effect("Mystosfx18.mdx", x, y, 1000, a, 0, 0, 5, 3.9, 255, 255, 255, 255);
    }

    if (count == 150)
    {
        Effect("Mystosfx18.mdx", x, y, 1300, a, 0, 0, 5.5, 3.5, 170, 0, 255, 255);
    }

    if (count == 170 || count == 200 || count == 230 || count == 260 || count == 290)
    {
        Effect("Mystosfx17.mdx", x, y, 0, randomAngle(), 0, 0, 8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count >= 170 && count <= 320)
    {
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, (9 + GetUnitAbilityLevel(u, 'A00E')) * GetHeroInt(u, true), 150);
                CC_Unit(d, "stun", 0.1);
            }
        }
        DestroyGroup(g1);
    }

    if (count == 325)
    {
        DestroyLightning(LoadLightningHandle(GameHT, hid, 10));
        DestroyLightning(LoadLightningHandle(GameHT, hid, 11));
        DestroyLightning(LoadLightningHandle(GameHT, hid, 12));
        DestroyLightning(LoadLightningHandle(GameHT, hid, 13));
        DestroyLightning(LoadLightningHandle(GameHT, hid, 14));
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MystoE2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    float x = .0f;
    float y = .0f;
    unit d = nil;
    float x2 = .0f;
    float y2 = .0f;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);

    if (count == 1)
    {
        SoundStart("MystoE-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 4, GetUnitX(u), GetUnitY(u));
        Effect("Mystosfx2.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Mystosfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));

        for (int i = 1; i < 13; i++)
        {
            x = PolarX(GetUnitX(u), 200, i * 30);
            y = PolarY(GetUnitY(u), 200, i * 30);
            Effect("Mystosfx8-2x.mdx", x, y, 50, a, 0, 0, 2, 6, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            Effect("Mystosfx9.mdx", x, y, 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            x = PolarX(GetUnitX(u), 350, i * 30);
            y = PolarY(GetUnitY(u), 350, i * 30);
            Effect("Mystosfx8-2x.mdx", x, y, 50, a, 0, 0, 2, 6, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            Effect("Mystosfx9.mdx", x, y, 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            x = PolarX(GetUnitX(u), 500, i * 30);
            y = PolarY(GetUnitY(u), 500, i * 30);
            Effect("Mystosfx8-2x.mdx", x, y, 50, a, 0, 0, 2, 6, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            Effect("Mystosfx9.mdx", x, y, 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }

        SaveReal(GameHT, hid, 0, GetUnitX(u));
        SaveReal(GameHT, hid, 1, GetUnitY(u));
    }

    if (count <= 200)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A00B') * GetHeroInt(u, true), 200);
                CC_SLOW_EFFECT = 0.5;
                CC_Unit(d, "silence", 0.1);
            }
        }
        DestroyGroup(g1);

        if (count % 25 == 0)
        {
            Effect("Mystosfx9.mdx", x, y, 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));

            SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1);
            if (LoadInteger(GameHT, hid, 0) > 3)
            {
                SaveInteger(GameHT, hid, 0, 1);
            }
            for (int i = 1; i < 13; i++)
            {
                if (LoadInteger(GameHT, hid, 0) == 1) 
                {
                    x2 = PolarX(x, 200, i * 45);
                    y2 = PolarY(y, 200, i * 45);
                }
                else if (LoadInteger(GameHT, hid, 0) == 2) 
                {
                    x2 = PolarX(x, 350, i * 45);
                    y2 = PolarY(y, 350, i * 45);
                }
                else if (LoadInteger(GameHT, hid, 0) == 3) 
                {
                    x2 = PolarX(x, 500, i * 45);
                    y2 = PolarY(y, 500, i * 45);
                }
                Effect("Mystosfx9.mdx", x2, y2, 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
                SetSpecialEffectAnimation(dummy_effect, "death");
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            }
        }
    }

    if (count == 200)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MystoE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);

    if (count == 1)
    {
        SoundStart("MystoE.mp3");
    }

    if (count == 20)
    {
        CC_Unit(u, "disarm", 999);
        DisableAbility(GetUnitAbility(u, 'A00B'), true, true);
        UnitAddAbility(u, 'A00C');
        UnitMakeAbilityPermanent(u, true, 'A00C');
        SetUnitAbilityLevel(u, 'A00C', GetUnitAbilityLevel(u, 'A00B'));
    }

    if (count > 20)
    {
        if (GetUnitAbilityLevel(u, 'B001') > 0)
        {
            if (count % 5 == 0)
            {
                Effect("Gilcastersfx17.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
                SetSpecialEffectVisible(dummy_effect, IsUnitVisible(u, GetLocalPlayer()));
            }
        }
        else
        {
            TimerStart(tmr, 0.5, false, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit u = LoadUnitHandle(GameHT, hid, 'cstr');

                UnitRemoveAbility(u, 'B00G');
                EnableAbility(GetUnitAbility(u, 'A00B'), true, true);
                UnitRemoveAbility(u, 'A00C');
                FlushChildHashtable(GameHT, hid);
                PauseTimer(tmr);
                DestroyTimer(tmr);
            });
        }
    }
}

void MystoW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 25)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("MystoW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 1.5);
    }

    if (count == 5)
    {
        x = PolarX(GetUnitX(u), 100, a);
        y = PolarY(GetUnitY(u), 100, a);
        Effect("Mystosfx5.mdx", x, y, 100, a, 90, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 20)
    {
        SoundStart("MystoSE1.mp3");
        Effect("Mystosfx6.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("Mystosfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
    }

    if (count == 25)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A00A')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 500, 0.6, 0.02, true);
    }

    if (count >= 25 && count <= 55)
    {
        if (count % 5 == 0)
        {
            Effect("Mystosfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        }
    }

    if (count == 55)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MystoQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = GetUnitFacing(u);
    effect e = nil;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("MystoQ.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 2);
        Effect("Mystosfx1.mdx", x, y, 1000, a, 90, 0, 5, 2, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count <= 10)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - 90);
    }

    if (count == 10)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Mystosfx2.mdx", x, y, 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Mystosfx3.mdx", x, y, 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Mystosfx4.mdx", x, y, 0, a, 0, 0, 7, 2, 255, 255, 255, 255);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A009'));
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void IchigoD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("IchigoD.mp3");
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 2);
        Effect("Ichigosfx35.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Ichigosfx36.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 1 || count == 20 || count == 40 || count == 60)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        DestroyEffectTimed(AddSpecialEffectTarget("Ichigosfx37.mdx", u, "hand right"), 1.5);
    }

    if (count == 10)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count <= 80)
    {
        if (count % 5 == 0)
        {
            Effect("Ichigosfx25.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 0, 155, 255, 150);
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            Effect("Ichigosfx38.mdx", GetUnitX(u), GetUnitY(u), GetRandomReal(50, 100), randomAngle(), 0, 0, GetRandomReal(0.8, 1.2), 1, 255, 255, 255, PercentTo255(50));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 70)
    {
        SetUnitTimeScale(u, 1);
    }

    if (count == 80)
    {
        x = PolarX(GetUnitX(u), -100, a);
        y = PolarY(GetUnitY(u), -100, a);
        Effect("Ichigosfx39.mdx", x, y, 100, a, 0, -90, 3, 5, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 120)
    {
        SetUnitAnimationByIndex(u, 18);
    }

    if (count >= 80 && count <= 330)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        if (dist > 220)
        {
            x = PolarX(GetSpecialEffectX(e), dist / 25, a);
            y = PolarY(GetSpecialEffectY(e), dist / 25, a);
            SetEffectXY(e, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 9 - (count - 80) * 0.03, a);
            y = PolarY(GetUnitY(t), 9 - (count - 80) * 0.03, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -200, a);
            y = PolarY(GetUnitY(t), -200, a);
            SetEffectXY(e, x, y, 0);

            if (count % 5 == 0)
            {
                visionArea(GetOwningPlayer(u), 1000, 3, GetUnitX(t), GetUnitY(t));
                Effect("Ichigosfx40.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 0.5, 255, 255, 255, 255);
            }
        }
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));

        if (count <= 230)
        {
            if (count % 5 == 0)
            {
                Effect("Ichigosfx25.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 0, 155, 255, 150);
                SetSpecialEffectAnimation(dummy_effect, "stand");
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
                Effect("Ichigosfx38.mdx", GetUnitX(u), GetUnitY(u), GetRandomReal(50, 100), randomAngle(), 0, 0, GetRandomReal(0.8, 1.2), 1, 255, 255, 255, PercentTo255(60));
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            }
        }
    }

    if (count >= 230 && count <= 350)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 30, a);
            y = PolarY(GetUnitY(u), dist / 30, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 5 == 0)
        {
            Effect("Ichigosfx15.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Ichigosfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 280)
    {
        SetUnitAnimationByIndex(u, 19);
        SetUnitTimeScale(u, 0.6);
    }

    if (count == 240 || count == 260 || count == 280 || count == 300 || count == 320)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("Ichigosfx37.mdx", u, "hand right"), 1.5);
    }

    if (count == 340)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ichigosfx41.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.2);
        Effect("Ichigosfx42.mdx", GetUnitX(t), GetUnitY(t), 50, a + 20, 0, 0, 1.8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Ichigosfx43.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Ichigosfx44.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 350)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void IchigoF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    
    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("IchigoF.mp3");
        x = PolarX(GetUnitX(t), -800, a);
        y = PolarY(GetUnitY(t), -800, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 2);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx4-gold.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(40));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        x = PolarX(GetUnitX(u), -50, a);
        y = PolarY(GetUnitY(u), -50, a);
        Effect("Ichigosfx17.mdx", x, y, 120, a, 0, 90, 2, 0.8, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count <= 30)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), dist / 30, a);
        y = PolarY(GetSpecialEffectY(e), dist / 30, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 120);
    }

    if (count == 30)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 17);
        Effect("Ichigosfx34.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 120)
    {
        Effect("Ichigosfx34.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 30 || count == 50 || count == 70 || count == 90 || count == 110 || count == 130 || count == 150 || count == 170)
    {
        Effect("Ichigosfx5-yellow.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.4, 0.75));
        Effect("Ichigosfx5-yellow.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.4, 0.75));
    }

    if (count == 1 || count == 30 || count == 60 || count == 90 || count == 120 || count == 160 || count == 200)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx5-yellow.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Ichigosfx5-yellow.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 170 || count == 200 || count == 230)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("Ichigosfx21.mdx", u, "right hand"), 1.5);
    }

    if (count >= 180 && count <= 240)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 30, a);
            y = PolarY(GetUnitY(u), dist / 30, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 5 == 0)
        {
            Effect("Ichigosfx15.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Ichigosfx16.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 230)
    {
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 0.8);
    }

    if (count == 250)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ichigosfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ichigosfx33.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 255)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void IchigoT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float a2 = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 310)
    {
        if (count <= 220)
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
        }
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("IchigoT.mp3");
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
            SetUnitAnimationByIndex(u, 2);
            Effect("Ichigosfx24.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.25, 4, 255, 255, 255, 255);
            Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 4, 255, 255, 255, PercentTo255(40));
            TimeScaleEffect(dummy_effect, 0, 0.4);
            x = PolarX(GetUnitX(u), -20, a);
            y = PolarY(GetUnitY(u), -20, a);
            Effect("Ichigosfx17-red.mdx", x, y, 100, a, 0, -90, 1, 6.5, 255, 255, 255, 255);
            SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        }
        else
        {
            SoundStart("IchigoT-1.mp3");
            count = 1000;
            SaveInteger(GameHT, hid, 'coun', count);
        }
    }

    if (count == 10)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count == 1 || count == 30 || count == 60 || count == 90 || count == 120 || count == 150 || count == 180)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx22.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        Effect("Ichigosfx23.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        Effect("Ichigosfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.4, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 190)
    {
        SetUnitTimeScale(u, 1);
    }

    if (count <= 200)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.01);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) + 0.5);

        if (count % 10 == 0)
        {
            Effect("Ichigosfx25.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, GetRandomReal(1, 1.5), 1.5, 220, 64, 64, PercentTo255(GetRandomReal(40, 80)));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Ichigosfx25.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, GetRandomReal(1.35, 2.25), 1.5, 220, 64, 64, PercentTo255(GetRandomReal(40, 80)));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 200)
    {
        SaveReal(GameHT, hid, 0, a);
    }

    if (count == 220)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
    }

    if (count == 200 || count == 250 || count == 300)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
    }

    if (count >= 200 && count <= 300)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        a = LoadReal(GameHT, hid, 0);
        dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        if (dist > 180)
        {
            x = PolarX(GetSpecialEffectX(e), dist / 20, a);
            y = PolarY(GetSpecialEffectY(e), dist / 20, a);
            SetEffectXY(e, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 13 - (count - 200) * 0.05, a);
            y = PolarY(GetUnitY(t), 13 - (count - 200) * 0.05, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -160, a);
            y = PolarY(GetUnitY(t), -160, a);
            SetEffectXY(e, x, y, 0);
        }
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));

        if (count % 5 == 0)
        {
            x = PolarX(GetSpecialEffectX(e), 160, a);
            y = PolarY(GetSpecialEffectY(e), 160, a);
            Effect("Ichigosfx16.mdx", x, y, 0, a, 0, 0, 1.25, 1, 255, 255, 255, 255);
            Effect("Ichigosfx7.mdx", x, y, 50, a, 0, 0, 0.5, 1, 255, 255, 255, 255);
            Effect("Ichigosfx27.mdx", x, y, 0, a, 0, 0, 0.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 300)
    {
        a = LoadReal(GameHT, hid, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ichigosfx2.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 0.6, 2, 255, 255, 255, 255);
        Effect("Ichigosfx3.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        for (int i = 1; i < 9; i++)
        {
            x = PolarX(GetUnitX(t), 300, i * 45);
            y = PolarY(GetUnitY(t), 300, i * 45);
            Effect("Ichigosfx3.mdx", x, y, 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        }
        Effect("Ichigosfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        Effect("Ichigosfx26.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 305)
    {
        SetPauseUnit(t, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }

    if (count >= 1000)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1000)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Ichigosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 172, 0, 0, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ichigosfx14.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Ichigosfx22.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 1020 || count == 1040 || count == 1060 || count == 1080)
    {
        Effect("Ichigosfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Ichigosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 172, 0, 0, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ichigosfx22.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count >= 1000 && count <= 1100)
    {
        if (count % 5 == 0)
        {
            Effect("Ichigosfx25.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 172, 0, 0, PercentTo255(GetRandomReal(80, 100)));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
    }

    if (count == 1110)
    {
        SetUnitTimeScale(u, 2);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count == 1140 || count == 1180 || count == 1220)
    {
        SaveReal(GameHT, hid, 0, randomAngle());
        x = PolarX(GetUnitX(t), -120, LoadReal(GameHT, hid, 0));
        y = PolarY(GetUnitY(t), -120, LoadReal(GameHT, hid, 0));
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count >= 1110 && count <= 1260)
    {
        a2 = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), 15, a2);
        y = PolarY(GetUnitY(t), 15, a2);
        SetUnitXY(t, x, y, 2);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);

        if (count % 10 == 0)
        {
            SetUnitAnimation(u, "attack");
            Effect("Ichigosfx29.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 0.5, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.3);
            Effect("Ichigosfx30.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.3, 1.5, 255, 255, 255, 255);
            Effect("Ichigosfx7.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Ichigosfx27.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Ichigosfx6.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        }
    }

    if (count == 1260)
    {
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 1.3);
    }

    if (count == 1270)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx28.mdx", GetUnitX(t), GetUnitY(t), 50, a + 90, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ichigosfx31.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 3, 1.5, 255, 255, 255, 255);
        Effect("Ichigosfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, -90, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 1275)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 360, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void IchigoR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("IchigoR.mp3");
        x = PolarX(GetUnitX(t), -800, a);
        y = PolarY(GetUnitY(t), -800, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 2);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx4-gold.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 4.5, 255, 255, 255, 255);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 4, 255, 255, 255, PercentTo255(40));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 1 || count == 50 || count == 100 || count == 150 || count == 200)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx5-yellow.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Ichigosfx6-yellow.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count <= 200)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.01);
    }

    if (count == 200)
    {
        SetUnitAnimationByIndex(u, 1);
    }

    if (count >= 200 && count <= 240)
    {
        x = PolarX(GetUnitX(u), 25, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 25, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);

        if (count % 5 == 0)
        {
            Effect("Ichigosfx15.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Ichigosfx16.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 240)
    {
        SetUnitAnimationByIndex(u, 9);
        SetUnitFacing(u, a);
        Effect("Ichigosfx4-gold.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 2.5, 255, 255, 255, 255);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 245)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count == 240 || count == 260 || count == 280 || count == 300 || count == 320)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Ichigosfx5-yellow.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Ichigosfx6-yellow.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        DestroyEffectTimed(AddSpecialEffectTarget("Ichigosfx21.mdx", u, "right weapon"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Ichigosfx21.mdx", u, "left weapon"), 1);
    }

    if (count == 330)
    {
        SetUnitTimeScale(u, 1);
        Effect("Ichigosfx17.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
    }

    if (count >= 330 && count <= 370)
    {
        e = LoadEffectHandle(GameHT, hid, 1);
        x = PolarX(GetUnitX(t), 15, a);
        y = PolarY(GetUnitY(t), 15, a);
        SetUnitXY(t, x, y, 2);
        x = PolarX(GetUnitX(t), -70, a);
        y = PolarY(GetUnitY(t), -70, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 100);

        if (count % 5 == 0)
        {
            Effect("Ichigosfx6-yellow.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Ichigosfx15.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Ichigosfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 370)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ichigosfx18.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Ichigosfx19.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 220, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ichigosfx14.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Ichigosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Ichigosfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 375)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A025')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void IchigoE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    effect e = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    
    if (count == 1)
    {
        SoundStart("IchigoE.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        Effect("Ichigosfx11.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3.5, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x2 = PolarX(GetSpecialEffectX(e), dist / 12, a);
        y2 = PolarY(GetSpecialEffectY(e), dist / 12, a);
        SetEffectXY(e, x2, y2, 1);
        SetSpecialEffectHeight(e, 50);

        if (count % 3 == 0)
        {
            Effect("Ichigosfx12.mdx", x2, y2, 0, randomAngle(), 0, 0, 1, 1, 255, 220, 0, PercentTo255(70));
        }
    }

    if (count == 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetSpecialEffectX(e), GetSpecialEffectY(e));
        Effect("Ichigosfx13.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 50, a, 0, 0, 2, 2, 255, 220, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ichigosfx2-0.5x.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetSpecialEffectX(e), GetSpecialEffectY(e), 500, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A024') * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void IchigoW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("IchigoW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 3);
        Effect("Ichigosfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Ichigosfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Ichigosfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 80)
    {
        SoundStart("IchigoW-1.mp3");
    }

    if (count == 100)
    {
        SetUnitAnimationByIndex(u, 1);
    }

    if (count >= 100 && count <= 145)
    {
        x = PolarX(GetUnitX(t), 12, a);
        y = PolarY(GetUnitY(t), 12, a);
        SetUnitXY(t, x, y, 2);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);

        if (count % 5 == 0)
        {
            Effect("Ichigosfx6-x2.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 0.6, 1, 255, 255, 255, 255);
        }
    }

    if (count == 145)
    {
        SetUnitAnimationByIndex(u, 9);
        RushSlide(u, a, 260, 0.2, 0.02, false);
    }

    if (count == 160)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Ichigosfx8.mdx", GetUnitX(t), GetUnitY(t), 0, GetUnitFacing(u), 0, 0, 1.4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ichigosfx6.mdx", GetUnitX(t), GetUnitY(t), 50, GetUnitFacing(u), 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Ichigosfx9.mdx", GetUnitX(t), GetUnitY(t), 0, GetUnitFacing(u), 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ichigosfx7.mdx", GetUnitX(t), GetUnitY(t), 0, GetUnitFacing(u), 0, 0, 2, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 165)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A023')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void IchigoQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("IchigoQ.mp3");
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 1.5);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A022'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        x = PolarX(x, -50, a);
        y = PolarY(y, -50, a);
        Effect("Ichigosfx1.mdx", x, y, 0, a, 0, 0, 0.8, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AliceD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    unit d = nil;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("AliceD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 10);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Alicesfx34.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);

        g1 = CreateGroup();
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        SaveGroupHandle(GameHT, hid, 'grp+', g1);
    }

    if (count <= 50)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.05);
    }

    if (count == 50)
    {
        SoundStart("AliceD-1.mp3");
    }

    if (count == 60)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(e, "death");
        SetSpecialEffectTimeScale(e, 0.9);
    }

    if (count == 100)
    {
        SoundStart("AliceSE8.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Alicesfx32.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Alicesfx15.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, false);
            SetInvulUnit(d, false);
        }
        DestroyGroup(g1);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 8 * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AliceF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AliceF.mp3");
        SetUnitTimeScale(u, 2);
    }

    if (count == 10 || count == 30 || count == 50 || count == 70 || count == 90 || count == 110 || count == 130)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        a2 = randomAngle();
        x = PolarX(GetUnitX(t), 120, a2);
        y = PolarY(GetUnitY(t), 120, a2);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(3, 4));
        Effect("alicesfx20.mdx", GetUnitX(t), GetUnitY(t), 150, a, -90, 0, 1, 1.5, 213, 204, 73, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Alicesfx29.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Alicesfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1.5, 213, 204, 73, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Alicesfx30.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 1.5, 255, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
        Effect("Alicesfx31.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1.5, 255, 255, 255, PercentTo255(70));
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        RushSlide(t, a, 240, 0.3, 0.02, true);
    }

    if (count == 140 || count == 150 || count == 160 || count == 170 || count == 180)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, GetRandomInt(3, 4));
        Effect("Alicesfx20.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 1, 1.5, 213, 204, 73, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        Effect("Alicesfx29.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
        Effect("Alicesfx30.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1, 1.5, 255, 255, 255, PercentTo255(60));
        Effect("Alicesfx4.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, GetRandomReal(1.5, 2), 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1.25)); 
    }

    if (count >= 140 && count <= 180)
    {
        x = PolarX(GetUnitX(t), 10, a);
        y = PolarY(GetUnitY(t), 10, a);
        SetUnitXY(t, x, y, 2);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count >= 180 && count <= 220)
    {
        x = PolarX(GetUnitX(t), 20, a);
        y = PolarY(GetUnitY(t), 20, a);
        SetUnitXY(t, x, y, 2);
    }

    if (count == 190)
    {
        SoundStart("AliceF-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 0.7);
        Effect("Alicesfx12.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count >= 200 && count <= 230)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 5 == 0)
        {
            Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Alicesfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Alicesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 230)
    {
        SoundStart("AliceSE7.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Alicesfx32.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Alicesfx33.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
    }

    if (count == 240)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AliceT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("AliceT.mp3");
        visionArea(GetOwningPlayer(u), 1500, 6, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 8);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 5, 255, 255, 255, PercentTo255(50));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Alicesfx22.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Alicesfx23.mdx", GetUnitX(u), GetUnitY(u), 200, a, 0, 0, 2.5, 6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        AnimEffect(dummy_effect, 1, 1);
        TimeScaleEffect(dummy_effect, 1, 1);
        AnimEffect(dummy_effect, 2, 6);
        for (int i = 1; i < 10; i++)
        {
            x = PolarX(GetUnitX(u), 350, i * 40);
            y = PolarY(GetUnitY(u), 350, i * 40);
            Effect("Alicesfx24.mdx", x, y, GetRandomReal(0, 50), randomAngle(), 0, 0, 0.6, 2, 255, 255, 255, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, GetRandomInt(2, 4));
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }

        if (GetOwningPlayer(u) == GetLocalPlayer())
        {
            CinematicFilterGenericBJ(2.5, BLEND_MODE_BLEND, "SkillImage\\AliceT.blp", 100, 100, 100, 0, 100, 100, 100, 100);
        }

        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 10)
    {
        for (int i = 1; i < 5; i++)
        {
            Effect("Alicesfx25.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), -90, 0, 3.5 + 0.5 * i, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.4 + 0.05 * i);
        }
    }

    if (count == 15)
    {
        Effect("Alicesfx26.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 1 || count == 20 || count == 30 || count == 50)
    {
        Effect("Alicesfx20.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(1, 1.75), 2, 255, 178, 102, PercentTo255(80));
    }

    if (count == 50)
    {
        Effect("Alicesfx27.mdx", GetUnitX(u), GetUnitY(u), 200, a, 0, 0, 1, 4.4, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
    }

    if (count >= 60 && count <= 260)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        for (int i = 0; i < 9; i++)
        {
            x = PolarX(GetUnitX(u), 50 + 170 * i, a);
            y = PolarY(GetUnitY(u), 50 + 170 * i, a);
            GroupEnumUnitsInRange(g2, x, y, 300, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d))
                {
                    if (!IsUnitInGroup(d, g1))
                    {
                        UnitDamageTarget(u, d, 15 * GetHeroAgi(u, true), 200);
                        CC_Unit(d, "stun", 0.1);
                        GroupAddUnit(g1, d);
                    }
                }
            }

            if (count == 60 || count % 25 == 0)
            {
                Effect("Alicesfx28.mdx", x, y, 0, a, 0, 0, 1.3, 1, 255, 255, 255, 255);
            }
        }
        DestroyGroup(g2);
        if (count == 260)
        {
            DestroyGroup(g1);
        }
        else
        {
            GroupClear(g1);
        }
    }

    if (count == 260)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AliceR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;

    count++; 
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 100)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("AliceR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 10);
        Effect("Alicesfx18.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.3);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 5, 255, 255, 255, PercentTo255(70));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Alicesfx19.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 5, 255, 255, 255, 255);
        Effect("Alicesfx12.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.6, 1));
        Effect("Alicesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, GetRandomReal(1.5, 2.5), 1, 255, 255, 255, 255);
        Effect("Alicesfx20.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(1, 2), 2, 255, 178, 102, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
        {
            CinematicFilterGenericBJ(2.5, BLEND_MODE_BLEND, "SkillImage\\AliceR.blp", 100, 100, 100, 0, 100, 100, 100, 100);
        }
        SaveReal(GameHT, hid, 0, GetUnitX(t));
        SaveReal(GameHT, hid, 1, GetUnitY(t));
    }

    if (count <= 100)
    {
        if (count % 10 == 0)
        {
            Effect("Alicesfx12.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.6, 1));
            Effect("Alicesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, GetRandomReal(1.5, 2.5), 1, 255, 255, 255, 255);
            Effect("Alicesfx20.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(1, 2), 2, 255, 178, 102, PercentTo255(80));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
    }

    if (count == 100)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
    }

    if (count == 100 || count == 130 || count == 160 || count == 190 || count == 220)
    {
        SoundStart("AliceSE6.mp3");
    }

    if (count >= 100 && count <= 250)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 500, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, (9 + GetUnitAbilityLevel(u, 'A04A')) * GetHeroAgi(u, true), 150);
                CC_Unit(d, "stun", 0.1);
            }
        }
        DestroyGroup(g1);

        if (count % 5 == 0)
        {
            a2 = randomAngle();
            x = PolarX(x, GetRandomReal(50, 250), a2);
            y = PolarY(y, GetRandomReal(50, 250), a2);
            Effect("alicesfx21.mdx", x, y, 300, a2, 0, 0, 0.5, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.25);
        }
    }

    if (count == 250)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AliceE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AliceE.mp3");
        SoundStart("AliceSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Alicesfx11.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 0.75);
        Effect("Alicesfx12.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Alicesfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count <= 30)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 20, a);
            y = PolarY(GetUnitY(u), dist / 20, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 4 == 0)
        {
            Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Alicesfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a,  0, 0, 1.5, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.25);
            Effect("Alicesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        }
    }

    if (count == 25)
    {
        Effect("Alicesfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1.5, 255, 178, 102, 255);
        Effect("Alicesfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1.75, 1.5, 255, 178, 102, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.95);
        Effect("Alicesfx13.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1.5, 1.5, 255, 178, 102, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Alicesfx14.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 30)
    {
        SoundStart("AliceE-1.mp3");
        SoundStart("AliceSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Alicesfx15.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Alicesfx16.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Alicesfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 35)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A049') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 400, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AliceW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AliceW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 0.6);
        Effect("Alicesfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count <= 20)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 3 == 0)
        {
            Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Alicesfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.25);
        }
    }

    if (count == 20)
    {
        SetUnitTimeScale(u, 1.5);
    }

    if (count == 20 || count == 30 || count == 40 || count == 50)
    {
        SetUnitAnimationByIndex(u, GetRandomInt(3, 4));
    }

    if (count == 30 || count == 40)
    {
        SoundStart("AliceSE2.mp3");
    }

    if (count >= 20 && count <= 60)
    {
        x = PolarX(GetUnitX(t), 10, a);
        y = PolarY(GetUnitY(t), 10, a);
        SetUnitXY(t, x, y, 2);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);

        if (count % 4 == 0)
        {
            Effect("Alicesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Alicesfx7.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1.5, 2.5), 1, 255, 178, 102, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
            Effect("Alicesfx7.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), GetRandomReal(-40, -20), 0, GetRandomReal(1.5, 2.5), 1, 255, 178, 102, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
            Effect("Alicesfx7.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), GetRandomReal(20, 40), 0, GetRandomReal(1.5, 2.5), 1, 255, 178, 102, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
        }
    }

    if (count == 60)
    {
        SoundStart("AliceSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 1.4);
        Effect("Alicesfx8.mdx", GetUnitX(u), GetUnitY(u), 100, a + 220, 0, 0, 2, 1.5, 255, 178, 102, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.3);
        Effect("Alicesfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 178, 102, 255);
        Effect("Alicesfx10.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 65)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A048')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 400, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AliceQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("AliceQ.mp3");
        SoundStart("AliceSE1.mp3");
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 1.5);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1400, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A047'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12) { DestroyGroup(g1); }

        if (count % 2 == 0)
        {
            Effect("Alicesfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Alicesfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Alicesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 3, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
            Effect("Alicesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.4, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("Alicesfx5.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1.3, 1.5, 255, 204, 153, PercentTo255(GetRandomReal(60, 80)));
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ShanaD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ShanaD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 20);
        SetUnitTimeScale(u, 0.9);
        Effect("Shanasfx25.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.1);
    }

    if (count == 35)
    {
        SoundStart("ShanaD-1.mp3");
        SetUnitTimeScale(u, 0);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
    }

    if (count == 37 || count == 39 || count == 41 || count == 43 || count == 45 || count == 47 || count == 49)
    {
        Effect("Shanasfx9.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count >= 35 && count <= 50)
    {
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 100, 0);
    }

    if (count == 50)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 19);
        SetUnitTimeScale(u, 1);
        SetUnitXY(u, GetUnitX(t), GetUnitY(t), 0);
    }

    if (count == 52 || count == 54 || count == 56 || count == 58 || count == 60 || count == 62 || count == 64)
    {
        Effect("Shanasfx9.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, -180, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count >= 50 && count <= 65)
    {
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 100, 0);
    }

    if (count == 65)
    {
        SoundStart("ShanaD-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Shanasfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.75, 2, 255, 255, 255, 255);
        Effect("Shanasfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 4, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        for (int i = 1; i < 11; i++)
        {
            a = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(50, 450), a);
            y = PolarY(GetUnitY(t), GetRandomReal(50, 450), a);
            Effect("Shanasfx2.mdx", x, y, 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
        }
    }

    if (count == 75)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(t), GetUnitY(t), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, t, 8 * GetHeroInt(u, true));
            }
        }
        DestroyGroup(g1);
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ShanaF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ShanaR-1.mp3");
        SoundStart("ShanaSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        Effect("Shanasfx22.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
    }

    if (count == 1 || count == 4 || count == 8 || count == 12)
    {
        Effect("Shanasfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 20)
    {
        SoundStart("ShanaF.mp3");
        SetUnitTimeScale(u, 1.5);
    }

    if (count == 40 || count == 60 || count == 85 || count == 100)
    {
        a = a + GetRandomReal(-50, 50);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
    }

    if (count <= 120)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count >= 10)
        {
            if (count % 10 == 0)
            {
                visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
                SetUnitAnimation(u, "attack");
                x = PolarX(GetUnitX(t), -100, a);
                y = PolarY(GetUnitY(t), -100, a);
                Effect("Shanasfx20.mdx", x, y, 100, a + GetRandomReal(-50, 50), 0, 0, 2.5, 2, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
                Effect("Shanasfx20.mdx", x, y, 100, a, 0, GetRandomReal(-50, 50), 3, 2, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
                Effect("shanasfx19.mdx", GetUnitX(t), GetUnitY(t), 100, a + GetRandomReal(-50, 50), 0, 0, 1, 1, 255, 255, 255, 255);
                Effect("shanasfx23.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
                Effect("Shanasfx11.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
                Effect("Shanasfx17.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, GetRandomReal(-50, 50), 1, 1.5, 218, 82, 56, 255);
            }
        }
    }

    if (count == 120)
    {
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitFlyHeight(t, 600, 2000);
        RushSlide(t, a, 600, 0.3, 0.02, true);
    }

    if (count == 135)
    {
        SetUnitFlyHeight(u, 600, 0);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 145)
    {
        SetUnitFlyHeight(u, 0, 2000);
        SetUnitFlyHeight(t, 0, 2000);
    }

    if (count == 155)
    {
        SoundStart("ShanaSE3.mp3");
        Effect("Shanasfx18.mdx", GetUnitX(u), GetUnitY(u), 600, a + 180, -180, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Shanasfx8.mdx", GetUnitX(t), GetUnitY(t), 600, a, 0, 0, 1, 2, 255, 255, 255, 255);
    }

    if (count == 160)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Shanasfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Shanasfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 165)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ShanaT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    float dist = .0f;
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("ShanaT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 19);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Shanasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
    }

    if (count == 10)
    {
        Effect("Shanasfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Shanasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
        Effect("Shanasfx13.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 2);
    }

    if (count == 20)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count >= 10 && count <= 75)
    {
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                a = Angle(GetUnitX(d), GetUnitY(d), GetUnitX(u), GetUnitY(u));
                dist = Distance(GetUnitX(d), GetUnitY(d), GetUnitX(u), GetUnitY(u));
                if (dist > 160)
                {
                    x = PolarX(GetUnitX(d), 7, a);
                    y = PolarY(GetUnitY(d), 7, a);
                    SetUnitXY(d, x, y, 2);
                }
                else
                {
                    x = PolarX(GetUnitX(u), -140, a);
                    y = PolarY(GetUnitY(u), -140, a);
                    SetUnitXY(d, x, y, 2);
                }
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);
    }

    if (count == 75)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("shanasfx14.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Shanasfx15.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 15 * GetHeroInt(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ShanaR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ShanaR.mp3");
        SoundStart("ShanaR-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Shanasfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Shanasfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 1);
        Effect("Shanasfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 2, 255, 0, 0, 255);
    }

    if (count == 50)
    {
        SoundStart("ShanaR-2.mp3");
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 1.5);
    }

    if (count == 65)
    {
        SoundStart("ShanaR-3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Shanasfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Shanasfx11.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 90)
    {
        SoundStart("ShanaR-4.mp3");
        SetUnitAnimationByIndex(u, 5);
    }

    if (count == 100)
    {
        SoundStart("ShanaR-5.mp3");
        RushSlide(t, a, 400, 0.4, 0.02, true);
    }

    if (count == 104 || count == 108 || count == 112 || count == 116)
    {
        x = PolarX(GetUnitX(t), -50, a);
        y = PolarY(GetUnitY(t), -50, a);
        Effect("shanasfx9.mdx", x, y, 100, a, -90, 0, 1, 1.5, 255, 255, 255, 255);
    }

    if (count == 120)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 20);
    }

    if (count == 140)
    {
        SoundStart("ShanaR-6.mp3");
        SetUnitAnimationByIndex(u, 16);
        SetUnitTimeScale(u, 1);
    }

    if (count == 190)
    {
        SoundStart("ShanaR-7.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        for (int i = 1; i < 11; i++)
        {
            x = PolarX(GetUnitX(t), 140 * i, a);
            y = PolarY(GetUnitY(t), 140 * i, a);
            Effect("shanasfx10.mdx", x, y, 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("shanasfx11.mdx", x, y, 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }
    }

    if (count == 195)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        if (GetUnitAbilityLevel(u, 'B00E') > 0)
        {
            UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A02Y')) * GetHeroInt(u, true) * 1.1);
        }
        else
        {
            UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A02Y')) * GetHeroInt(u, true));
        }
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ShanaW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ShanaW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Shanasfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Shanasfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 120, a);
        y = PolarY(GetUnitY(t), 120, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 1.25);
        Effect("Shanasfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 15)
    {
        SoundStart("ShanaSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Shanasfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Shanasfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 20)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A02W')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 340, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ShanaQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("shanaQ.mp3");
        SoundStart("ShanaSE1.mp3");
        SetUnitAnimationByIndex(u, 13);
        SetUnitTimeScale(u, 2);
        Effect("Shanasfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A02V'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count % 2 == 0)
        {
            Effect("shanasfx2.mdx", x, y, 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }

        if (count == 12)
        {
            DestroyGroup(g1);
        }
    }

    if (count == 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(e, "death");
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AkameD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AkameD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 15);
    }

    if (count <= 30)
    {
        x = PolarX(GetUnitX(u), -12, a);
        y = PolarY(GetUnitY(u), -12, a);
        SetUnitXY(u, x, y, 0);
        if (count > 20)
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 15, 0);
        }
        else
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 8, 0);
        }
    }

    if (count == 30)
    {
        SetUnitAnimationByIndex(u, 14);
        SetUnitFlyHeight(u, 0, 0);
        Effect("Akamesfx10.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Akamesfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Akamesfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 50)
    {
        SoundStart("AkameSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        Effect("akamesfx19.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("akamesfx16.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Akamesfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 60)
    {
        SoundStart("AkameD-1.mp3");
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AkameF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AkameSE4.mp3");
        Effect("akamesfx2.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 12);
        SetUnitTimeScale(u, 1.2);
    }

    if (count == 10)
    {
        SoundStart("AkameSE7.mp3");
        Effect("akamesfx14.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Akamesfx17.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 600, 0.5, 0.02, true);
    }

    if (count == 20)
    {
        SoundStart("AkameF.mp3");
    }

    if (count >= 20 && count <= 60)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 50)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -30, a);
            y = PolarY(GetUnitY(t), -30, a);
            SetUnitXY(u, x, y, 0);
        }
        if (count > 45)
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 20, 0);
        }
        else
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 12, 0);
        }
    }

    if (count == 60)
    {
        SoundStart("AkameSE8.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitFlyHeight(u, 0, 0);
        Effect("Akamesfx15.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("Akamesfx16.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Akamesfx18.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Akamesfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 70)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AkameT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SetUnitAnimationByIndex(u, 7);
    }

    if (count == 10)
    {
        SoundStart("AkameT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        UnitHilang(u, true);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 4, 255, 255, 255, PercentTo255(80));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Akame.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 9);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Akame.mdx", GetUnitX(t), GetUnitY(t), 0, a + 180, 0, 0, 1, 4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 9);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        SaveReal(GameHT, hid, 0, a);
        SaveReal(GameHT, hid, 1, a + 180);
    }

    if (count <= 150)
    {
        for (int i = 0; i < 2; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            SaveReal(GameHT, hid, i, LoadReal(GameHT, hid, i) + 4);
            x = PolarX(GetUnitX(t), count * 5, LoadReal(GameHT, hid, i));
            y = PolarY(GetUnitY(t), count * 5, LoadReal(GameHT, hid, i));
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectYaw(e, LoadReal(GameHT, hid, i) + 90);
            SetSpecialEffectHeight(e, 0);
            visionArea(GetOwningPlayer(u), 800, 3, x, y);

            if (count % 5 == 0)
            {
                Effect("Akamesfx2.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 1, 1, 255, 255, 255, 255);
            }
        }
    }

    if (count == 150)
    {
        SoundStart("AkameT-1.mp3");
        for (int i = 0; i < 2; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            a = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
            SetSpecialEffectAnimationByIndex(e, 3);
            SetSpecialEffectYaw(e, a);
        }
    }

    if (count >= 150 && count <= 170)
    {
        for (int i = 0; i < 2; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            a = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
            dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
            if (dist > 140)
            {
                x = PolarX(GetSpecialEffectX(e), dist / 15, a);
                y = PolarY(GetSpecialEffectY(e), dist / 15, a);
                SetEffectXY(e, x, y, 0);
            }
            else
            {
                x = PolarX(GetUnitX(t), -120, a);
                y = PolarY(GetUnitY(t), -120, a);
                SetEffectXY(e, x, y, 0);
            }
            SetSpecialEffectHeight(e, 0);

            if (count % 4 == 0)
            {
                Effect("Akamesfx2.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 1, 1, 255, 255, 255, 255);
            }
        }
    }

    if (count == 165)
    {
        for (int i = 0; i < 2; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            SetSpecialEffectAnimationByIndex(e, 11);
        }
    }

    if (count == 180)
    {
        SoundStart("AkameSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Akamesfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Akamesfx13.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 190)
    {
        UnitHilang(u, false);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AkameR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SetUnitAnimationByIndex(u, 7);
    }

    if (count == 10)
    {
        SoundStart("AkameR.mp3");
        Effect("Akamesfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 10 || count == 20 || count == 30 || count == 40 || count == 50)
    {
        Effect("Akamesfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1, 210, 0, 0, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Akamesfx10.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1, 1, 210, 0, 0, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count >= 10 && count <= 50)
    {
        x = PolarX(GetUnitX(t), 15, a);
        y = PolarY(GetUnitY(t), 15, a);
        SetUnitXY(t, x, y, 2);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);

        if (count % 4 == 0)
        {
            Effect("Akamesfx11.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 50)
    {
        SetUnitAnimationByIndex(u, 11);
    }

    if (count == 70)
    {
        SoundStart("AkameSE5.mp3");
        Effect("Akamesfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Akamesfx13.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 80)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        if (GetUnitAbilityLevel(u, 'B00C') > 0)
        {
            UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A02J')) * GetHeroAgi(u, true) * 1.1);
        }
        else
        {
            UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A02J')) * GetHeroAgi(u, true));
        }
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AkameE2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AkameE2.mp3");
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacing(u, a);
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 0.9);
    }

    if (count == 20)
    {
        SoundStart("YomiSE7.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yomisfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yomisfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yomisfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 25)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A08G') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AkameE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    
    count++;
    SaveInteger(GameHT, hid, 'coun', count);

    if (count == 1)
    {
        SoundStart("AkameE.mp3");
        SoundStart("AkameE-1.mp3");
        Effect("Akamesfx5.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("Akamesfx6.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 3, 2, 255, 255, 255, 255);
        Effect("Akamesfx7.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Akamesfx8.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 2, 2, 255, 255, 255, 255);
        DisableAbility(GetUnitAbility(u, 'A02I'), true, true);
        UnitAddAbility(u, 'A08G');
        UnitMakeAbilityPermanent(u, true, 'A08G');
        SetUnitAbilityLevel(u, 'A08G', GetUnitAbilityLevel(u, 'A02I'));
    }

    if (count > 1 && (GetUnitAbilityLevel(u, 'B00C') == 0 || !IsUnitAlive(u)))
    {
        EnableAbility(GetUnitAbility(u, 'A02I'), true, true);
        UnitRemoveAbility(u, 'A08G');
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AkameW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 14);
        SetUnitTimeScale(u, 2);
    }

    if (count == 10)
    {
        SoundStart("AkameW.mp3");
        SoundStart("AkameSE3.mp3");
        Effect("Akamesfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 20)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        for (int i = 0; i < 6; i++)
        {
            a = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(50, 150), a);
            y = PolarY(GetUnitY(t), GetRandomReal(50, 150), a);
            Effect("Akamesfx3.mdx", x, y, 200, a, GetRandomReal(-60, -40), 0, GetRandomReal(0.8, 1.2), 1, 255, 255, 255, 255);
            x = PolarX(GetUnitX(t), GetRandomReal(50, 150), a);
            y = PolarY(GetUnitY(t), GetRandomReal(50, 150), a);
            Effect("Akamesfx4.mdx", x, y, 200, a, GetRandomReal(-60, -40), 0, GetRandomReal(1.5, 2), 1, 255, 255, 255, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, GetRandomInt(0, 3));
        }
    }

    if (count == 25)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A02H')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AkameQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("AkameQ.mp3");
        SoundStart("AkameSE1.mp3");
        SetUnitAnimationByIndex(u, 11);
        SetUnitTimeScale(u, 1.75);
        DestroyEffectTimed(AddSpecialEffectTarget("Astasfx1.mdx", u, "chest"), 1);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 7)
    {
        SoundStart("AkameSE2.mp3");
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1400, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A02G'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            x = PolarX(GetUnitX(u), -50, a);
            y = PolarY(GetUnitY(u), -50, a);
            Effect("Akamesfx1.mdx", x, y, 100, a, -90, 0, 1.2, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.3);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AstaD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AstaD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 11);
        Effect("Hydesfx13.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Saltersfx33.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 4, 103, 6, 3, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count <= 145)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 5, a);
            y = PolarY(GetUnitY(t), 5, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
        e = LoadEffectHandle(GameHT, hid, 0);
        SetEffectXY(e, GetUnitX(u), GetUnitY(u), 0);
        SetSpecialEffectHeight(e, 0);

        if (count == 20 || count == 40 || count == 60 || count == 80 || count == 100 || count == 120 || count == 140)
        {
            Effect("Saltersfx12.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
        }

        if (count == 25 || count == 45 || count == 65 || count == 85 || count == 105 || count == 125 || count == 145)
        {
            if (GetRandomInt(1, 2) == 1)
            {
                SoundStart("AstaSE2.mp3");
            }
            else if (GetRandomInt(1, 2) == 1)
            {
                SoundStart("AstaSE3.mp3");
            }
            else
            {
                SoundStart("AstaSE4.mp3");
            }
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
            Effect("Saltersfx38.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Saltersfx25.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
            if (GetRandomInt(1, 2) == 1)
            {
                Effect("Saltersfx32.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, 6, 2, 255, 255, 255, 255);
            }
            else
            {
                Effect("Saltersfx32.mdx", GetUnitX(u), GetUnitY(u), 100, a + GetRandomReal(-90, 90), 0, 40, 6, 2, 255, 255, 255, 255);
            }
            Effect("Saltersfx34.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 8, 2, 255, 255, 255, 255);
            Effect("Saltersfx35.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
            Effect("Hydesfx18.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), GetRandomReal(-20, 20), 0, 1, 2, 128, 12, 6, PercentTo255(80));
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
            Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
            if (GetRandomInt(1, 2) == 1)
            {
                SetSpecialEffectAnimationByIndex(dummy_effect, 1);
            }
            else
            {
                SetSpecialEffectAnimationByIndex(dummy_effect, 3);
            }
        }
    }
    
    if (count == 145)
    {
        RushSlide(t, a, 360, 0.4, 0.02, true);
    }

    if (count == 150)
    {
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 1.5);
    }

    if (count == 155)
    {
        DestroyEffectTimed(LoadEffectHandle(GameHT, hid, 0), .01f);
        Effect("Saltersfx40.mdx", GetUnitX(u), GetUnitY(u), 200, a, 0, 90, 5, 2, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count >= 155 && count <= 185)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        if (dist > 120)
        {
            x = PolarX(GetSpecialEffectX(e), dist / 10, a);
            y = PolarY(GetSpecialEffectY(e), dist / 10, a);
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectHeight(e, 50);
        }
        else
        {
            x = PolarX(GetUnitX(t), 5, a);
            y = PolarY(GetUnitY(t), 5, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -100, a);
            y = PolarY(GetUnitY(t), -100, a);
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectHeight(e, 50);
        }

        if (count % 5 == 0)
        {
            Effect("Saltersfx39.mdx", x, y, 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        }
    }

    if (count == 185)
    {
        SoundStart("AstaSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(e, "death");
        Effect("Saltersfx34.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Saltersfx35.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Saltersfx2.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Saltersfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx14.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AstaF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("AstaF.mp3");
        SetUnitAnimationByIndex(u, 29);
        Effect("Muramasasfx54.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 2, 255, 0, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Muramasasfx55.mdx", GetUnitX(u), GetUnitY(u), 100, a + 90, -45, 0, 1, 1.5, 255, 0, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Muramasasfx55.mdx", GetUnitX(u), GetUnitY(u), 100, a + 90, 45, 0, 1, 1.5, 255, 0, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Muramasasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 255, 0, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.3);
        Effect("Gokusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 2, 255, 0, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Gokusfx4.mdx", GetUnitX(u), GetUnitY(u), 10, a, -90, 0, 2.5, 1.5, 255, 0, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Gokusfx12.mdx", GetUnitX(u), GetUnitY(u), 30, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        g1 = CreateGroup();
        g2 = CreateGroup();
        for (int i = 0; i < 9; i++)
        {
            x = PolarX(GetUnitX(u), 50 + 190 * i, a);
            y = PolarY(GetUnitY(u), 50 + 190 * i, a);
            GroupEnumUnitsInRange(g2, x, y, 350, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    Effect("Hutaosfx4.mdx", GetUnitX(d), GetUnitY(d), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
                    SetSpecialEffectTimeScale(dummy_effect, 0.5);
                    SetPauseUnit(d, true);
                    SetInvulUnit(d, true);
                    GroupAddUnit(g1, d);
                }
            }
        }
        DestroyGroup(g2);
        SaveGroupHandle(GameHT, hid, 'grp+', g1);
        RushSlide(u, a + 180, 240, 0.7, 0.02, true);
    }

    if (count == 2 || count == 7 || count == 13 || count == 19 || count == 24 || count == 30 || count == 36)
    {
        Effect("Hutaosfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count == 15)
    {
        for (int i = 0; i < 5; i++)
        {
            x = PolarX(GetUnitX(u), 100 + 360 * i, a);
            y = PolarY(GetUnitY(u), 100 + 360 * i, a);
            Effect("Hutaosfx9.mdx", x, y, 0, a, 0, 0, 1.7, 2, 255, 255, 255, 255);
        }
    }

    if (count == 25)
    {
        for (int i = 0; i < 5; i++)
        {
            x = PolarX(GetUnitX(u), 100 + 360 * i, a);
            y = PolarY(GetUnitY(u), 100 + 360 * i, a);
            Effect("Hutaosfx13.mdx", x, y, 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            Effect("Hydesfx10.mdx", x, y, 0, a, 0, 0, 0.9, 2, 255, 255, 255, 255);
        }
    }

    if (count == 35)
    {
        for (int i = 0; i < 5; i++)
        {
            x = PolarX(GetUnitX(u), 100 + 360 * i, a);
            y = PolarY(GetUnitY(u), 100 + 360 * i, a);
            visionArea(GetOwningPlayer(u), 1200, 3, x, y);
            Effect("Hutaosfx5.mdx", x, y, 0, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
            Effect("Astasfx4.mdx", x, y, 0, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        }
    }

    if (count < 40)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+'); 
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, true);
            SetInvulUnit(d, true);
        }
    }

    if (count == 40)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, false);
            SetInvulUnit(d, false);
        }
        DestroyGroup(g1);

        g1 = CreateGroup();
        g2 = CreateGroup();
        for (int i = 0; i < 9; i++)
        {
            x = PolarX(GetUnitX(u), 50 + 200 * i, a);
            y = PolarY(GetUnitY(u), 50 + 200 * i, a);
            GroupEnumUnitsInRange(g2, x, y, 350, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 11 * GetHeroStr(u, true));
                    IssueImmediateOrderById(d, 851972);
                    GroupAddUnit(g1, d);
                }
            }
        }
        DestroyGroup(g1);
        DestroyGroup(g2);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AstaT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("AstaT.mp3");
        x = PolarX(GetUnitX(t), -1000, a);
        y = PolarY(GetUnitY(t), -1000, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 1);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 10, 255, 255, 255, PercentTo255(80));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count <= 450)
    {
        if (count <= 200)
        {
            x = PolarX(GetUnitX(u), 2, a);
            y = PolarY(GetUnitY(u), 2, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 10 == 0)
        {
            SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1);
            Effect("Astasfx3.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1 + count * 0.012, 1, 255, 255, 255, 255);
            Effect("Astasfx2.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5 + count * 0.007, 1, 76, 4, 4, 255);
            if (count >= 200 && LoadInteger(GameHT, hid, 0) >= 2)
            {
                SaveInteger(GameHT, hid, 0, 0);
                Effect("Astasfx4.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1 + (count-200) * 0.01, 1, 255, 255, 255, 255);
            }
        }
    }

    if (count == 200)
    {
        SetUnitAnimationByIndex(u, 10);
        Effect("Hydesfx20.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 4.5, 255, 255, 255, 255);
    }

    if (count == 450)
    {
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 17);
        Effect("Hydesfx13.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Hydesfx16.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1.5, 1.5, 76, 4, 4, 255);
        Effect("Hydesfx27.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count >= 460 && count <= 475)
    {
        x = PolarX(GetUnitX(u), 80, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 80, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 470)
    {
        SoundStart("AstaSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hydesfx3.mdx", GetUnitX(t), GetUnitY(t), 0, GetUnitFacing(u) + 25, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Hydesfx3.mdx", GetUnitX(t), GetUnitY(t), 0, GetUnitFacing(u) - 25, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Saltersfx34.mdx", GetUnitX(t), GetUnitY(t), 0, GetUnitFacing(u), 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Saltersfx18.mdx", GetUnitX(t), GetUnitY(t), 0, GetUnitFacing(u), 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
    }

    if (count == 480)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AstaR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AstaR.mp3");
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 10);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
    }

    if (count == 1 || count == 10 || count == 20 || count == 30 || count == 40 || count == 50 || count == 60 || count == 70)
    {
        Effect("Astasfx2.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 1.5, 76, 4, 4, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        Effect("Kianasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 0.8, 1.5, 76, 4, 4, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Kianasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.3, 1.5, 76, 4, 4, PercentTo255(80));
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Kianasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.55, 1.5, 76, 4, 4, PercentTo255(80));
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Kianasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2.15, 1.5, 76, 4, 4, PercentTo255(60));
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Kianasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2.6, 1.5, 76, 4, 4, PercentTo255(60));
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Astasfx3.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 80)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 3);
        Effect("Arthursfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count >= 80 && count <= 95)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        DestroyEffectTimed(AddSpecialEffectTarget("Astasfx3.mdx", u, "chest"), 1);
    }

    if (count == 95)
    {
        SoundStart("AstaSE3.mp3");
        Effect("Arthursfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 1.5, 76, 4, 4, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 5, 2, 76, 4, 4, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Hydesfx11.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1.5, 76, 4, 4, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        RushSlide(t, a, 600, 1.4, 0.02, true);
    }

    if (count >= 95 && count <= 165)
    {
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 10, 0);

        DestroyEffectTimed(AddSpecialEffectTarget("Astasfx3.mdx", t, "chest"), 1);

        if (count % 5 == 0)
        {
            Effect("Hydesfx26.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, -45, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 190)
    {
        x = PolarX(GetUnitX(t), 100, a);
        y = PolarY(GetUnitY(t), 100, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 0.75);
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);
        Effect("Hydesfx7.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 7, 1.5, 255, 255, 255, 255);
        Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Hydesfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 200)
    {
        SoundStart("AstaSE2.mp3");
        SetUnitFlyHeight(u, 0, 1750);
        SetUnitFlyHeight(t, 0, 1750);
    }

    if (count == 220)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hydesfx10.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Hydesfx12-x2.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Saltersfx34.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 4, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 225)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A06X')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AstaE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AstaE.mp3");
        SoundStart("JingliuSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 3);
        Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Hydesfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        Effect("Hydesfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 76, 4, 4, 255);
        RushSlide(t, a, 480, 0.4, 0.02, true);
    }

    if (count == 15)
    {
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 0.9);
    }

    if (count >= 15 && count <= 45)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 120)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -100, a);
            y = PolarY(GetUnitY(t), -100, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count > 30)
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 30, 0);
        }
        else
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 30, 0);
        }

        if (count % 3 == 0)
        {
            Effect("Astasfx2.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 1.5, 1.5, 76, 4, 4, PercentTo255(80));
        }
    }

    if (count == 45)
    {
        SoundStart("SaboSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitFlyHeight(u, 0, 0);
        Effect("saltersfx14.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Hydesfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("Hydesfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx31.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        RushSlide(t, a, 340, 0.8, 0.02, true);
    }

    if (count == 55)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A06W') * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AstaW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float a2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AstaW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitVertexColor(u, 255, 255, 255, 0);
        Effect("Arthursfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 76, 4, 4, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 10)
    {
        x = PolarX(GetUnitX(t), -140, a - 72);
        y = PolarY(GetUnitY(t), -140, a - 72);
        a = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Asta.mdx", x, y, 0, a, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "attack");
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Arthursfx6.mdx", x, y, 0, a, 0, 0, 2, 1, 76, 4, 4, 255);
        Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 25)
    {
        x = PolarX(GetUnitX(t), -140, a - 144);
        y = PolarY(GetUnitY(t), -140, a - 144);
        a = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Asta.mdx", x, y, 0, a, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "attack");
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Arthursfx6.mdx", x, y, 0, a, 0, 0, 2, 1, 76, 4, 4, 255);
        Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 40)
    {
        x = PolarX(GetUnitX(t), -140, a - 216);
        y = PolarY(GetUnitY(t), -140, a - 216);
        a = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Asta.mdx", x, y, 0, a, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "attack");
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Arthursfx6.mdx", x, y, 0, a, 0, 0, 2, 1, 76, 4, 4, 255);
        Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 55)
    {
        x = PolarX(GetUnitX(t), -140, a - 288);
        y = PolarY(GetUnitY(t), -140, a - 288);
        a = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Asta.mdx", x, y, 0, a, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "attack");
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Arthursfx6.mdx", x, y, 0, a, 0, 0, 2, 1, 76, 4, 4, 255);
        Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 65)
    {
        SoundStart("ArthurSE4.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 5);
        SetUnitVertexColor(u, 255, 255, 255, 255);
        Effect("Arthursfx32.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Hydesfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
    }

    if (count == 75)
    {
        Effect("Arthursfx33.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 2, 76, 4, 4, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Arthursfx34.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 80)
    {
        x = PolarX(GetUnitX(t), 270, a);
        y = PolarY(GetUnitY(t), 270, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 85)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A06V')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AstaQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("AstaQ.mp3");
        SoundStart("AstaSE1.mp3");
        SetUnitAnimation(u, "attack");
        SetUnitTimeScale(u, 1.5);
        DestroyEffectTimed(AddSpecialEffectTarget("Astasfx1.mdx", u, "hand left"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Astasfx1.mdx", u, "hand right"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Astasfx3.mdx", u, "chest"), 1);
        Effect("Hydesfx27.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 6)
    {
        SetUnitAnimation(u, "attack");
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1400, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A06U'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.14, 0.4, 0.02, GetUnitAnimationOffsetPercent(u));
            Effect("Astasfx2.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.3, 1.5, 76, 4, 4, PercentTo255(80));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Hydesfx26.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.2);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void KianaD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 50)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }
    
    if (count == 1)
    {
        SoundStart("KianaD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 3);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 50)
    {
        x = GetUnitX(u);
        y = GetUnitY(u);
        Effect("Kianaasfx22.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SetUnitXY(u, GetUnitX(t), GetUnitY(t), 0);
        SetUnitXY(t, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(t, false);
        IssueImmediateOrderById(u, 851972);
        Effect("Kianasfx23.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Kianasfx11.mdx", GetUnitX(t), GetUnitY(t), 0, a, -90, 0, 6, 2, 255, 255, 255, 255);
    }

    if (count >= 50 && count <= 150)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(t), GetUnitY(t), 550, nil);
        GroupRemoveUnit(g2, u);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (!IsUnitInGroup(d, g1) && IsUnitAlive(d) && !IsUnitTower(d) && !IsUnitInvulnerable(d))
            {
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (count == 150)
            {
                SetPauseUnit(d, false);
                SetInvulUnit(d, false);
                if (FilterGeneric(u, d))
                {
                    UnitDamageTarget(u, d, 8 * GetHeroInt(u, true));
                    IssueImmediateOrderById(d, 851972);
                }
            }
            else
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
            }
        }

        if (count == 150)
        {
            DestroyGroup(g1);
        }
    }

    if (count == 150)
    {
        SoundStart("KianaSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Kianasfx24.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Kianasfx25.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void KianaF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("KianaF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 10);
    }

    if (count == 50)
    {
        Effect("Kianasfx15.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 0.75, 7, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.25);
        TimeScaleEffect(dummy_effect, 0, 1.4);
        TimeScaleEffect(dummy_effect, 1, 5.6);
    }

    if (count <= 300)
    {
        if (count % 10 == 0)
        {
            Effect("Kianasfx7.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1.5, 3), 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Kianasfx8.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, GetRandomReal(1.5, 2.5), 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Kianasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.8, 1.4), 2, 255, 100, 255, PercentTo255(GetRandomReal(60, 80)));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.6, 0.8));
            Effect("Kianasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.3, 2.25), 2, 255, 100, 255, PercentTo255(GetRandomReal(60, 80)));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.6, 0.8));
        }
    }

    if (count == 100)
    {
        SetUnitAnimationByIndex(u, 1);
        Effect("Kianasfx17.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 4, 3, 127, 0, 255, PercentTo255(40));
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 120)
    {
        Effect("Kianasfx18.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 150 || count == 170 || count == 190 || count == 210 || count == 230 || count == 250 || count == 270 || count == 290)
    {
        Effect("Kianasfx21.mdx", GetUnitX(t), GetUnitY(t), 150, randomAngle(), 0, 0, GetRandomReal(3, 4), 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 290)
    {
        SetUnitAnimationByIndex(u, 6);
        Effect("Kianasfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 300)
    {
        Effect("Kianasfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 310)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        for (int i = 0; i < 12; i++)
        {
            x = PolarX(GetUnitX(t), 300, i * 30);
            y = PolarY(GetUnitY(t), 300, i * 30);
            Effect("Kianasfx19.mdx", x, y, 0, i * 30, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
        }
    }

    if (count == 320)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void KianaT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float a2 = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("KianaT.mp3");
        SoundStart("KianaT-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 1);
        SaveReal(GameHT, hid, 0, 700);
    }

    if (count <= 90)
    {
        if (count % 5 == 0)
        {
            SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1);

            x = PolarX(GetUnitX(t), 700, LoadInteger(GameHT, hid, 0) * 20);
            y = PolarY(GetUnitY(t), 700, LoadInteger(GameHT, hid, 0) * 20);
            a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
            Effect("Kianasfx11.mdx", x, y, LoadReal(GameHT, hid, 0), a2, -45, 0, 2, 3.5 - count * 0.02, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            AnimEffect2(dummy_effect, "death", 2.5 - count * 0.02);
            SaveEffectHandle(GameHT, hid, LoadInteger(GameHT, hid, 0), dummy_effect);

            if (LoadReal(GameHT, hid, 0) >= 700)
            {
                SaveReal(GameHT, hid, 0, 500);
            }
            else
            {
                SaveReal(GameHT, hid, 0, 700);
            }
        }
    }

    if (count == 90)
    {
        SetUnitAnimationByIndex(u, 2);
    }

    if (count == 100)
    {
        for (int i = 1; i <= LoadInteger(GameHT, hid, 0); i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
            Effect("Kianasfx14.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectHeight(e), GetSpecialEffectYaw(e), -45, 0, 1, 1, 255, 255, 255, 255);
            Effect("Kianasfx12.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectHeight(e), GetSpecialEffectYaw(e), -45, 0, 1.5, 0.6, 255, 255, 255, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, 1);
            SaveEffectHandle(GameHT, hid, i, dummy_effect);
            SaveReal(GameHT, hid, i, dist);
            SaveReal(GameHT, hid, 'h' + i, GetSpecialEffectHeight(e));
        }
    }

    if (count >= 100 && count <= 115)
    {
        for (int i = 1; i <= LoadInteger(GameHT, hid, 0); i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            dist = LoadReal(GameHT, hid, i);
            x = PolarX(GetSpecialEffectX(e), dist / 15, GetSpecialEffectYaw(e));
            y = PolarY(GetSpecialEffectY(e), dist / 15, GetSpecialEffectYaw(e));
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - LoadReal(GameHT, hid, 'h' + i) / 15);
        }
    }

    if (count == 115)
    {
        SoundStart("KianaSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Kianasfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Kianasfx13.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        for (int i = 0; i < 10; i++)
        {
            x = PolarX(GetUnitX(t), 300, i * 36);
            y = PolarY(GetUnitY(t), 300, i * 36);
            Effect("Kianasfx3.mdx", x, y, 0, i * 36, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
        }
    }

    if (count == 120)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void KianaR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float a2 = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("KianaR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 6, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
    }

    if (count == 20)
    {
        Effect("Kianasfx6.mdx", GetUnitX(t), GetUnitY(t), 450, a, 0, 0, 1, 6, 255, 100, 255, 255);
        AnimEffect2(dummy_effect, "death", 4.8);
    }

    if (count >= 20 && count <= 260)
    {
        if (count % 10 == 0)
        {
            Effect("Kianasfx7.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, GetRandomReal(1.5, 3), 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Kianasfx8.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, GetRandomReal(1.5, 2.5), 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Kianasfx9.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(0.75, 1.25), 1.5, 255, 100, 255, PercentTo255(GetRandomReal(60, 100)));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            Effect("Kianasfx9.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 255, 100, 255, PercentTo255(GetRandomReal(60, 100)));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 70)
    {
        SoundStart("KianaR-1.mp3");
        Effect("Kianasfx10.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.2, 5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 4);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 4, 255, 255, 255, PercentTo255(80));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 100)
    {
        SoundStart("KianaR-2.mp3");
    }

    if (count == 150)
    {
        SoundStart("KianaR-3.mp3");
        SetUnitAnimationByIndex(u, 2);
        for (int i = 0; i < 12; i++)
        {
            a2 = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(600, 1000), a2);
            y = PolarY(GetUnitY(t), GetRandomReal(600, 1000), a2);
            a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
            Effect("Kianasfx11.mdx", x, y, GetRandomReal(600, 800), a2, -45, 0, 2, 2.5, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            AnimEffect2(dummy_effect, "death", 1.4);
            SaveEffectHandle(GameHT, hid, i, dummy_effect);
        }
    }

    if (count == 200)
    {
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 220)
    {
        for (int i = 0; i < 12; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
            Effect("Kianasfx14.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectHeight(e), GetSpecialEffectYaw(e), -45, 0, 1, 1, 255, 255, 255, 255);
            Effect("Kianasfx12.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectHeight(e), GetSpecialEffectYaw(e), -45, 0, 1.5, 0.6, 255, 255, 255, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, 1);
            SaveEffectHandle(GameHT, hid, i, dummy_effect);
            SaveReal(GameHT, hid, i, dist);
            SaveReal(GameHT, hid, i + 20, GetSpecialEffectHeight(dummy_effect));
        }
    }

    if (count >= 220 && count <= 240)
    {
        for (int i = 0; i < 12; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            dist = LoadReal(GameHT, hid, i);
            x = PolarX(GetSpecialEffectX(e), dist / 20, GetSpecialEffectYaw(e));
            y = PolarY(GetSpecialEffectY(e), dist / 20, GetSpecialEffectYaw(e));
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - LoadReal(GameHT, hid, i + 20) / 20);
        }
    }

    if (count == 240)
    {
        SoundStart("KianaSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Kianasfx13.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        for (int i = 0; i < 10; i++)
        {
            x = PolarX(GetUnitX(t), 300, i * 36);
            y = PolarY(GetUnitY(t), 300, i * 36);
            Effect("Kianasfx3.mdx", x, y, 0, i * 36, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }
    }

    if (count == 250)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A04O')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void KianaW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("KianaW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 0.6);
    }

    if (count == 1 || count == 15 || count == 30 || count == 45 || count == 60)
    {
        Effect("Kianasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1, 1.5), 1.5, 255, 255, 255, PercentTo255(GetRandomReal(40, 60)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 70)
    {
        Effect("Kianasfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
    }

    if (count == 80)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Kianasfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 85)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A04M')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void KianaQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("KianaQ.mp3");
        SoundStart("YamajiSE1.mp3");
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 1.5);
        Effect("Kianasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1, 1.5, 255, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a + 20, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a - 20, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        for (int i = 0; i < 3; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            x = PolarX(GetSpecialEffectX(e), 1600/12, GetSpecialEffectYaw(e));
            y = PolarY(GetSpecialEffectY(e), 1600/12, GetSpecialEffectYaw(e));
            SetEffectXY(e, x, y, 1);

            if (i == 1)
            {
                visionArea(GetOwningPlayer(u), 1200, 3, x, y);
            }

            GroupEnumUnitsInRange(g2, x, y, 250, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A04L'));
                    GroupAddUnit(g1, d);
                }
            }

            if (count % 2 == 0)
            {
                Effect("kianasfx2.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
                Effect("Kianasfx3.mdx", x, y, 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
            }
        }
        DestroyGroup(g2);
        if (count == 12)
        {
            DestroyGroup(g1);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MusashiD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float a2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MusashiSE7.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimation(u, "attack");
    }

    if (count == 10)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count <= 15)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 3 == 0)
        {
            Effect("Musashisfx6.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Musashisfx7.mdx", x, y, 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 15)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Musashisfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 3, 255, 255, 255, 255);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 3, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 20)
    {
        UnitHilang(u, true);
    }

    if (count == 40)
    {
        SoundStart("MusashiSE8.mp3");
    }

    if (count == 50)
    {
        SoundStart("MusashiSE2.mp3");
        for (int i = 0; i < 10; i++)
        {
            x = PolarX(GetUnitX(t), 400, i * 36);
            y = PolarY(GetUnitY(t), 400, i * 36);
            Effect("Musashisfx4.mdx", x, y, 0, a, 0, 0, 1, 2.6, 255, 255, 255, 255);
        }
    }

    if (count == 50 || count == 80 || count == 110)
    {
        Effect("Musashisfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 70)
    {
        SoundStart("MusashiD.mp3");
    }

    if (count >= 50 && count <= 130)
    {
        if (count % 7 == 0)
        {
            a2 = randomAngle();
            Effect("Musashisfx16.mdx", GetUnitX(t), GetUnitY(t), 50, a2, 0, 0, 2, 2, 255, 255, 255, 255);

            if (GetRandomInt(1, 2) == 1)
            {
                Effect("Musashisfx17.mdx", GetUnitX(t), GetUnitY(t), 100, a2, -40, 0, 1.5, 1, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
                Effect("Musashisfx19.mdx", GetUnitX(t), GetUnitY(t), 50, a2, -40, 0, 3, 1, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            }
            else
            {
                Effect("Musashisfx17.mdx", GetUnitX(t), GetUnitY(t), 100, a2, 0, 0, 1.5, 1, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
                Effect("Musashisfx19.mdx", GetUnitX(t), GetUnitY(t), 50, a2, 0, 0, 3, 1, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            }
            RushSlide(t, a2, 16, 0.12, 0.02, true);
        }
    }

    if (count == 130)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        UnitHilang(u, false);
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 1.3);
        Effect("musashisfx19.mdx", GetUnitX(t), GetUnitY(t), 100, a - 90, -20, 0, 1, 1, 255, 255, 255, 255);
        Effect("musashisfx19.mdx", GetUnitX(t), GetUnitY(t), 100, a - 270, -20, 0, 1, 1, 255, 255, 255, 255);
        Effect("Musashisfx21.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("musashisfx22.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 260, 0.6, 0.02, true);
    }

    if (count == 140)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MusashiF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MusashiF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 6, GetUnitX(u), GetUnitY(u));
        UnitHilang(u, true);
        x = PolarX(GetUnitX(t), -400, a);
        y = PolarY(GetUnitY(t), -400, a);
        Effect("Musashisfx13.mdx", x, y, 0, a, 0, 0, 1, 5.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 17);
        SetSpecialEffectTimeScale(dummy_effect, 0.4);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count <= 100)
    {
        e = LoadEffectHandle(GameHT, hid, 0);

        if (count % 4 == 0)
        {
            Effect("Musashisfx14.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 255, 209, 215, PercentTo255(80));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count >= 100 && count <= 120)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 40, a);
        y = PolarY(GetSpecialEffectY(e), 40, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);

        if (count % 2 == 0)
        {
            Effect("Musashisfx4.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Musashisfx12.mdx", x, y, 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
        }
    }

    if (count == 120)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 13);
        SetSpecialEffectTimeScale(e, 0.1);
    }

    if (count == 140 || count == 160 || count == 180 || count == 200 || count == 220)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Musashisfx15.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count >= 120 && count <= 260)
    {
        e = LoadEffectHandle(GameHT, hid, 0);

        if (count % 5 == 0)
        {
            Effect("Musashisfx14.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 1.5, 255, 209, 215, 255);
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 260)
    {
        SoundStart("MusashiSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        e = LoadEffectHandle(GameHT, hid, 0);
        a = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        for (int i = 0; i < 9; i++)
        {
            x = PolarX(GetSpecialEffectX(e), 100 + 160 * i, a);
            y = PolarY(GetSpecialEffectY(e), 100 + 160 * i, a);
            Effect("Musashisfx10.mdx", x, y, 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
        }
    }

    if (count == 270)
    {
        UnitHilang(u, false);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MusashiT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MusashiT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
    }

    if (count == 20)
    {
        SoundStart("MusashiSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        for (int i = 0; i < 7; i++)
        {
            x = PolarX(GetUnitX(u), 100 + 200 * i, a);
            y = PolarY(GetUnitY(u), 100 + 200 * i, a);
            Effect("Musashisfx10.mdx", x, y, 0, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
            Effect("Musashisfx11.mdx", x, y, 0, a, 0, 0, 3.5, 2, 233, 177, 205, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
            Effect("Musashisfx12.mdx", x, y, 100, a, 0, 0, 5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
        }
        KnockupUnit(t, 0.6, 0.02, 300);
    }

    if (count == 30)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MusashiR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MusashiR.mp3");
        SoundStart("MusashiSE4.mp3");
        x = PolarX(GetUnitX(t), -800, a);
        y = PolarY(GetUnitY(t), -800, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 9);
    }

    if (count <= 20)
    {
        x = PolarX(GetUnitX(u), 25, a);
        y = PolarY(GetUnitY(u), 25, a);
        SetUnitXY(u, x, y, 0);
        
        if (count % 5 == 0)
        {
            Effect("Musashisfx6.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Musashisfx7.mdx", x, y, 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 20)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitEnableAutoOrientation(u, false);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimation(u, "attack");
    }

    if (count >= 20 && count <= 80)
    {
        x = PolarX(GetUnitX(u), -5, a);
        y = PolarY(GetUnitY(u), -5, a);
        SetUnitXY(u, x, y, 0);
        SetUnitOrientation(u, a, -40 + (count - 20) * 1.5, 0);

        if (count <= 50)
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 17, 0);
        }
        else
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 17, 0);
        }
    }

    if (count == 30)
    {
        SoundStart("MusashiSE1.mp3");
    }

    if (count == 35)
    {
        SetUnitAnimation(u, "attack");
        Effect("Musashisfx8.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 10, a, GetUnitPitch(u), 0, 1.5, 0.4, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveReal(GameHT, hid, 0, dist);
        SaveReal(GameHT, hid, 'h' + 0, GetUnitFlyHeight(u));
    }

    if (count >= 35 && count <= 50)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        dist = LoadReal(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), dist / 15, a);
        y = PolarY(GetSpecialEffectY(e), dist / 15, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - LoadReal(GameHT, hid, 'h' + 0) / 15);
    }

    if (count == 45)
    {
        SoundStart("MusashiSE2.mp3");
    }

    if (count == 50)
    {
        SetUnitAnimation(u, "attack");
        Effect("Musashisfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Musashisfx1.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 10, a, GetUnitPitch(u), 0, 1.5, 0.4, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        SaveReal(GameHT, hid, 1, dist);
        SaveReal(GameHT, hid, 'h' + 1, GetUnitFlyHeight(u));
    }

    if (count >= 50 && count <= 65)
    {
        e = LoadEffectHandle(GameHT, hid, 1);
        dist = LoadReal(GameHT, hid, 1);
        x = PolarX(GetSpecialEffectX(e), dist / 15, a);
        y = PolarY(GetSpecialEffectY(e), dist / 15, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - LoadReal(GameHT, hid, 'h' + 1) / 15);
    }

    if (count == 65)
    {
        SetUnitAnimation(u, "attack");
        Effect("Musashisfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Musashisfx8.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 10, a, GetUnitPitch(u), 0, 1.5, 0.4, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
        SaveReal(GameHT, hid, 2, dist);
        SaveReal(GameHT, hid, 'h' + 2, GetUnitFlyHeight(u));
    }

    if (count >= 65 && count <= 80)
    {
        e = LoadEffectHandle(GameHT, hid, 2);
        dist = LoadReal(GameHT, hid, 2);
        x = PolarX(GetSpecialEffectX(e), dist / 15, a);
        y = PolarY(GetSpecialEffectY(e), dist / 15, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - LoadReal(GameHT, hid, 'h' + 2) / 15);
    }

    if (count == 80)
    {
        SoundStart("MusashiR-1.mp3");
        SoundStart("MusashiSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Musashisfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetUnitOrientation(u, a, 0, 0);
        UnitEnableAutoOrientation(u, true);
        SetUnitAnimationByIndex(u, 9);
        SetUnitFacingEx(u, a, true);
        SetUnitFlyHeight(u, 0, 0);
    }

    if (count >= 80 && count <= 100)
    {
        x = PolarX(GetUnitX(u), 50, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 50, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
        
        if (count % 3 == 0)
        {
            Effect("Musashi.mdx", x, y, 0, GetUnitFacing(u), 0, 0, 1, 0.4, PercentTo255(50), PercentTo255(50), PercentTo255(50), PercentTo255(50));
            SetSpecialEffectAnimationByIndex(dummy_effect, 9);
            SetSpecialEffectAnimationOffsetPercent(dummy_effect, GetUnitAnimationOffsetPercent(u));
            TimeScaleEffect(dummy_effect, 0, 0.1);
            Effect("Musashisfx3.mdx", x, y, 50, GetUnitFacing(u), 0, 0, 1, 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            Effect("Musashisfx4.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 90)
    {
        SoundStart("MusashiSE3.mp3");
        SetUnitAnimation(u, "attack");
        Effect("Musashisfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 100)
    {
        SoundStart("MusashiSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Musashisfx3.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Musashisfx4.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);

        for (int i = 0; i < 6; i++)
        {
            a = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(50, 250), a);
            y = PolarY(GetUnitY(t), GetRandomReal(50, 250), a);
            a = Angle(x, y, GetUnitX(t), GetUnitY(t));
            Effect("Musashisfx2.mdx", x, y, 150, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }
    }

    if (count == 105)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A02C')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MusashiE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 15)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }
    
    if (count == 1)
    {
        SoundStart("MusashiE.mp3");
        SoundStart("MusashiSE9.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 0.75);
        SetUnitVertexColor(u, 255, 255, 255, 0);
        Effect("musashi.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("ichigosfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 15)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitVertexColor(u, 255, 255, 255, 255);

        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A02B') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);

        SaveReal(GameHT, hid, 0, a);
        Effect("Musashisfx8.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.25, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        RushSlide(t, a, 420, 0.6, 0.02, true);
    }

    if (count >= 15 && count <= 45)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetEffectXY(e, GetUnitX(t), GetUnitY(t), 0);
        SetSpecialEffectHeight(e, 100);

        if (count % 5 == 0)
        {
            a = LoadReal(GameHT, hid, 0);
            Effect("musashisfx22.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 45)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MusashiW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("MusashiW.mp3");
        SoundStart("MusashiSE2.mp3");
        SetUnitAnimationByIndex(u, 9);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1200, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, (1 + GetUnitAbilityLevel(u, 'A02A')) * GetHeroAgi(u, true));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.12, 0.44, 0.02, GetUnitAnimationOffsetPercent(u));
            Effect("musashisfx3.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            Effect("Musashisfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MusashiQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("MusashiQ.mp3");
        SoundStart("MusashiSE1.mp3");
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 2);
        Effect("musashisfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a + 20, 0, 0, 1.5, 0.6, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("musashisfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1.5, 0.6, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        Effect("musashisfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a - 20, 0, 0, 1.5, 0.6, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 7)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Musashisfx2.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, GetSpecialEffectYaw(e), 0, 0, 3, 1, 255, 255, 255, 255);
        e = LoadEffectHandle(GameHT, hid, 1);
        Effect("Musashisfx2.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, GetSpecialEffectYaw(e), 0, 0, 3, 1, 255, 255, 255, 255);
        e = LoadEffectHandle(GameHT, hid, 2);
        Effect("Musashisfx2.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, GetSpecialEffectYaw(e), 0, 0, 3, 1, 255, 255, 255, 255);
    }

    if (count <= 12)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();

        for (int i = 0; i < 3; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            x = PolarX(GetSpecialEffectX(e), 1600/12, GetSpecialEffectYaw(e));
            y = PolarY(GetSpecialEffectY(e), 1600/12, GetSpecialEffectYaw(e));
            SetEffectXY(e, x, y, 1);
            SetSpecialEffectHeight(e, 100);
            if (i == 1)
            {
                visionArea(GetOwningPlayer(u), 1200, 3, x, y);
            }
            
            GroupEnumUnitsInRange(g2, x, y, 250, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A029'));
                    GroupAddUnit(g1, d);
                }
            }
        }

        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HutaoD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HutaoD.mp3");
        SoundStart("HutaoSE9.mp3");
        Effect("Hutaosfx29.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 2);
        Effect("Hutaosfx30.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 10)
    {
        Effect("Hutaosfx31.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 25)
    {
        Effect("Hutaosfx32.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.5, 0.3);
        for (int i = 0; i < 10; i++)
        {
            x = PolarX(GetUnitX(u), 400, i * 36);
            y = PolarY(GetUnitY(u), 400, i * 36);
            a = Angle(x, y, GetUnitX(u), GetUnitY(u));
            Effect("Hutaosfx33.mdx", x, y, 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
        }
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        RushSlide(t, a, 380, 0.9, 0.02, true);
    }

    if (count == 40)
    {
        SoundStart("HutaoSE10.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Hutaosfx34.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        for (int i = 0; i < 6; i++)
        {
            x = PolarX(GetUnitX(u), 400, i * 60);
            y = PolarY(GetUnitY(u), 400, i * 60);
            Effect("Hutaosfx35.mdx", x, y, 0, i * 60, 0, 0, 0.6, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HutaoF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("HutaoF.mp3");
        SoundStart("HutaoSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 1.5);
        Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 143, 43, 43, 255);
        Effect("Hutaosfx21.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Hutaosfx22.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
    }

    if (count <= 25)
    {
        SetUnitVertexColor(u, 255, 255, 255, PercentTo255(100 - count * 4));
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 48, 0);

        if (count % 5 == 0)
        {
            Effect("Hutaosfx23.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.2);
            Effect("Hutaosfx24.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        }
    }

    if (count == 25)
    {
        SoundStart("HutaoF-1.mp3");
        SetUnitTimeScale(u, 2.5);
        SetUnitXY(u, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitVertexColor(u, 255, 255, 255, 255);
    }

    if (count >= 25 && count <= 40)
    {
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 80, 0);

        if (count % 5 == 0)
        {
            Effect("Hutaosfx23.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), -180, 0, 2, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.2);
            Effect("Hutaosfx24.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), -180, 0, 2, 1, 255, 255, 255, 255);
        }
    }

    if (count == 40)
    {
        SoundStart("HutaoSE8.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitFlyHeight(u, 0, 0);
        Effect("Hutaosfx25.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("Hutaosfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Hutaosfx22.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Hutaosfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        for (int i = 1; i < 6; i++)
        {
            Effect("Hutaosfx27.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.5, 0.85), 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
        Effect("Hutaosfx28.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.3, 1, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 0.6);
        
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 11 * GetHeroInt(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HutaoT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HutaoT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count == 15)
    {
        SoundStart("HutaoSE7.mp3");
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 2);
        Effect("Hutaosfx15.mdx", GetUnitX(t), GetUnitY(t), 0, a - 90, 0, 0, 1.4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 25)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        for (int i = 0; i < 9; i++)
        {
            x = PolarX(GetUnitX(t), 600, i * 40);
            y = PolarY(GetUnitY(t), 600, i * 40);
            Effect("Hutaosfx17.mdx", x, y, 0, randomAngle(), 0, 0, 1.7, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 2);
            AnimEffect2(dummy_effect, "death", 1.2);
            TimeScaleEffect(dummy_effect, 0.85, 1.2);
            x = PolarX(GetUnitX(t), 275, i * 40);
            y = PolarY(GetUnitY(t), 275, i * 40);
            Effect("Hutaosfx18.mdx", x, y, 0, a, 0, 0, 2.25, 2.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
        }
        Effect("Hutaosfx19.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 35)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HutaoR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HutaoR.mp3");
        SoundStart("HutaoSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -400, a);
        y = PolarY(GetUnitY(t), -400, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 1.5);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 1.5, 255, 255, 255, 255);
    }

    if (count <= 20)
    {
        x = PolarX(GetUnitX(u), 40, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 40, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);

        if (count % 3 == 0)
        {
            Effect("Hutaosfx9.mdx", GetUnitX(u), GetUnitY(u), 100, GetUnitFacing(u), -90, 0, 1.2, 1.5, 255, 255, 255, 255);
            Effect("Hutaosfx11.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1.4, 1, 255, 255, 255, 255);
        }
    }

    if (count == 30 || count == 42 || count == 54 || count == 66 || count == 80)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("HutaoSE1.mp3");
        }
        else
        {
            SoundStart("HutaoSE3.mp3");
        }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        a = randomAngle();
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimation(u, "attack");
        SetUnitTimeScale(u, 2);
        Effect("Hutaosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Hutaosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Hutaosfx7.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, -140, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Hutaosfx14.mdx", GetUnitX(t), GetUnitY(t), 150, randomAngle(), -35, 0, 5, 1.5, 133, 43, 43, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        RushSlide(t, a, 240, 0.2, 0.02, true);
    }

    if (count == 100)
    {
        SoundStart("HutaoR-1.mp3");
        SetUnitAnimationByIndex(u, 5);
        Effect("Hutaosfx15.mdx", GetUnitX(t), GetUnitY(t), 0, a - 90, 0, 0, 1.2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 110)
    {
        SoundStart("HutaoSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hutaosfx6.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Hutaosfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 115)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A03P')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HutaoE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HutaoSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 7);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Hutaosfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count <= 15)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 3 == 0)
        {
            Effect("Hutaosfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            Effect("Hutaosfx11.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 10 || count == 30 || count == 50)
    {
        SoundStart("HutaoSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimation(u, "attack");
        SetUnitTimeScale(u, 1.5);
    }

    if (count == 15 || count == 35 || count == 55)
    {
        SoundStart("HutaoSE3.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        if (GetRandomInt(1, 2) == 1)
        {
            Effect("Hutaosfx7.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, -140, 1.5, 1.5, 255, 255, 255, 255);
        }
        else
        {
            Effect("Hutaosfx7.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, -230, 1.5, 1.5, 255, 255, 255, 255);
        }
        Effect("Hutaosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Hutaosfx12.mdx", GetUnitX(u), GetUnitY(u), 100, a + GetRandomReal(-20, 20), -270, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Hutaosfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        RushSlide(t, a, 270, 0.3, 0.02, true);
    }

    if (count == 75)
    {
        SoundStart("HutaoE.mp3");
        SoundStart("HutaoSE3.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 2);
        Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Hutaosfx13.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 80)
    {
        Effect("Hutaosfx7.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, -180, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 85)
    {
        SoundStart("HutaoSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hutaosfx3.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Hutaosfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Hutaosfx6.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 90)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A042') * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HutaoW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("HutaoSE3.mp3");
        SoundStart("HutaoW.mp3");
        SoundStart("HutaoSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 1.5);
        Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Hutaosfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        RushSlide(u, a, dist, 0.2, 0.02, false);
    }

    if (count < 12)
    {
        CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.12, 0.32, 0.02, GetUnitAnimationOffsetPercent(u));
    }

    if (count == 12)
    {
        SoundStart("HutaoSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Hutaosfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.5, 0.4);
        Effect("Hutaosfx9.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Hutaosfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.5, 0.2);
        Effect("Hutaosfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Hutaosfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a + 180, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 500, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(d), GetUnitY(d));
                UnitDamageTarget(u, d, (1 + GetUnitAbilityLevel(u, 'A041')) * GetHeroInt(u, true));
                RushSlide(d, a, 280, 0.6, 0.02, true);
                KnockupUnit(d, 0.6, 0.02, 240);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HutaoQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("HutaoQ.mp3");
        SoundStart("HutaoSE1.mp3");
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 2);
        Effect("Hutaosfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Hutaosfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 5)
    {
        SoundStart("HutaoSE2.mp3");
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                Effect("Hutaosfx4.mdx", GetUnitX(d), GetUnitY(d), 50, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A040'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count % 3 == 0)
        {
            Effect("Hutaosfx3.mdx", x, y, 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("Hutaosfx5.mdx", x, y, 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("Hutaosfx6.mdx", x, y, 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("Hutaosfx7.mdx", x, y, 50, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }

        if (count == 12)
        {
            DestroyGroup(g1);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YamajiD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YamajiSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Yamajisfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 10)
    {
        Effect("Yamajisfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Yamajisfx3.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yamajisfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        RushSlide(t, a, 500, 1, 0.02, true);
    }

    if (count == 30)
    {
        SoundStart("YamajiD.mp3");
    }

    if (count == 40)
    {
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 0.75);
    }

    if (count >= 40 && count <= 70)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), 15, a);
            y = PolarY(GetUnitY(u), 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 4 == 0)
        {
            Effect("Yamajisfx28.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.9, 1, 255, 255, 255, PercentTo255(80));
        }
    }

    if (count == 65)
    {
        SetUnitAnimationByIndex(u, 7);
        Effect("Yamajisfx29.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        AnimEffect2(dummy_effect, "death", 1.4);
    }

    if (count == 80)
    {
        Effect("Yamajisfx30.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3.5, 2, 255, 255, 255, 255);
    }

    if (count == 100)
    {
        SoundStart("YamajiSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yamajisfx19.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        AnimEffect2(dummy_effect, "death", 1.4);
    }

    if (count == 115)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YamajiF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YamajiFNew.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 5, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 0.4);
        Effect("Yamajisfx31.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 4, 255, 255, 255, PercentTo255(80));
    }

    if (count == 1 || count == 30 || count == 60 || count == 90 || count == 120 || count == 150 || count == 180 || count == 210 || count == 240)
    {
        Effect("Yamajisfx32.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Yamajisfx33.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 1.4), 1.5, 201, 114, 114, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yamajisfx34.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.8, 1.2), 1.5, 201, 114, 114, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Yamajisfx35.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Yamajisfx36.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 140)
    {
        SoundStart("YamajiFNew-1.mp3");
    }

    if (count == 230)
    {
        SoundStart("YamajiF-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 4, GetUnitX(u), GetUnitY(u));
        Effect("Yamajisfx37.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 0.5, 4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Yamajisfx38.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        for (int i = 0; i < 7; i++)
        {
            Effect("Yamajisfx39.mdx", GetUnitX(u), GetUnitY(u), 50 + i * 200, randomAngle(), 0, 0, 2.6, 4, 210, 65, 65, PercentTo255(80));
            SetSpecialEffectTimeScale(dummy_effect, 0.3);
        }
        Effect("Yamajisfx40.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 3, 4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.2);
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
    }

    if (count >= 230 && count <= 350)
    {
        if (count > 290)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) - 20, 0);
        }
        else
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 20, 0);
        }
    }

    if (count == 350)
    {
        SetUnitFlyHeight(t, 0, 0);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YamajiT2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("YamajiT2.mp3");
        SoundStart("YamajiT2-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 5, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        Effect("Yamajisfx25.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 3, 3, 255, 255, 255, 255);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 1 || count == 15 || count == 30 || count == 45 || count == 60 || count == 75 || count == 90 || count == 120)
    {
        Effect("Yamajisfx26.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.5, 2.5), 2, 255, 255, 255, PercentTo255(GetRandomReal(40, 60)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1.25));
    }

    if (count == 1 || count == 10 || count == 25 || count == 45 || count == 60 || count == 80 || count == 90 || count == 120)
    {
        Effect("Yamajisfx5.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1.2, 2.5), 2, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 90)
    {
        SoundStart("YamajiT2-2.mp3");
        x = PolarX(GetUnitX(u), 800, a);
        y = PolarY(GetUnitY(u), 800, a);
        visionArea(GetOwningPlayer(u), 1500, 3, x, y);
        SetUnitAnimationByIndex(u, 1);
        SetUnitTimeScale(u, 0.85);
        for (int i = 0; i < 9; i++)
        {
            x = PolarX(GetUnitX(u), 400, a - 112.5 + i * 22.5);
            y = PolarY(GetUnitY(u), 400, a - 112.5 + i * 22.5);
            Effect("Yamajisfx20.mdx", x, y, 0, a, 0, 0, 4, 3, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 2);
            AnimEffect2(dummy_effect, "death", 1.4);
            TimeScaleEffect(dummy_effect, 1, 1.4);
            SaveEffectHandle(GameHT, hid, 'eff' + i, dummy_effect);

            x = PolarX(GetUnitX(u), 400, a - 112.5 + i * 22.5);
            y = PolarY(GetUnitY(u), 400, a - 112.5 + i * 22.5);
            Effect("Yamajisfx20.mdx", x, y, 0, a, 0, 0, 4, 3, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 2);
            AnimEffect2(dummy_effect, "death", 1.4);
            TimeScaleEffect(dummy_effect, 1, 1.4);
            SaveEffectHandle(GameHT, hid, 'eff' + i + 10, dummy_effect);

            x = PolarX(GetUnitX(u), 400, a - 112.5 + i * 22.5);
            y = PolarY(GetUnitY(u), 400, a - 112.5 + i * 22.5);
            Effect("Yamajisfx20.mdx", x, y, 0, a, 0, 0, 4, 3, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 2);
            AnimEffect2(dummy_effect, "death", 1.4);
            TimeScaleEffect(dummy_effect, 1, 1.4);
            SaveEffectHandle(GameHT, hid, 'eff' + i + 20, dummy_effect);

            x = PolarX(GetUnitX(u), 400, a - 112.5 + i * 22.5);
            y = PolarY(GetUnitY(u), 400, a - 112.5 + i * 22.5);
            Effect("Yamajisfx20.mdx", x, y, 0, a, 0, 0, 4, 3, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 2);
            AnimEffect2(dummy_effect, "death", 1.4);
            TimeScaleEffect(dummy_effect, 1, 1.4);
            SaveEffectHandle(GameHT, hid, 'eff' + i + 30, dummy_effect);

            x = PolarX(GetUnitX(u), 400, a - 112.5 + i * 22.5);
            y = PolarY(GetUnitY(u), 400, a - 112.5 + i * 22.5);
            Effect("Yamajisfx20.mdx", x, y, 0, a, 0, 0, 4, 3, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 2);
            AnimEffect2(dummy_effect, "death", 1.4);
            TimeScaleEffect(dummy_effect, 1, 1.4);
            SaveEffectHandle(GameHT, hid, 'eff' + i + 40, dummy_effect);
        }
    }

    if (count >= 90 && count <= 120)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        for (int i = 0; i < 9; i++)
        {
            e = LoadEffectHandle(GameHT, hid, 'eff' + i);
            x = PolarX(GetSpecialEffectX(e), 32, a);
            y = PolarY(GetSpecialEffectY(e), 32, a);
            SetEffectXY(e, x, y, 1);
            SetSpecialEffectHeight(e, 0);

            GroupEnumUnitsInRange(g2, x, y, 250, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 12 * GetHeroStr(u, true));
                    GroupAddUnit(g1, d);
                }
            }

            e = LoadEffectHandle(GameHT, hid, 'eff' + i + 10);
            x = PolarX(GetSpecialEffectX(e), 34, a);
            y = PolarY(GetSpecialEffectY(e), 34, a);
            SetEffectXY(e, x, y, 1);
            SetSpecialEffectHeight(e, 0);

            GroupEnumUnitsInRange(g2, x, y, 250, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 12 * GetHeroStr(u, true));
                    GroupAddUnit(g1, d);
                }
            }

            e = LoadEffectHandle(GameHT, hid, 'eff' + i + 20);
            x = PolarX(GetSpecialEffectX(e), 36, a);
            y = PolarY(GetSpecialEffectY(e), 36, a);
            SetEffectXY(e, x, y, 1);
            SetSpecialEffectHeight(e, 0);

            GroupEnumUnitsInRange(g2, x, y, 250, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 12 * GetHeroStr(u, true));
                    GroupAddUnit(g1, d);
                }
            }

            e = LoadEffectHandle(GameHT, hid, 'eff' + i + 30);
            x = PolarX(GetSpecialEffectX(e), 38, a);
            y = PolarY(GetSpecialEffectY(e), 38, a);
            SetEffectXY(e, x, y, 1);
            SetSpecialEffectHeight(e, 0);

            GroupEnumUnitsInRange(g2, x, y, 250, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 12 * GetHeroStr(u, true));
                    GroupAddUnit(g1, d);
                }
            }

            e = LoadEffectHandle(GameHT, hid, 'eff' + i + 40);
            x = PolarX(GetSpecialEffectX(e), 40, a);
            y = PolarY(GetSpecialEffectY(e), 40, a);
            SetEffectXY(e, x, y, 1);
            SetSpecialEffectHeight(e, 0);

            GroupEnumUnitsInRange(g2, x, y, 250, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 12 * GetHeroStr(u, true));
                    GroupAddUnit(g1, d);
                }
            }
        }
        DestroyGroup(g2);
        if (count == 120)
        {
            DestroyGroup(g1);
        }
    }

    if (count == 110)
    {
        for (int i = 0; i < 4; i++)
        {
            x = PolarX(GetUnitX(u), 800, a);
            y = PolarY(GetUnitY(u), 800, a);
            Effect("Yamajisfx23.mdx", x, y, 100, a - 220, -180, 0, 3 + i * 0.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5 + i * 0.05);
            Effect("Yamajisfx23.mdx", x, y, 100, a - 200, -180, 0, 3 + i * 0.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5 + i * 0.05);
            Effect("Yamajisfx23.mdx", x, y, 100, a - 180, -180, 0, 3 + i * 0.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5 + i * 0.05);
            Effect("Yamajisfx23.mdx", x, y, 100, a - 160, -180, 0, 3 + i * 0.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5 + i * 0.05);
            Effect("Yamajisfx23.mdx", x, y, 100, a - 140, -180, 0, 3 + i * 0.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5 + i * 0.05);
        }
    }

    if (count == 125)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YamajiT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YamajiT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 5, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        Effect("Yamajisfx20.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 5.4, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        Effect("Yamajisfx9.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Yamajisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.4, 1.5, 255, 255, 255, 255);
    }

    if (count == 200)
    {
        SoundStart("YamajiT-1.mp3");
    }

    if (count == 220)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count == 250)
    {
        SetUnitAnimationByIndex(u, 4);
    }

    if (count <= 270)
    {
        if (count % 27 == 0)
        {
            Effect("Yamajisfx9.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1, 1, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "stand");
            Effect("Yamajisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.4, 1.5, 255, 255, 255, 255);
        }
    }

    if (count == 270)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yamajisfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1, 2, 255, 255, 255, 255);
        Effect("Yamajisfx3.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yamajisfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        for (int i = 0; i < 13; i++)
        {
            x = PolarX(GetUnitX(u), 50 + 100 * i, a);
            y = PolarY(GetUnitY(u), 50 + 100 * i, a);
            Effect("Yamajisfx24.mdx", x, y, 100, a, 0, 0, 2, 1, 255, 255, 255, PercentTo255(10));
            SetSpecialEffectTimeScale(dummy_effect, 2);
        }
    }

    if (count == 280)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 360, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YamajiR2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YamajiR2.mp3");
        SoundStart("YamajiR2-1.mp3");
        x = PolarX(GetUnitX(t), -400, a);
        y = PolarY(GetUnitY(t), -400, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 0.75);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Yamajisfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.25);
        Effect("Yamajisfx22.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 1 || count == 25 || count == 40 || count == 60 || count == 90 || count == 120 || count == 140 || count == 165)
    {
        Effect("Yamajisfx9.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Yamajisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Yamajisfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
    }

    if (count == 110)
    {
        SetUnitAnimationByIndex(u, 1);
        SetUnitTimeScale(u, 0.5);
    }

    if (count == 150)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 154)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 30, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 30, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 30, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 30, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 158)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 60, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 60, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 60, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 60, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 162)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 90, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 90, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 90, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 90, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 166)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 120, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 120, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 120, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 120, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 170)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 150, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 150, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 150, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 150, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 174)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 180, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 180, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 180, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 180, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 178)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 210, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 210, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 210, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 210, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 182)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 240, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 240, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 240, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 240, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 186)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 270, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 270, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 270, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 270, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 190)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 300, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 300, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 300, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 300, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 194)
    {
        x = PolarX(GetUnitX(u), -150, a);
        y = PolarY(GetUnitY(u), -150, a);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 330, -180, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 330, -180, 0, 4.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 330, -180, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Yamajisfx23.mdx", x, y, 100, a - 330, -180, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 197)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yamajisfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Yamajisfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        for (int i = 1; i < 8; i++)
        {
            Effect("Yamajisfx5.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 0.15 + 0.25 * i, 2, 255, 255, 255, PercentTo255(GetRandomReal(40, 60)));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
        Effect("Yamajisfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        Effect("Yamajisfx3.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yamajisfx11.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 200)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (7 + GetUnitAbilityLevel(u, 'A03V')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YamajiR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YamajiR.mp3");
        SoundStart("YamajiR-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 7, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        Effect("Yamajisfx17.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.5, 5, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
    }

    if (count == 1 || count == 15 || count == 30 || count == 45 || count == 60 || count == 75 || count == 120 || count == 140 || count == 160 || count == 180 || count == 220 || count == 260)
    {
        Effect("Yamajisfx9.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Yamajisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Yamajisfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
    }

    if (count == 100)
    {
        SoundStart("YamajiR-2.mp3");
    }

    if (count >= 100 && count <= 300)
    {
        if (count % 10 == 0)
        {
            a2 = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(150, 600), a2);
            y = PolarY(GetUnitY(t), GetRandomReal(150, 600), a2);
            Effect("Yamajisfx18.mdx", x, y, 0, randomAngle(), 0, 0, 0.5, 4.5 - (count - 100) * 0.02, 255, 255, 255, 255);
        }
    }

    if (count == 300 || count == 330)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yamajisfx19.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 350)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A03U')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YamajiQ2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    if (count <= 30)
    {
        SetInvulUnit(u, true);
    }

    if (count == 30)
    {
        SetInvulUnit(u, false);
    }

    if (count == 1)
    {
        SoundStart("YamajiQ2.mp3");
        SetUnitAnimationByIndex(u, 0);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
        SaveInteger(GameHT, hid, 0, 40);
    }

    if (count == 1 || count == 15)
    {
        Effect("Yamajisfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 30)
    {
        SoundStart("YamajiQ2-1.mp3");
        SoundStart("YamajiQ2-2.mp3");
        SetUnitAnimationByIndex(u, 7);
        x = PolarX(GetUnitX(u), 850, a);
        y = PolarY(GetUnitY(u), 850, a);
        Effect("Yamajisfx14.mdx", x, y, 0, a, 0, 0, 1.6, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count >= 30 && count <= 50)
    {
        if (count == 30) { RushSlide(u, a, 1600, 0.36, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A03T') * GetHeroStr(u, true));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 50)
        {
            DestroyGroup(g1);
        }

        if (count % 3 == 0)
        {
            x = PolarX(GetUnitX(u), 120, a + LoadInteger(GameHT, hid, 0));
            y = PolarY(GetUnitY(u), 120, a + LoadInteger(GameHT, hid, 0));
            Effect("Yamajisfx15.mdx", x, y, 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
            SaveInteger(GameHT, hid, 0, -LoadInteger(GameHT, hid, 0));
            Effect("Yamajisfx1.mdx", GetUnitX(u), GetUnitY(u), 30, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("Yamajisfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }
    }

    if (count == 50)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YamajiE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("YamajiE.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        Effect("Yamajisfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 4, 255, 255, 255, PercentTo255(60));
        AnimEffect2(dummy_effect, "death", 3);
    }

    if (count == 150)
    {
        SoundStart("YamajiE-1.mp3");
        for (int i = 1; i < 10; i++)
        {
            x = PolarX(GetUnitX(u), 350, i * 40);
            y = PolarY(GetUnitY(u), 350, i * 40);
            Effect("Yamajisfx11.mdx", x, y, 0, i * 40, 0, 0, 1.5, 3, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.65);
            Effect("Yamajisfx5.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 0.3 + 0.25 * i, 2.5, 255, 255, 255, PercentTo255(GetRandomReal(70, 90)));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.25, 0.75));
        }
    }

    if (count == 185)
    {
        Effect("Yamajisfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 200)
    {
        SaveEffectHandle(GameHT, GetHandleId(u), StringHash("YamajiE"), AddSpecialEffectTarget("Yamajisfx13.mdx", u, "origin"));
        if (GetUnitAbilityLevel(u, 'A03Q') > 0)
        {
            SaveBoolean(GameHT, GetHandleId(u), StringHash("YamajiQ2"), true);
            EnableAbility(GetUnitAbility(u, 'A03T'), true, true);
            SetUnitAbilityLevel(u, 'A03T', GetUnitAbilityLevel(u, 'A03Q'));
            DisableAbility(GetUnitAbility(u, 'A03Q'), true, true);
        }

        if (GetUnitAbilityLevel(u, 'A03U') > 0)
        {
            SaveBoolean(GameHT, GetHandleId(u), StringHash("YamajiR2"), true);
            EnableAbility(GetUnitAbility(u, 'A03V'), true, true);
            SetUnitAbilityLevel(u, 'A03V', GetUnitAbilityLevel(u, 'A03U'));
            DisableAbility(GetUnitAbility(u, 'A03U'), true, true);
        }

        if (GetUnitAbilityLevel(u, 'A03W') > 0)
        {
            SaveBoolean(GameHT, GetHandleId(u), StringHash("YamajiT2"), true);
            EnableAbility(GetUnitAbility(u, 'A03X'), true, true);
            DisableAbility(GetUnitAbility(u, 'A03W'), true, true);
        }

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YamajiW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YamajiW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
    }

    if (count == 1 || count == 20 || count == 35 || count == 55 || count == 70 || count == 90 || count == 120 || count == 135 || count == 145)
    {
        Effect("Yamajisfx5.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(0.75, 1.25), 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
    }

    if (count == 100 || count == 150)
    {
        Effect("Yamajisfx7.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        if (count == 100)
        {
            a2 = randomAngle();
            x = PolarX(GetUnitX(t), -120, a2);
            y = PolarY(GetUnitY(t), -120, a2);
        }
        else if (count == 150)
        {
            a2 = randomAngle();
            x = PolarX(GetUnitX(t), 120, a2);
            y = PolarY(GetUnitY(t), 120, a2);
        }
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 110 || count == 160)
    {
        if (count == 110)
        {
            SoundStart("YamajiSE2.mp3");
        }
        else if (count == 160)
        {
            SoundStart("YamajiSE3.mp3");
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
            for (int i = 0; i < 6; i++)
            {
                Effect("Yamajisfx8.mdx", GetUnitX(t), GetUnitY(t), 170 * i, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, 0.9);
                Effect("Yamajisfx9.mdx", GetUnitX(t), GetUnitY(t), 170 * i, a, 0, 0, 2, 2, 255, 255, 255, 255);
                SetSpecialEffectAnimation(dummy_effect, "stand");
                SetSpecialEffectTimeScale(dummy_effect, 0.65);
            }
        }
        Effect("Yamajisfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1, 2, 255, 255, 255, 255);
        Effect("Yamajisfx3.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yamajisfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 115)
    {
        RushSlide(t, a, 500, 0.6, 0.02, true);
    }

    if (count == 115 || count == 125 || count == 135 || count == 145)
    {
        Effect("Yamajisfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 165)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A03R')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YamajiQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("YamajiQ.mp3");
        SoundStart("YamajiSE1.mp3");
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 1.5);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A03Q'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            x = PolarX(x, -50, a);
            y = PolarY(y, -50, a);
            Effect("Yamajisfx4.mdx", x, y, 100, a, -90, 0, 1, 2, 255, 255, 255, 255);
            Effect("Yamajisfx5.mdx", x, y, 100, a, -90, 0, 0.75, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void TsunaD2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 45)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("TsunaD2.mp3");
        SoundStart("TsunaSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 0.6);
        SetUnitFacingEx(u, a, true);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        Effect("Tsunasfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Tsunasfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SaveReal(GameHT, hid, 0, a);
        if (dist > 100)
        {
            SaveReal(GameHT, hid, 1, dist - 100);
        }
        else
        {
            SaveReal(GameHT, hid, 1, dist);
        }
    }

    if (count <= 40)
    {
        a = LoadReal(GameHT, hid, 0);
        dist = LoadReal(GameHT, hid, 1);
        x = PolarX(GetUnitX(u), dist / 40, a);
        y = PolarY(GetUnitY(u), dist / 40, a);
        SetUnitXY(u, x, y, 0);
        if (count > 20)
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 40, 0);
        }
        else
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 40, 0);
        }
        DestroyEffectTimed(AddSpecialEffectTarget("Tsunasfx13.mdx", u, "chest"), 1);

        if (count % 5 == 0)
        {
            Effect("Tsunasfx9.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 40)
    {
        SoundStart("TsunaSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitFlyHeight(u, 0, 0);
        Effect("Tsunasfx20.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Fuxuansfx17.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 45)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 6 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 340, 0.6, 0.02, true);
    }

    if (count == 45 || count == 50 || count == 55 || count == 60 || count == 65 || count == 70)
    {
        a = LoadReal(GameHT, hid, 0);
        Effect("Tsunasfx14.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 75)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void TsunaD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 40)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("TsunaDNew.mp3");
        SoundStart("TsunaSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 12);
        SetUnitFacingEx(u, a, true);
        Effect("Tsunasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SaveReal(GameHT, hid, 0, a);
        SaveReal(GameHT, hid, 1, dist);
    }

    if (count == 2 || count == 5 || count == 8 || count == 11)
    {
        Effect("Tsunasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1, 1.5, 255, 255, 255, 255);
    }

    if (count <= 12)
    {
        a = LoadReal(GameHT, hid, 0);
        dist = LoadReal(GameHT, hid, 1);
        x = PolarX(GetUnitX(u), dist / 12, a);
        y = PolarY(GetUnitY(u), dist / 12, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 12)
    {
        a = LoadReal(GameHT, hid, 0);
        SetUnitFacing(u, a + 180);
        SetUnitAnimationByIndex(u, 2);
        Effect("Tsunasfx3.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Tsunasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 13 || count == 16 || count == 19 || count == 22 || count == 25 || count == 28 || count == 31 || count == 37 || count == 40 || count == 43 || count == 46 || count == 49 || count == 52)
    {
        Effect("Tsunasfx13.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        if (count > 35)
        {
            Effect("Tsunasfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, -90, 0, 0.75, 1, 255, 255, 255, 255);
        }
    }

    if (count >= 12 && count <= 32)
    {
        a = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -20, a);
        y = PolarY(GetUnitY(t), -20, a);
        SetUnitXY(t, x, y, 2);
        x = PolarX(GetUnitX(t), 30, a);
        y = PolarY(GetUnitY(t), 30, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 30)
    {
        SoundStart("TsunaSE4.mp3");
    }

    if (count == 35)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Tsunasfx1.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Tsunasfx14.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Tsunasfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Tsunasfx16.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        RushSlide(t, a, 450, 0.6, 0.02, true);
    }

    if (count == 40)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 6 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        DisableAbility(GetUnitAbility(u, 'A038'), true, true);
        UnitAddAbility(u, 'A01I');
        UnitMakeAbilityPermanent(u, true, 'A01I');
    }

    if (count == 55)
    {
        Effect("Tsunasfx25(2).mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 0.75, 2, 255, 255, 255, 255);
        TimerStart(tmr, 5, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            unit u = LoadUnitHandle(GameHT, hid, 'cstr');

            EnableAbility(GetUnitAbility(u, 'A038'), true, true);
            UnitRemoveAbility(u, 'A01I');
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        });
    }
}

void TsunaF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("TsunaFNew.mp3");
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 13);
        visionArea(GetOwningPlayer(u), 1200, 12, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(u), -10, a);
        y = PolarY(GetUnitY(u), -10, a);
        Effect("Tsunasfx17.mdx", x, y, 70, a + 180, 0, 0, 2.5, 13, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        AnimEffect2(dummy_effect, "death", 12);
        TimeScaleEffect(dummy_effect, 1, 12);
    }

    if (count <= 600)
    {
        if (count % 15 == 0)
        {
            Effect("Tsunasfx13.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2.5, 1, 255, 255, 255, 255);
            Effect("Tsunasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        }
        
        if (count % 25 == 0)
        {
            Effect("Tsunasfx9.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
            Effect("Tsunasfx3.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
            Effect("Tsunasfx7.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
            Effect("Tsunasfx11.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        }
    }

    if (count == 300)
    {
        SetUnitAnimationByIndex(u, 16);
        x = PolarX(GetUnitX(u), 10, a);
        y = PolarY(GetUnitY(u), 10, a);
        Effect("Tsunasfx18.mdx", x, y, 70, a, 0, 0, 2.5, 7, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        AnimEffect2(dummy_effect, "death", 6);
        TimeScaleEffect(dummy_effect, 1, 6);
    }

    if (count >= 350 && count <= 600)
    {
        if (count % 15 == 0)
        {
            for (int i = 1; i < 9; i++)
            {
                x = PolarX(GetUnitX(u), -150 * i, a);
                y = PolarY(GetUnitY(u), -150 * i, a);
                Effect("Tsunasfx19.mdx", x, y, 70, a + 180, -90, 0, 1.25, 1, 255, 255, 255, 255);
                x = PolarX(GetUnitX(u), 150 * i, a);
                y = PolarY(GetUnitY(u), 150 * i, a);
                Effect("Tsunasfx19.mdx", x, y, 70, a, -90, 0, 1.25, 1, 255, 255, 255, 255);
                x = PolarX(x, -10, a);
                y = PolarY(y, -10, a);
                Effect("Tsunasfx8.mdx", x, y, 70, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
            }
        }

        if (count % 25 == 0)
        {
            Effect("Tsunasfx20.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }
    }

    if (count == 600)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void TsunaT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("TsunaQ.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Tsunasfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -600, a);
        y = PolarY(GetUnitY(t), -600, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 12);
        Effect("Tsunasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 3 || count == 6 || count == 9 || count == 12)
    {
        Effect("Tsunasfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1, 1.5, 255, 255, 255, 255);
    }

    if (count <= 15)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 15)
    {
        x = PolarX(GetUnitX(t), 120, a);
        y = PolarY(GetUnitY(t), 120, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 8);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
    }

    if (count == 20)
    {
        Effect("Tsunasfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Tsunasfx14.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 450, 0.4, 0.02, true);
    }

    if (count >= 20 && count <= 40)
    {
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 22.5, 0);
    }

    if (count == 30)
    {
        SoundStart("TsunaQ.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Tsunasfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SetUnitVertexColor(u, 255, 255, 255, 0);
    }

    if (count == 32 || count == 34 || count == 36 || count == 39 || count == 42 || count == 45 || count == 48)
    {
        x = PolarX(GetUnitX(u), 30 * (count - 30), a);
        y = PolarY(GetUnitY(u), 30 * (count - 30), a);
        Effect("Tsunasfx1.mdx", x, y, 30 * (count - 30), a, -45, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 50)
    {
        SoundStart("TsunaT.mp3");
        SetUnitVertexColor(u, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 250, a);
        y = PolarY(GetUnitY(t), 250, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, 650, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        UnitEnableAutoOrientation(u, false);
        SetUnitOrientation(u, a, -45, 0);
        SetUnitAnimationByIndex(u, 18);
        SetUnitTimeScale(u, 1.5);
        x = PolarX(GetUnitX(u), -10, a);
        y = PolarY(GetUnitY(u), -10, a);
        Effect("Tsunasfx17.mdx", x, y, 700, a + 180, -315, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "stand", 0.4);
        AnimEffect2(dummy_effect, "death", 1);
    }

    if (count == 60)
    {
        SoundStart("TsunaT-1.mp3");
        x = PolarX(GetUnitX(u), 10, a);
        y = PolarY(GetUnitY(u), 10, a);
        Effect("Tsunasfx18.mdx", x, y, 600, a, -45, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "stand", 0.3);
        AnimEffect2(dummy_effect, "death", 0.9);
    }

    if (count == 70)
    {
        RushSlide(t, a, 400, 0.2, 0.02, true);
        SetUnitFlyHeight(t, 0, 2250);
    }

    if (count == 65 || count == 75)
    {
        if (count == 75)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        }
        for (int i = 1; i < 6; i++)
        {
            x = PolarX(GetUnitX(u), -100 * i, a);
            y = PolarY(GetUnitY(u), -100 * i, a);
            Effect("Tsunasfx19.mdx", x, y, 700 + i * 100, a + 180, -45, 0, 1, 1, 255, 255, 255, 255);
            x = PolarX(GetUnitX(u), 100 * i, a);
            y = PolarY(GetUnitY(u), 100 * i, a);
            Effect("Tsunasfx19.mdx", x, y, 600 - i * 100, a, -315, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 80)
    {
        Effect("Tsunasfx16.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Tsunasfx11.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Tsunasfx10.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 4, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Tsunasfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Tsunasfx25(2).mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2.5, 255, 255, 255, 255);

        UnitUnStuck(u);
        SetUnitFlyHeight(u, 0, 2000);
        SetUnitOrientation(u, a, 0, 0);
        UnitEnableAutoOrientation(u, true);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void TsunaR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 100)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }
    
    if (count == 1)
    {
        SoundStart("TsunaR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Tsunasfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -500, a);
        y = PolarY(GetUnitY(t), -500, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 9);
        Effect("Tsunasfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Tsunasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
        Effect("Tsunasfx11.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 75)
    {
        SoundStart("TsunaR-1.mp3");
        SetUnitAnimationByIndex(u, 5);
        Effect("Tsunasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 1.5, 255, 255, 255, 255);
    }

    if (count >= 80 && count <= 100)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
        
        DestroyEffectTimed(AddSpecialEffectTarget("Tsunasfx13.mdx", u, "chest"), 1);
    }

    if (count == 100)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Tsunasfx1.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Tsunasfx14.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Tsunasfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Tsunasfx16.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A035')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 360, 0.6, 0.02, true);
    }

    if (count == 105 || count == 115 || count == 125)
    {
        Effect("Tsunasfx1.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 2, 255, 255, 255, 255);
    }

    if (count == 125)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void TsunaE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("TsunaE.mp3");
        SoundStart("SaboSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        RushSlide(u, a, dist, 0.2, 0.02, false);
        Effect("Tsunasfx23.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
    }

    if (count == 2 || count == 5 || count == 8)
    {
        Effect("Tsunasfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 0.75, 2, 255, 255, 255, 255);
    }

    if (count <= 12)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("Tsunasfx13.mdx", u, "foot left"), 1);
    }

    if (count == 12)
    {
        Effect("Tsunasfx24.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Tsunasfx25(2).mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.75, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Tsunasfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.4);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 500, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A034') * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void TsunaW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("TsunaW.mp3");
        SetUnitXY(u, x, y, 1);
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 1.3);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Esdeathsfx17.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 4, 2, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 1);
        Effect("Esdeathsfx13.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3.5, 2, 128, 188, 189, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 0, 0, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 500, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
    }

    if (count <= 15)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (count == 15)
            {
                SetPauseUnit(d, false);
                SetInvulUnit(d, false);
                UnitDamageTarget(u, d, (1 + GetUnitAbilityLevel(u, 'A033')) * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
            else
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
            }
        }
        
        if (count == 15)
        {
            DestroyGroup(g1);
        }
    }

    if (count == 15)
    {
        SoundStart("TsunaSE2.mp3");
        Effect("Esdeathsfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Esdeathsfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx20.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.8, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        for (int i = 0; i < 6; i++)
        {
            a = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(50, 350), a);
            y = PolarY(GetUnitY(u), GetRandomReal(50, 350), a);
            Effect("Tsunasfx22.mdx", x, y, 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
        
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void TsunaQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("TsunaQ.mp3");
        SetUnitAnimationByIndex(u, 12);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1400, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A032'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            Effect("Tsunasfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1, 2, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YomiD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YomiD.mp3");
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacing(u, a + 180);
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 0.9);
    }

    if (count == 20)
    {
        SoundStart("YomiSE7.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yomisfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yomisfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yomisfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 25)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YomiF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YomiF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 1.5);
    }

    if (count <= 50)
    {
        x = PolarX(GetUnitX(t), 20, a);
        y = PolarY(GetUnitY(t), 20, a);
        SetUnitXY(t, x, y, 2);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);

        if (count % 5 == 0)
        {
            Effect("Yomisfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.4, 2, 190, 60, 60, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, 1);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
            Effect("Yomisfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.4, 2, 190, 60, 60, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, 2);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
        }
    }

    if (count == 50)
    {
        SoundStart("YomiSE7.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yomisfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yomisfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yomisfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 60)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YomiT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YomiT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 1);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
        {
            CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\YomiT.blp", 100, 100, 100, 0, 100, 100, 100, 100);
        }
    }

    if (count == 30)
    {
        SoundStart("YomiSE6.mp3");
        x = PolarX(GetUnitX(t), -100, a);
        y = PolarY(GetUnitY(t), -100, a);
        Effect("Yomisfx18.mdx", x, y, 100, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetUnitAnimationByIndex(u, 3);
    }

    if (count == 40)
    {
        SoundStart("YomiSE7.mp3");
        x = PolarX(GetUnitX(t), 400, a);
        y = PolarY(GetUnitY(t), 400, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 45)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yomisfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yomisfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yomisfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YomiR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YomiR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 1);
        SetUnitVertexColor(u, 255, 255, 255, 0);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 1 || count == 15 || count == 30 || count == 45)
    {
        SoundStart("YomiSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yomisfx13.mdx", GetUnitX(t), GetUnitY(t), GetRandomReal(100, 200), randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Yomisfx5.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, GetRandomReal(1, 1.5), 1, 255, 255, 255, 255);
        Effect("Yomisfx10.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), GetRandomReal(-50, 50), 0, 1, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Yomisfx10.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), GetRandomReal(-50, 50), 0, 1, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Yomisfx14.mdx", GetUnitX(t), GetUnitY(t), 150, randomAngle(), GetRandomReal(-50, 50), 0, GetRandomReal(2, 3), 2, 228, 30, 30, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Yomisfx2.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 2);
        if (count == 1 || count == 30)
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            Effect("Isayama yomi.mdx", x, y, 0, a, 0, 0, 1, 0.8, 255, 255, 255, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, 3);
            SetSpecialEffectTimeScale(dummy_effect, 2);
            TimeScaleEffect(dummy_effect, 0, 0.4);
            TransEffect(dummy_effect, 255, 6, 0.6, 0.02);
            RushSlide(t, a, 90, 0.2, 0.02, true);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a + 180);
            y = PolarY(GetUnitY(t), -120, a + 180);
            Effect("Isayama yomi.mdx", x, y, 0, a + 180, 0, 0, 1, 0.6, 255, 255, 255, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, 3);
            SetSpecialEffectTimeScale(dummy_effect, 2);
            TimeScaleEffect(dummy_effect, 0, 0.4);
            TransEffect(dummy_effect, 255, 6, 0.6, 0.02);
            RushSlide(t, a + 180, 90, 0.2, 0.02, true);
        }
    }

    if (count == 60)
    {
        SoundStart("YomiR-1.mp3");
        SetUnitVertexColor(u, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 1);
    }

    if (count == 70)
    {
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 2);
    }

    if (count == 80)
    {
        SoundStart("YomiSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yomisfx15.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yomisfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yomisfx17.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 85)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A01J')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YomiE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float x2 = .0f;
    float y2 = .0f; 
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("YomiG.mp3");
        SoundStart("YomiSE3.mp3");
        SetUnitAnimationByIndex(u, 3);
    }

    if (count == 15) 
    {
        SoundStart("YomiSE8.mp3");
        SetUnitXY(u, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        for (int i = 1; i < 8; i++)
        {
            a = randomAngle();
            x2 = PolarX(GetUnitX(u), GetRandomReal(100, 400), a);
            y2 = PolarY(GetUnitY(u), GetRandomReal(100, 400), a);
            Effect("Yomisfx19.mdx", x2, y2, GetRandomReal(150, 200), randomAngle(), GetRandomReal(-40, 40), 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }

        Effect("Yomisfx10.mdx", GetUnitX(u), GetUnitY(u), 200, GetUnitFacing(u), -45, 0, 1.3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yomisfx10.mdx", GetUnitX(u), GetUnitY(u), 200, GetUnitFacing(u) + 180, -45, 0, 1.3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yomisfx10.mdx", GetUnitX(u), GetUnitY(u), 50, GetUnitFacing(u), 0, 0, 1.3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Yomisfx11.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A01N') * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YomiW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YomiW.mp3");
        SoundStart("YomiSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 27);
        Effect("Yomisfx3.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Yomisfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Yomisfx5.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count <= 20)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 20)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Yomisfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Yomisfx6.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Yomisfx5.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Yomisfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Yomisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.4);
        Effect("Yomisfx12.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 6, 2, 255, 255, 255, 255);
        Effect("Yomisfx13.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.6, 0.02, true);
        SaveReal(GameHT, hid, 0, GetUnitX(t));
        SaveReal(GameHT, hid, 1, GetUnitY(t));
    }

    if (count == 30)
    {
        x = PolarX(LoadReal(GameHT, hid, 0), 600, a);
        y = PolarY(LoadReal(GameHT, hid, 1), 600, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a + 180, true);
        x = PolarX(LoadReal(GameHT, hid, 0), 300, a);
        y = PolarY(LoadReal(GameHT, hid, 1), 300, a);
        Effect("Yomisfx9.mdx", x, y, 0, a + 180, 0, 0, 1.5, 2, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.5, 0.4);
        Effect("Yomisfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count >= 30 && count <= 45)
    {
        x = PolarX(GetUnitX(u), 40, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 40, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 45)
    {
        SoundStart("YomiSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Yomisfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Yomisfx10.mdx", GetUnitX(u), GetUnitY(u), 200, GetUnitFacing(u), -45, 0, 1, 1, 255, 255, 255, 255);
        Effect("Yomisfx10.mdx", GetUnitX(u), GetUnitY(u), 200, GetUnitFacing(u) + 180, -45, 0, 1, 1, 255, 255, 255, 255);
        Effect("Yomisfx10.mdx", GetUnitX(u), GetUnitY(u), 50, GetUnitFacing(u), 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Yomisfx11.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetUnitFacingEx(u, a, true);
    }

    if (count == 50)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A01H')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YomiQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("YomiQ.mp3");
        SoundStart("YomiSE1.mp3");
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 2);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
        SaveInteger(GameHT, hid, 0, 1);
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A01G'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            Effect("Yomisfx1.mdx", x, y, 50, a, 0, 0, 2, 2, 190, 60, 60, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, LoadInteger(GameHT, hid, 0));
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
            SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1);
            if (LoadInteger(GameHT, hid, 0) > 2)
            {
                SaveInteger(GameHT, hid, 0, 1);
            }
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CronusD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 25)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }
    
    if (count == 1)
    {
        SoundStart("CronusR-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 1.4);
    }

    if (count == 5)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 25)
    {
        SoundStart("CronusR-1.mp3");
        SoundStart("CronusSE8.mp3");
        SoundStart("CronusSE10.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Cronussfx2.mdx", GetUnitX(t), GetUnitY(t), 50, a, -90, 0, 2, 1.5, 0, 255, 0, 255);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 450, 0.6, 0.02, true);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count >= 25 && count <= 55)
    {
        if (count % 4 == 0)
        {
            a = LoadReal(GameHT, hid, 0);
            Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 0);
            AnimEffect2(dummy_effect, "death", 1);
            Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
        }
    }

    if (count == 55)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CronusT2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    
    if (count == 1)
    {
        StopSound(LoadSoundHandle(GameHT, GetHandleId(u), StringHash("CronusFBGM")), true, false);
        SoundStart("CronusT2BGM1.mp3");
        SaveSoundHandle(GameHT, GetHandleId(u), StringHash("CronusFBGM"), dummy_sound);
        SoundStart("CronusT2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -800, a);
        y = PolarY(GetUnitY(t), -800, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 13);
        if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
        {
            CinematicFilterGenericBJ(3, BLEND_MODE_BLEND, "SkillImage\\CronusT2 (1).blp", 100, 100, 100, 0, 100, 100, 100, 100);
        }
    }

    if (count >= 30 && count <= 350)
    {
        x = PolarX(GetUnitX(u), 2, a);
        y = PolarY(GetUnitY(u), 2, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 30 || count == 90 || count == 150 || count == 210 || count == 270 || count == 330)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Cronussfx24.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2, 1.5, 0, 255, 0, 255);
    }

    if (count == 350)
    {
        SoundStart("CronusT2-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 8, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 7);
        Effect("Cronussfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3.5, 1.5, 0, 255, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 100, a + 180, 0, 0, 1, 8, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 7);
    }

    if (count == 500)
    {
        if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
        {
            CinematicFilterGenericBJ(3, BLEND_MODE_BLEND, "SkillImage\\CronusT2 (2).blp", 100, 100, 100, 0, 100, 100, 100, 100);
        }
    }

    if (count == 650)
    {
        SoundStart("CronusT-4.mp3");
    }

    if (count == 720)
    {
        StopSound(LoadSoundHandle(GameHT, GetHandleId(u), StringHash("CronusFBGM")), true, false);
        SoundStart("CronusT2BGM2.mp3");
        SaveSoundHandle(GameHT, GetHandleId(u), StringHash("CronusFBGM"), dummy_sound);
        SaveInteger(GameHT, GetHandleId(u), StringHash("CronusFOn"), 5);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        SaveReal(GameHT, GetHandleId(t), StringHash("CronusFDmg"), LoadReal(GameHT, GetHandleId(t), StringHash("CronusFDmg")) + 6 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CronusR2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 75)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetInvulUnit(t, true);
    }
    SetPauseUnit(t, true);

    if (count == 1)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitHilang(u, true);
    }

    if (count == 10)
    {
        SoundStart("CronusR.mp3");
        SoundStart("CronusSE7.mp3");
        x = PolarX(GetUnitX(t), -200, a + 60);
        y = PolarY(GetUnitY(t), -200, a + 60);
        a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Cronussfx16.mdx", x, y, 0, a2, 0, 0, 0.8, 1.5, 0, 255, 0, 255);
        Effect("Cronus.mdx", x, y, 0, a2, 0, 0, 1, 0.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 7);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Cronussfx19.mdx", x, y, 50, a2, 0, 0, 3.5, 1.5, 0, 255, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a2 + 180, 0, 0, 1, 2, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 1);
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 25)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("CronusSE5.mp3");
        }
        else
        {
            SoundStart("CronusSE6.mp3");
        }
        x = PolarX(GetUnitX(t), -200, a + 120);
        y = PolarY(GetUnitY(t), -200, a + 120);
        a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Cronussfx16.mdx", x, y, 0, a2, 0, 0, 0.8, 1.5, 0, 255, 0, 255);
        Effect("Cronus.mdx", x, y, 0, a2, 0, 0, 1, 0.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 7);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Cronussfx19.mdx", x, y, 50, a2, 0, 0, 3.5, 1.5, 0, 255, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a2 + 180, 0, 0, 1, 2, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 1);
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 40)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("CronusSE5.mp3");
        }
        else
        {
            SoundStart("CronusSE6.mp3");
        }
        x = PolarX(GetUnitX(t), -200, a + 240);
        y = PolarY(GetUnitY(t), -200, a + 240);
        a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Cronussfx16.mdx", x, y, 0, a2, 0, 0, 0.8, 1.5, 0, 255, 0, 255);
        Effect("Cronus.mdx", x, y, 0, a2, 0, 0, 1, 0.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 7);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Cronussfx19.mdx", x, y, 50, a2, 0, 0, 3.5, 1.5, 0, 255, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a2 + 180, 0, 0, 1, 2, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 1);
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 55)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("CronusSE5.mp3");
        }
        else
        {
            SoundStart("CronusSE6.mp3");
        }
        x = PolarX(GetUnitX(t), -200, a + 300);
        y = PolarY(GetUnitY(t), -200, a + 300);
        a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Cronussfx16.mdx", x, y, 0, a2, 0, 0, 0.8, 1.5, 0, 255, 0, 255);
        Effect("Cronus.mdx", x, y, 0, a2, 0, 0, 1, 0.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 7);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Cronussfx19.mdx", x, y, 50, a2, 0, 0, 3.5, 1.5, 0, 255, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a2 + 180, 0, 0, 1, 2, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 1);
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 65)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -140, a);
        y = PolarY(GetUnitY(t), -140, a);
        SetUnitXY(u, x, y, 0);
        UnitHilang(u, false);
        SetUnitAnimationByIndex(u, 7);
    }

    if (count == 75)
    {
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a + 180, 0, 0, 1, 0, 255, 255, 255, 0);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);

        SaveInteger(GameHT, GetHandleId(u), StringHash("CronusFOn"), 0);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        SaveReal(GameHT, GetHandleId(t), StringHash("CronusFDmg"), LoadReal(GameHT, GetHandleId(t), StringHash("CronusFDmg")) + 6 * GetHeroAgi(u, true));
        IssueImmediateOrderById(u, 851972);
    }

    if (count > 75)
    {
        if (!HaveSavedBoolean(GameHT, GetHandleId(t), StringHash("CronusFStop")))
        {
            SetPauseUnit(t, false);
            e = LoadEffectHandle(GameHT, hid, 0);
            SetSpecialEffectAnimation(e, "death");
            DestroyEffectTimed(e, 1);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void CronusW2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 75)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetInvulUnit(t, true);
    }
    SetPauseUnit(t, true);

    if (count == 1)
    {
        SoundStart("CronusW2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -200, a);
        y = PolarY(GetUnitY(t), -200, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 0);
        Effect("Cronussfx24.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 0, 255, 0, 255);
    }

    if (count == 30)
    {
        SoundStart("CronusW2-1.mp3");
    }
    
    if (count == 60)
    {
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 1.2);
        Effect("Cronussfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1.5, 0, 255, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 70)
    {
        SoundStart("CronusR-3.mp");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a + 180, 0, 0, 1, 0, 255, 255, 255, 0);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 75)
    {
        SaveInteger(GameHT, GetHandleId(u), StringHash("CronusFOn"), 0);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        SaveReal(GameHT, GetHandleId(t), StringHash("CronusFDmg"), LoadReal(GameHT, GetHandleId(t), StringHash("CronusFDmg")) + 3 * GetHeroAgi(u, true));
        IssueImmediateOrderById(u, 851972);
    }

    if (count > 75)
    {
        if (!HaveSavedBoolean(GameHT, GetHandleId(t), StringHash("CronusFStop")))
        {
            SetPauseUnit(t, false);
            e = LoadEffectHandle(GameHT, hid, 0);
            SetSpecialEffectAnimation(e, "death");
            DestroyEffectTimed(e, 1);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void CronusQ2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 190)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetInvulUnit(t, true);
    }
    SetPauseUnit(t, true);

    if (count == 1)
    {
        SoundStart("CronusQ2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -500, a);
        y = PolarY(GetUnitY(t), -500, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 0);
    }

    if (count == 20)
    {
        SetUnitAnimationByIndex(u, 13);
    }

    if (count >= 20 && count <= 140)
    {
        x = PolarX(GetUnitX(u), 3, a);
        y = PolarY(GetUnitY(u), 3, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 20 || count == 40 || count == 60 || count == 80 || count == 100 || count == 120 || count == 140)
    {
        Effect("Cronussfx24.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2.5, 1.5, 0, 255, 0, 255);
        Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.5, 1.5, 0, 255, 0, PercentTo255(90));
    }

    if (count == 90)
    {
        SoundStart("CronusQ2-1.mp3");
    }

    if (count == 140)
    {
        SetUnitAnimationByIndex(u, 23);
    }

    if (count == 165)
    {
        SetUnitAnimationByIndex(u, 18);
    }

    if (count == 185)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Cronussfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 0, 255, 0, 255);
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a + 180, 0, 0, 1, 0, 255, 255, 255, 0);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 190)
    {
        SaveInteger(GameHT, GetHandleId(u), StringHash("CronusFOn"), 0);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        SaveReal(GameHT, GetHandleId(t), StringHash("CronusFDmg"), LoadReal(GameHT, GetHandleId(t), StringHash("CronusFDmg")) + 3 * GetHeroAgi(u, true));
        IssueImmediateOrderById(u, 851972);
    }

    if (count > 190)
    {
        if (!HaveSavedBoolean(GameHT, GetHandleId(t), StringHash("CronusFStop")))
        {
            SetPauseUnit(t, false);
            e = LoadEffectHandle(GameHT, hid, 0);
            SetSpecialEffectAnimation(e, "death");
            DestroyEffectTimed(e, 1);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void CronusF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    if (LoadInteger(GameHT, GetHandleId(u), StringHash("CronusFOn")) == 0)
    {
        count++;
        SaveInteger(GameHT, hid, 'coun', count);
    }
    if (count <= 200)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetInvulUnit(t, true);
    }
    SetPauseUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        StopSound(LoadSoundHandle(GameHT, GetHandleId(u), StringHash("CronusFBGM")), true, false);
        SoundStart("CronusFBGM1.mp3");
        SaveSoundHandle(GameHT, GetHandleId(u), StringHash("CronusFBGM"), dummy_sound);
        SoundStart("CronusF.mp3");
        SoundStart("CronusF-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 21);
        x = PolarX(GetUnitX(u), -100, a);
        y = PolarY(GetUnitY(u), -100, a);
        Effect("Cronussfx18.mdx", x, y, 500, a, 90, 0, 1.25, 4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.01);
        TimeScaleEffect(dummy_effect, 0.7, 2.4);

        if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
        {
            CinematicFilterGenericBJ(3, BLEND_MODE_BLEND, "SkillImage\\CronusF (1).blp", 100, 100, 100, 0, 100, 100, 100, 100);
        }
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());

        DisableAbility(GetUnitAbility(u, 'A04S'), true, true);
        DisableAbility(GetUnitAbility(u, 'A04T'), true, true);
        DisableAbility(GetUnitAbility(u, 'A04U'), false, true);
        DisableAbility(GetUnitAbility(u, 'A04V'), true, true);
        DisableAbility(GetUnitAbility(u, 'A04W'), true, true);
        DisableAbility(GetUnitAbility(u, 'A04X'), false, true);
        DisableAbility(GetUnitAbility(u, 'A052'), false, true);
        UnitAddAbility(u, 'A04Y');
        UnitMakeAbilityPermanent(u, true, 'A04Y');
        UnitAddAbility(u, 'A04Z');
        UnitMakeAbilityPermanent(u, true, 'A04Z');
        UnitAddAbility(u, 'A050');
        UnitMakeAbilityPermanent(u, true, 'A050');
        UnitAddAbility(u, 'A051');
        UnitMakeAbilityPermanent(u, true, 'A051');
    }

    if (count == 100)
    {
        if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
        {
            CinematicFilterGenericBJ(3, BLEND_MODE_BLEND, "SkillImage\\CronusF (2).blp", 100, 100, 100, 0, 100, 100, 100, 100);
        }
    }

    if (count == 190)
    {
        Effect("Cronussfx23.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 4.7, 0, 0, 255, 0, PercentTo255(80));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 0, 255, 255, 255, PercentTo255(80));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        SaveReal(GameHT, hid, 0, GetUnitX(t));
        SaveReal(GameHT, hid, 1, GetUnitY(t));
    }

    if (count == 200)
    {
        CC_Unit(u, "disarm", 999);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        IssueImmediateOrderById(u, 851972);
    }

    if (count >= 190 && count <= 390)
    {
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        dist = Distance(x, y, GetUnitX(u), GetUnitY(u));
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRect(g2, GetWorldBounds(), nil);
        GroupRemoveUnit(g2, u);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (IsUnitAlive(d))
            {
                if (Distance(x, y, GetUnitX(d), GetUnitY(d)) <= 1000)
                {
                    SaveBoolean(GameHT, GetHandleId(d), StringHash("CronusFStop"), true);
                    SetPauseUnit(d, true);
                    if (!IsUnitInGroup(d, g1))
                    {
                        GroupAddUnit(g1, d);
                    }
                }
                else
                {
                    if (HaveSavedBoolean(GameHT, GetHandleId(d), StringHash("CronusFStop")))
                    {
                        RemoveSavedBoolean(GameHT, GetHandleId(d), StringHash("CronusFStop"));
                    }
                    if (IsUnitInGroup(d, g1))
                    {
                        SetPauseUnit(d, false);
                        GroupRemoveUnit(g1, d);
                    }
                }
            }
        }
        DestroyGroup(g2);
        if ((dist > 1000 && LoadInteger(GameHT, GetHandleId(u), StringHash("CronusFOn")) == 0) || !IsUnitAlive(u) || count == 390 || LoadInteger(GameHT, GetHandleId(u), StringHash("CronusFOn")) == 5)
        {
            if (LoadInteger(GameHT, GetHandleId(u), StringHash("CronusFOn")) != 5)
            {
                StopSound(LoadSoundHandle(GameHT, GetHandleId(u), StringHash("CronusFBGM")), true, false);
            }
            SoundStart("CronusSE9.mp3");
            visionArea(GetOwningPlayer(u), 1500, 3, x, y);
            if (GetOwningPlayer(u) == GetLocalPlayer())
            {
                CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\CronusF (3).blp", 100, 100, 100, 0, 100, 100, 100, 100);
            }
            e = LoadEffectHandle(GameHT, hid, 0);
            SetSpecialEffectAnimation(e, "death");
            SetSpecialEffectTimeScale(e, 1);
            DestroyEffectTimed(e, 1);
            e = LoadEffectHandle(GameHT, hid, 1);
            DestroyEffectTimed(e, .01f);
            EnableAbility(GetUnitAbility(u, 'A04S'), true, true);
            EnableAbility(GetUnitAbility(u, 'A04T'), true, true);
            EnableAbility(GetUnitAbility(u, 'A04U'), false, true);
            EnableAbility(GetUnitAbility(u, 'A04V'), true, true);
            EnableAbility(GetUnitAbility(u, 'A04W'), true, true);
            EnableAbility(GetUnitAbility(u, 'A04X'), false, true);
            EnableAbility(GetUnitAbility(u, 'A052'), false, true);
            SetPauseUnit(t, false);
            UnitRemoveAbility(u, 'B00G');
            UnitRemoveAbility(u, 'A04Y');
            UnitRemoveAbility(u, 'A04Z');
            UnitRemoveAbility(u, 'A050');
            UnitRemoveAbility(u, 'A051');
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                d = GroupGetUnitByIndex(g1, i);
                SetPauseUnit(d, false);
                if (HaveSavedReal(GameHT, GetHandleId(d), StringHash("CronusFDmg")))
                {
                    if (IsUnitAlive(d))
                    {
                        Effect("Cronussfx21.mdx", GetUnitX(d), GetUnitY(d), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
                        for (int j = 0; j < 9; j++)
                        {
                            Effect("Cronussfx22.mdx", GetUnitX(d), GetUnitY(d), 50 + 150 * j, a, 0, 0, 2, 2, 255, 255, 255, 255);
                        }
                        UnitDamageTarget(u, d, LoadReal(GameHT, GetHandleId(d), StringHash("CronusFDmg")));
                        IssueImmediateOrderById(d, 851972);
                    }
                    RemoveSavedReal(GameHT, GetHandleId(d), StringHash("CronusFDmg"));
                }
                if (HaveSavedBoolean(GameHT, GetHandleId(d), StringHash("CronusFStop")))
                {
                    RemoveSavedBoolean(GameHT, GetHandleId(d), StringHash("CronusFStop"));
                }
            }
            DestroyGroup(g1);
            if (HaveSavedInteger(GameHT, GetHandleId(u), StringHash("CronusFOn")))
            {
                RemoveSavedInteger(GameHT, GetHandleId(u), StringHash("CronusFOn"));
            }
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void CronusT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("CronusT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -500, a);
        y = PolarY(GetUnitY(t), -500, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 14);

        x = PolarX(GetUnitX(t), 500, a);
        y = PolarY(GetUnitY(t), 500, a);
        Effect("Cronus.mdx", x, y, 0, a + 180, 0, 0, 1, 16.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 14);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);

        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 16.4, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count <= 100)
    {
        x = PolarX(GetUnitX(u), 2, a);
        y = PolarY(GetUnitY(u), 2, a);
        SetUnitXY(u, x, y, 0);
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 2, GetSpecialEffectYaw(e));
        y = PolarY(GetSpecialEffectY(e), 2, GetSpecialEffectYaw(e));
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
    }

    if (count == 100)
    {
        SoundStart("CronusR-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 23);
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 23);
    }

    if (count == 180)
    {
        SoundStart("CronusT-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count >= 180 && count <= 230)
    {
        SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1);
        if (LoadInteger(GameHT, hid, 0) >= 3)
        {
            SaveInteger(GameHT, hid, 0, 0);
            SaveInteger(GameHT, hid, 'img', LoadInteger(GameHT, hid, 'img') + 1);
            if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
            {
                if (count != 230)
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\CronusT (" + I2S(LoadInteger(GameHT, hid, 'img')) + ").blp", 100, 100, 100, 0, 100, 100, 100, 0);
                }
                else
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\CronusT (" + I2S(LoadInteger(GameHT, hid, 'img')) + ").blp", 100, 100, 100, 0, 100, 100, 100, 100);
                }
            }
        }
    }

    if (count == 230)
    {
        SoundStart("CronusT-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 4, GetUnitX(u), GetUnitY(u));
        Effect("Cronussfx18.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.01);
        TimeScaleEffect(dummy_effect, 0.7, 3);

        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Cronussfx18.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, GetSpecialEffectYaw(e), 0, 0, 1, 5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.01);
        TimeScaleEffect(dummy_effect, 0.7, 3);
    }

    if (count == 380)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 0.1);

        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationByIndex(e, 4);
        SetSpecialEffectTimeScale(e, 0.1);
    }

    if (count == 440)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitTimeScale(u, 1);
        Effect("Cronussfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 4, 2, 0, 255, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.25);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a + 180, 0, 0, 2.5, 7.5, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 6.5);
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);

        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectTimeScale(e, 1);
        Effect("Cronussfx19.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 50, GetSpecialEffectYaw(e), 0, 0, 4, 2, 0, 255, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.25);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, GetSpecialEffectYaw(e) + 180, 0, 0, 2.5, 7.5, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 6.5);
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 50, GetSpecialEffectYaw(e), 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 560)
    {
        SoundStart("CronusT-3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count == 710)
    {
        SoundStart("CronusT-4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count == 810)
    {
        SoundStart("CronusSE9.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Cronussfx21.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        for (int i = 0; i < 14; i++)
        {
            Effect("Cronussfx1.mdx", GetUnitX(t), GetUnitY(t), 50 + i * 160, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        }
    }

    if (count == 815)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CronusR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("CronusR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 0.9);
        Effect("Cronussfx12.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "hand right"), 3);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "hand left"), 3);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "foot left"), 3);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "foot right"), 3);
    }

    if (count <= 15)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 3 == 0)
        {
            Effect("Cronussfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            Effect("Cronussfx13.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, GetRandomReal(0.75, 1), 1.5, 255, 255, 255, PercentTo255(GetRandomReal(60, 80)));
        }
    }

    if (count == 15 || count == 35)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        RushSlide(t, a, 260, 0.3, 0.02, true);
    }

    if (count == 15)
    {
        SoundStart("CronusSE6.mp3");
        Effect("Cronussfx14.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 7, 1.5, 255, 255, 255, 255);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 1);
    }

    if (count == 35)
    {
        SoundStart("CronusSE5.mp3");
        Effect("Cronussfx14.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 7, 1.5, 255, 255, 255, 255);
        Effect("Cronussfx15.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 0, 255, 0, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a + 30, 0, 0, 1, 2, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 1);
    }

    if (count == 50)
    {
        SoundStart("CronusSE8.mp3");
        SoundStart("CronusSE10.mp3");
        SoundStart("CronusSE11.mp3");
        x = PolarX(GetUnitX(t), -100, a);
        y = PolarY(GetUnitY(t), -100, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 1.4);
        Effect("Cronussfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Cronussfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Cronussfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 5, 2, 0, 255, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Cronussfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 4, 2, 0, 255, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        RushSlide(t, a, 420, 0.6, 0.02, true);
    }

    if (count == 60 || count == 70 || count == 80)
    {
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 0.8);
        TimeScaleEffect(dummy_effect, 0.9, 0.8);
    }

    if (count == 70)
    {
        SoundStart("CronusSE10.mp3");
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 1);
    }

    if (count == 70)
    {
        Effect("Cronussfx12.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Cronussfx13.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Cronussfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 0);
        AnimEffect2(dummy_effect, "death", 1);
    }

    if (count >= 70 && count <= 85)
    {
        if (dist < 700)
        {
            x = PolarX(GetUnitX(u), -20, a);
            y = PolarY(GetUnitY(u), -20, a);
            SetUnitXY(u, x, y, 0);
        }

        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 40, 0);
    }

    if (count >= 85 && count <= 100)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 40, 0);

        if (count % 4 == 0)
        {
            Effect("Cronussfx5.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 1, 2, 255, 255, 255, 0);
            AnimEffect2(dummy_effect, "death", 1);
        }
    }

    if (count == 100)
    {
        SoundStart("CronusNR.mp3");
        SoundStart("CronusSE13.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitFlyHeight(u, 0, 0);
        Effect("Cronussfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Cronussfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        for (int i = 0; i < 18; i++)
        {
            x = PolarX(GetUnitX(u), 350, i * 20);
            y = PolarY(GetUnitY(u), 350, i * 20);
            Effect("Cronussfx26.mdx", x, y, 0, -i * 20, 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }
        Effect("Cronussfx27.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0 , 0, 1, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        for (int i = 0; i < 8; i++)
        {
            if (i < 6)
            {
                x = PolarX(GetUnitX(u), 200, i * 60);
                y = PolarY(GetUnitY(u), 200, i * 60);
                Effect("Cronussfx27.mdx", x, y, 0, randomAngle(), 0 , 0, 1, 1.5, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            }
            x = PolarX(GetUnitX(u), 400, i * 45);
            y = PolarY(GetUnitY(u), 400, i * 45);
            Effect("Cronussfx27.mdx", x, y, 0, randomAngle(), 0 , 0, 1, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 105)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A04V')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 290, 0.6, 0.02, true);
        KnockupUnit(t, 0.6, 0.02, 190);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CronusE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("CronusE.mp3");
        SoundStart("CronusSE5.mp3");
        SetUnitAnimationByIndex(u, 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "hand right"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "hand left"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "foot left"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "foot right"), 1);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1200, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                Effect("Cronussfx11.mdx", GetUnitX(d), GetUnitY(d), 50, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, 0.8);
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A04U') * GetHeroAgi(u, true));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            Effect("Cronussfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("Cronussfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            if (GetRandomInt(1, 2) == 1)
            {
                Effect("Cronussfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 7, 1.5, 255, 255, 255, 255);
            }
            else if (GetRandomInt(1, 2) == 1)
            {
                Effect("Cronussfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, -25, 7, 1.5, 255, 255, 255, 255);
            }
            else
            {
                Effect("Cronussfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 25, 7, 1.5, 255, 255, 255, 255);
            }
        }
    }
    
    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CronusW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("CronusW.mp3");
        SoundStart("CronusSE2.mp3");
        SoundStart("CronusSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 1.5);
        Effect("Cronussfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "hand right"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "hand left"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "foot left"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Cronussfx4.mdx", u, "foot right"), 1);
    }

    if (count == 10)
    {
        SetUnitAnimationByIndex(u, 9);
    }

    if (count <= 15)
    {
        if (dist < 800)
        {
            x = PolarX(GetUnitX(u), -30, a);
            y = PolarY(GetUnitY(u), -30, a);
            SetUnitXY(u, x, y, 0);
        }

        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 40, 0);
    }

    if (count >= 15 && count <= 30)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 40, 0);

        if (count % 3 == 0)
        {
            Effect("Cronussfx5.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 1, 2, 255, 255, 255, 0);
            AnimEffect2(dummy_effect, "death", 1);
        }
    }

    if (count == 30)
    {
        SoundStart("CronusSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitFlyHeight(u, 0, 0);
        Effect("Cronussfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Cronussfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        for (int i = 0; i < 18; i++)
        {
            x = PolarX(GetUnitX(u), 350, i * 20);
            y = PolarY(GetUnitY(u), 350, i * 20);
            Effect("Cronussfx26.mdx", x, y, 0, -i * 20, 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }
        Effect("Cronussfx27.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0 , 0, 1, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        for (int i = 0; i < 8; i++)
        {
            if (i < 6)
            {
                x = PolarX(GetUnitX(u), 200, i * 60);
                y = PolarY(GetUnitY(u), 200, i * 60);
                Effect("Cronussfx27.mdx", x, y, 0, randomAngle(), 0 , 0, 1, 1.5, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
            }
            x = PolarX(GetUnitX(u), 400, i * 45);
            y = PolarY(GetUnitY(u), 400, i * 45);
            Effect("Cronussfx27.mdx", x, y, 0, randomAngle(), 0 , 0, 1, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
        }
    }

    if (count == 35)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A04T')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 350, 0.6, 0.02, true);
        KnockupUnit(t, 0.6, 0.02, 250);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CronusQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("CronusQ.mp3");
        SoundStart("CronusSE1.mp3");
        SoundStart("CronusSE2.mp3");
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 2);
        Effect("Cronussfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Cronussfx3.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1.5, 0, 255, 0, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Cronussfx3.mdx", GetUnitX(u), GetUnitY(u), 100, a + 20, 0, 0, 2, 1.5, 0, 255, 0, 255);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        Effect("Cronussfx3.mdx", GetUnitX(u), GetUnitY(u), 100, a - 20, 0, 0, 2, 1.5, 0, 255, 0, 255);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        for (int i = 0; i < 3; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            x = PolarX(GetSpecialEffectX(e), 1600/12, GetSpecialEffectYaw(e));
            y = PolarY(GetSpecialEffectY(e), 1600/12, GetSpecialEffectYaw(e));
            SetEffectXY(e, x, y, 1);
            SetSpecialEffectHeight(e, 100);
            if (i == 0) { visionArea(GetOwningPlayer(u), 1200, 3, x, y); }

            GroupEnumUnitsInRange(g2, x, y, 250, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A04S'));
                    GroupAddUnit(g1, d);
                }
            }

            if (count % 3 == 0)
            {
                Effect("Cronussfx1.mdx", x, y, 100, GetSpecialEffectYaw(e), -90, 0, 1, 2, 255, 255, 255, 255);
            }

            if (count == 12)
            {
                SetSpecialEffectAnimation(e, "death");
                SetSpecialEffectTimeScale(e, 0.75);
            }
        }
        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JingliuD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("JingliuD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -130, a);
        y = PolarY(GetUnitY(t), -130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 16);
        SetUnitTimeScale(u, 1.3);
        Effect("Jingliusfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Jingliusfx17.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 4, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Jingliusfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 10)
    {
        SoundStart("JingliuSE6.mp3");
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 50, a + 20, 0, 0, 2.75, 2, 255, 255, 255, 255);
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 50, a + 10, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.25, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Jingliusfx23.mdx", GetUnitX(u), GetUnitY(u), 50, a + 90, 0, 0, 3.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        RushSlide(t, a, 400, 1, 0.02, true);
    }

    if (count == 25 || count == 40)
    {
        if (count == 25)
        {
            Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 123, 214, 234, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
            Effect("Jingliusfx3.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 7, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
        }
        Effect("Kianasfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2.5, 123, 214, 234, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Ichigosfx36.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Ichigosfx35.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.3);
        if (count == 40)
        {
            Effect("Jingliusfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
            SetUnitAnimationByIndex(u, 17);
            SetUnitTimeScale(u, 1);
        }
    }

    if (count == 60)
    {
        SoundStart("JingliuSE5.mp3");
        x = PolarX(GetUnitX(t), -10, a);
        y = PolarY(GetUnitY(t), -10, a);
        Effect("Jingliusfx27.mdx", x, y, 0, a + 90, 0, 0, 0.75, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
    }

    if (count == 70)
    {
        Effect("Ichigosfx43.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 80)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JingliuF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float a2 = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("JingliuF.mp3");
        SetUnitXY(u, x, y, 1);
        SetUnitFacingEx(u, a, true);
        SetUnitVertexColor(u, 255, 255, 255, 0);
        visionArea(GetOwningPlayer(u), 1500, 3, GetUnitX(u), GetUnitY(u));
        Effect("Jingliusfx8.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.4);
        Effect("Jingliusfx12.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Jingliusfx15.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 4, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Jingliusfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 2, 155, 176, 193, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.35);
        
        g1 = CreateGroup();
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 650, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        SaveGroupHandle(GameHT, hid, 'grp+', g1);
    }

    if (count == 15)
    {
        x = PolarX(GetUnitX(u), 700, a + 30);
        y = PolarY(GetUnitY(u), 700, a + 30);
        a2 = Angle(x, y, GetUnitX(u), GetUnitY(u));
        Effect("jingliu.mdx", x, y, 0, a2, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 5);
        SetSpecialEffectTimeScale(dummy_effect, 2);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 25)
    {
        SoundStart("JingliuSE4.mp3");
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Jingliusfx18.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, GetSpecialEffectYaw(e), 0, 0, 0.75, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SaveEffectHandle(GameHT, hid, 'wave', dummy_effect);
    }

    if (count >= 25 && count <= 40)
    {
        e = LoadEffectHandle(GameHT, hid, 'wave');
        x = PolarX(GetSpecialEffectX(e), 100, GetSpecialEffectYaw(e));
        y = PolarY(GetSpecialEffectY(e), 100, GetSpecialEffectYaw(e));
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
        if (count == 40)
        {
            SetSpecialEffectAnimation(e, "death");
        }

        SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1);
        if (LoadInteger(GameHT, hid, 0) >= 2)
        {
            SaveInteger(GameHT, hid, 0, 0);
            Effect("Jingliusfx4.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 1.25, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.25);
            Effect("Jingliusfx16.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 2, 1, 255, 255, 255, 255);
        }
    }

    if (count == 30)
    {
        x = PolarX(GetUnitX(u), 700, a + 80);
        y = PolarY(GetUnitY(u), 700, a + 80);
        a2 = Angle(x, y, GetUnitX(u), GetUnitY(u));
        Effect("jingliu.mdx", x, y, 0, a2, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 5);
        SetSpecialEffectTimeScale(dummy_effect, 2);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);

        for (int i = 0; i < 3; i++)
        {
            a2 = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(150, 600), a2);
            y = PolarY(GetUnitY(u), GetRandomReal(150, 600), a2);
            Effect("Jingliusfx13.mdx", x, y, 50, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }
    }

    if (count == 40)
    {
        SoundStart("JingliuSE4.mp3");
        e = LoadEffectHandle(GameHT, hid, 1);
        Effect("Jingliusfx18.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, GetSpecialEffectYaw(e), 0, 0, 0.75, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SaveEffectHandle(GameHT, hid, 'wave' + 1, dummy_effect);
    }

    if (count >= 40 && count <= 55)
    {
        e = LoadEffectHandle(GameHT, hid, 'wave' + 1);
        x = PolarX(GetSpecialEffectX(e), 100, GetSpecialEffectYaw(e));
        y = PolarY(GetSpecialEffectY(e), 100, GetSpecialEffectYaw(e));
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
        if (count == 55)
        {
            SetSpecialEffectAnimation(e, "death");
        }

        SaveInteger(GameHT, hid, 1, LoadInteger(GameHT, hid, 1) + 1);
        if (LoadInteger(GameHT, hid, 1) >= 2)
        {
            SaveInteger(GameHT, hid, 1, 0);
            Effect("Jingliusfx4.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 1.25, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.25);
            Effect("Jingliusfx16.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 2, 1, 255, 255, 255, 255);
        }
    }

    if (count == 45)
    {
        x = PolarX(GetUnitX(u), 700, a + 240);
        y = PolarY(GetUnitY(u), 700, a + 240);
        a2 = Angle(x, y, GetUnitX(u), GetUnitY(u));
        Effect("jingliu.mdx", x, y, 0, a2, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 5);
        SetSpecialEffectTimeScale(dummy_effect, 2);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
    }

    if (count == 55)
    {
        SoundStart("JingliuSE4.mp3");
        e = LoadEffectHandle(GameHT, hid, 2);
        Effect("Jingliusfx18.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, GetSpecialEffectYaw(e), 0, 0, 0.75, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SaveEffectHandle(GameHT, hid, 'wave' + 2, dummy_effect);
    }

    if (count >= 55 && count <= 70)
    {
        e = LoadEffectHandle(GameHT, hid, 'wave' + 2);
        x = PolarX(GetSpecialEffectX(e), 100, GetSpecialEffectYaw(e));
        y = PolarY(GetSpecialEffectY(e), 100, GetSpecialEffectYaw(e));
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
        if (count == 70)
        {
            SetSpecialEffectAnimation(e, "death");
        }

        SaveInteger(GameHT, hid, 2, LoadInteger(GameHT, hid, 2) + 1);
        if (LoadInteger(GameHT, hid, 2) >= 2)
        {
            SaveInteger(GameHT, hid, 2, 0);
            Effect("Jingliusfx4.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 1.25, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.25);
            Effect("Jingliusfx16.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 2, 1, 255, 255, 255, 255);
        }
    }

    if (count == 60)
    {
        x = PolarX(GetUnitX(u), 700, a + 300);
        y = PolarY(GetUnitY(u), 700, a + 300);
        a2 = Angle(x, y, GetUnitX(u), GetUnitY(u));
        Effect("jingliu.mdx", x, y, 0, a2, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 5);
        SetSpecialEffectTimeScale(dummy_effect, 2);
        SaveEffectHandle(GameHT, hid, 3, dummy_effect);

        for (int i = 0; i < 5; i++)
        {
            a2 = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(200, 650), a2);
            y = PolarY(GetUnitY(u), GetRandomReal(200, 650), a2);
            Effect("Jingliusfx13.mdx", x, y, 50, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.7);
        }
    }

    if (count == 70)
    {
        SoundStart("JingliuSE4.mp3");
        e = LoadEffectHandle(GameHT, hid, 3);
        Effect("Jingliusfx18.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, GetSpecialEffectYaw(e), 0, 0, 0.75, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SaveEffectHandle(GameHT, hid, 'wave' + 3, dummy_effect);
    }

    if (count >= 70 && count <= 85)
    {
        e = LoadEffectHandle(GameHT, hid, 'wave' + 3);
        x = PolarX(GetSpecialEffectX(e), 100, GetSpecialEffectYaw(e));
        y = PolarY(GetSpecialEffectY(e), 100, GetSpecialEffectYaw(e));
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);
        if (count == 85)
        {
            SetSpecialEffectAnimation(e, "death");
        }

        SaveInteger(GameHT, hid, 3, LoadInteger(GameHT, hid, 3) + 1);
        if (LoadInteger(GameHT, hid, 3) >= 2)
        {
            SaveInteger(GameHT, hid, 3, 0);
            Effect("Jingliusfx4.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 1.25, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.25);
            Effect("Jingliusfx16.mdx", x, y, 0, GetSpecialEffectYaw(e), 0, 0, 2, 1, 255, 255, 255, 255);
        }
    }

    if (count < 90)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, true);
            SetInvulUnit(d, true);
        }
    }

    if (count == 90)
    {
        SetUnitAnimationByIndex(u, GetRandomInt(16, 17));
        SetUnitTimeScale(u, 1.5);
        SetUnitVertexColor(u, 255, 255, 255, 255);
        Effect("Jingliusfx21.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Jingliusfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.45);
        for (int i = 0; i < 6; i++)
        {
            x = PolarX(GetUnitX(u), 250, i * 60);
            y = PolarY(GetUnitY(u), 250, i * 60);
            Effect("Jingliusfx22.mdx", x, y, 0, i * 60, 0, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
        }

        for (int i = 0; i < 8; i++)
        {
            x = PolarX(GetUnitX(u), 500, i * 45);
            y = PolarY(GetUnitY(u), 500, i * 45);
            Effect("Jingliusfx22.mdx", x, y, 0, i * 45, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        }

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, false);
            SetInvulUnit(d, false);
        }
        DestroyGroup(g1);

        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 650, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            UnitDamageTarget(u, d, 11 * GetHeroAgi(u, true));
            IssueImmediateOrderById(d, 851972);
        }
        DestroyGroup(g2);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JingliuT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("JingliuBGM1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -700, a);
        y = PolarY(GetUnitY(t), -700, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 13);
        SetUnitTimeScale(u, 0.8);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        Effect("Jingliusfx25.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 1.5, 7, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 7, 255, 255, 255, PercentTo255(80));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        Effect("Esdeathsfx17.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 8, 7, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
    }

    if (count <= 216)
    {
        SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1);
        if (LoadInteger(GameHT, hid, 0) >= 4)
        {
            SaveInteger(GameHT, hid, 0, 0);
            SaveInteger(GameHT, hid, 'img', LoadInteger(GameHT, hid, 'img') + 1);
            if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
            {
                if (count != 216)
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\JingliuT (" + I2S(LoadInteger(GameHT, hid, 'img')) + ").blp", 100, 100, 100, 0, 100, 100, 100, 0);
                }
                else
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\JingliuT (" + I2S(LoadInteger(GameHT, hid, 'img')) + ").blp", 100, 100, 100, 0, 100, 100, 100, 100);
                }
            }
        }
    }

    if (count <= 220)
    {
        if (count <= 120)
        {
            x = PolarX(GetUnitX(u), 3, a);
            y = PolarY(GetUnitY(u), 3, a);
            SetUnitXY(u, x, y, 0);
            e = LoadEffectHandle(GameHT, hid, 0);
            SetEffectXY(e, GetUnitX(u), GetUnitY(u), 0);
            SetSpecialEffectHeight(e, 10);
            e = LoadEffectHandle(GameHT, hid, 1);
            SetEffectXY(e, GetUnitX(u), GetUnitY(u), 0);
            SetSpecialEffectHeight(e, 0);
            e = LoadEffectHandle(GameHT, hid, 2);
            SetEffectXY(e, GetUnitX(u), GetUnitY(u), 0);
            SetSpecialEffectHeight(e, 0);
            SaveReal(GameHT, hid, 'anim', LoadReal(GameHT, hid, 'anim') + 0.6 / 120);
            SetSpecialEffectAnimationOffsetPercent(e, LoadReal(GameHT, hid, 'anim'));
        }

        if (count % 10 == 0)
        {
            Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.75, 1.25), 1, 255, 255, 255, 255);
            Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.25, 2.25), 1.5, 128, 188, 189, PercentTo255(90));
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
            Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1.5, 2.75), 1.5, 170, 215, 217, PercentTo255(80));
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
            Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 60, randomAngle(), 0, 0, GetRandomReal(1.25, 1.75), 1.5, 255, 255, 255, PercentTo255(60));
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
            Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1.6, 2.25), 2, 170, 215, 217, PercentTo255(90));
            SetSpecialEffectTimeScale(dummy_effect, 0.4);
        }
    }

    if (count == 120)
    {
        SoundStart("JingliuT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        Effect("Jingliusfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 3, 255, 255, 255, 255);
    }

    if (count == 130)
    {
        Effect("Jingliusfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.25, 3, 255, 255, 255, 255);
    }
    
    if (count == 160)
    {
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 1.4);
        Effect("Jingliusfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
    }

    if (count == 175)
    {
        Effect("Jingliusfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 190)
    {
        Effect("Jingliusfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.75, 3, 255, 255, 255, 255);
    }

    if (count == 220)
    {
        SetUnitAnimationByIndex(u, 11);
        SetUnitTimeScale(u, 0.5);
    }

    if (count >= 220 && count <= 250)
    {
        x = PolarX(GetUnitX(u), -20, a);
        y = PolarY(GetUnitY(u), -20, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 30, 0);
    }

    if (count == 250)
    {
        Effect("Jingliusfx17.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 6, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 2.5, 2.5, 255, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        SaveReal(GameHT, hid, 0, dist - 100);
    }

    if (count >= 255 && count <= 285)
    {
        dist = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(u), dist / 30, a);
        y = PolarY(GetUnitY(u), dist / 30, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 900 / 30, 0);
    }

    if (count == 285)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(e, "death");
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectAnimation(e, "death");
        e = LoadEffectHandle(GameHT, hid, 2);
        SetSpecialEffectAnimation(e, "death");
        SetUnitFlyHeight(u, 0, 0);
        Effect("Esdeathsfx8.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 7, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 290)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Jingliusfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 3, 255, 255, 255, 255);
        Effect("Esdeathsfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 4, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Esdeathsfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Esdeathsfx20.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        Effect("Esdeathsfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Esdeathsfx24.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 4, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("jingliusfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Jingliusfx21.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 295)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JingliuE2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    int iterator = LoadInteger(GameHT, hid, 'iter');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float pitch = .0f;
    effect e = nil;
    float a2 = .0f;
    float dist2 = .0f;
    float x2 = .0f;
    float y2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("JingliuR2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 4, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        Effect("Hutaosfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Hutaosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Hutaosfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a + 180, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 10 || count == 35 || count == 60 || count == 85 || count == 110 || count == 135)
    {
        SetUnitAnimationByIndex(u, GetRandomInt(16, 17));
        SetUnitTimeScale(u, 1.3);
        SetUnitFacingEx(u, a, true);
    }

    if (count <= 15)
    {
        if (dist < 700)
        {
            x = PolarX(GetUnitX(u), -700/15, a);
            y = PolarY(GetUnitY(u), -700/15, a);
            SetUnitXY(u, x, y, 0);
        }
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 700 / 15, 0);
    }

    if (count >= 10 && count <= 153)
    {
        iterator++;
        SaveInteger(GameHT, hid, 'iter', iterator);
        if (iterator >= 7 && count <= 143)
        {
            SaveInteger(GameHT, hid, 'iter', 0);
            pitch = Alpha(GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), GetUnitX(t), GetUnitY(t), 0);
            Effect("Jingliusfx2.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, pitch, 0, 2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            SaveEffectHandle(GameHT, hid, 'eff' + LoadInteger(GameHT, hid, 0), dummy_effect);
            a2 = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(100, 300), a2);
            y = PolarY(GetUnitY(t), GetRandomReal(100, 300), a2);
            dist2 = Distance(GetUnitX(u), GetUnitY(u), x, y);
            a2 = Angle(GetUnitX(u), GetUnitY(u), x, y);
            SaveReal(GameHT, hid, 'dist' + LoadInteger(GameHT, hid, 0), dist2);
            SaveReal(GameHT, hid, 'heig' + LoadInteger(GameHT, hid, 0), GetUnitFlyHeight(u));
            SaveReal(GameHT, hid, 'angl' + LoadInteger(GameHT, hid, 0), a2);
            SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1);
        }

        for (int i = 0; i < LoadInteger(GameHT, hid, 0); i++)
        {
            e = LoadEffectHandle(GameHT, hid, 'eff' + i);
            if (e != nil)
            {
                SaveInteger(GameHT, hid, 'effi' + i, LoadInteger(GameHT, hid, 'effi' + i) + 1);
                dist2 = LoadReal(GameHT, hid, 'dist' + i);
                a2 = LoadReal(GameHT, hid, 'angl' + i);
                x = PolarX(GetSpecialEffectX(e), dist2 / 10, a2);
                y = PolarY(GetSpecialEffectY(e), dist2 / 10, a2);
                SetEffectXY(e, x, y, 0);
                SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - LoadReal(GameHT, hid, 'heig' + i) / 10);
                if (LoadInteger(GameHT, hid, 'effi' + i) >= 10)
                {
                    SetSpecialEffectHeight(e, 50);
                    SetSpecialEffectAnimation(e, "death");
                    Effect("Jingliusfx3.mdx", x, y, 60, randomAngle(), 0, 0, 3, 2, 255, 255, 255, 255);
                    SetSpecialEffectTimeScale(dummy_effect, 0.5);
                    Effect("Jingliusfx7.mdx", x, y, 50, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
                    SetSpecialEffectAnimation(dummy_effect, "death");
                    SetSpecialEffectTimeScale(dummy_effect, 0.8);
                    Effect("jingliusfx9.mdx", x, y, 50, randomAngle(), 0, 0, 3.5, 1.5, 255, 255, 255, 255);
                    SetSpecialEffectTimeScale(dummy_effect, 0.9);
                    Effect("jingliusfx22.mdx", x, y, 0, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
                    RemoveSavedHandle(GameHT, hid, 'eff' + i);
                }
            }
        }
    }

    if (count == 153)
    {
        SetUnitAnimationByIndex(u, 11);
        SetUnitTimeScale(u, 1.5);
        SaveReal(GameHT, hid, 0, dist - 120);
    }

    if (count >= 153 && count <= 173)
    {
        dist = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(u), dist / 20, a);
        y = PolarY(GetUnitY(u), dist / 20, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 35, 0);
    }

    if (count == 173)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("jingliusfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Jingliusfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("jingliusfx15.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 4, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Jingliusfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("jingliusfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.4);
        for (int i = 0; i < 11; i++)
        {
            a2 = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(250, 450), a2);
            y = PolarY(GetUnitY(u), GetRandomReal(250, 450), a2);
            Effect("jingliusfx23.mdx", x, y, GetRandomReal(75, 100), a2, 0, 0, 3, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
        }
        x = PolarX(GetUnitX(u), 50, a);
        y = PolarY(GetUnitY(u), 50, a);
        x2 = PolarX(x, 300, a + 90);
        y2 = PolarY(y, 300, a + 90);
        Effect("Jingliusfx24.mdx", x2, y2, 0, a + 30, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 0.6);
        x2 = PolarX(x, 200, a + 90);
        y2 = PolarY(y, 200, a + 90);
        Effect("Jingliusfx24.mdx", x2, y2, 0, a + 20, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 0.6);
        x2 = PolarX(x, 100, a + 90);
        y2 = PolarY(y, 100, a + 90);
        Effect("Jingliusfx24.mdx", x2, y2, 0, a + 10, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 0.6);
        Effect("Jingliusfx24.mdx", x, y, 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 0.6);
        x2 = PolarX(x, 300, a - 90);
        y2 = PolarY(y, 300, a - 90);
        Effect("Jingliusfx24.mdx", x2, y2, 0, a - 30, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 0.6);
        x2 = PolarX(x, 200, a - 90);
        y2 = PolarY(y, 200, a - 90);
        Effect("Jingliusfx24.mdx", x2, y2, 0, a - 20, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 0.6);
        x2 = PolarX(x, 100, a - 90);
        y2 = PolarY(y, 100, a - 90);
        Effect("Jingliusfx24.mdx", x2, y2, 0, a - 10, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 0.6);
    }

    if (count == 178)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A06P') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JingliuR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("JingliuR.mp3");
        SoundStart("JingliuSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(16, 17));
        Effect("Muramasasfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx55.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), -40, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 50, a + 10, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 50, a + 15, 0, 0, 3, 2, 255, 255, 255, 255);
        RushSlide(t, a, 230, 0.4, 0.02, true);
    }

    if (count == 25 || count == 50)
    {
        SoundStart("EsdeathSE2.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(16, 17));
        Effect("Muramasasfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx55.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), -40, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 50, a - 10, 0, -180, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 50, a - 15, 0, -180, 3, 2, 255, 255, 255, 255);
        if (count != 40)
        {
            RushSlide(t, a, 230, 0.4, 0.02, true);
        }
        else
        {
            RushSlide(t, a, 380, 0.5, 0.02, true);
        }
    }

    if (count >= 60 && count <= 75)
    {
        if (dist > 160)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -140, a);
            y = PolarY(GetUnitY(t), -140, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 75)
    {
        SetUnitAnimationByIndex(u, 12);
        RushSlide(u, a + 180, 240, 0.4, 0.02, true);
    }

    if (count == 90)
    {
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 50, a + 15, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 50, a + 10, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 50, a + 5, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Muramasasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Jingliusfx23.mdx", GetUnitX(t), GetUnitY(t), 50, a + 90, 0, 0, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 95)
    {
        SoundStart("EsdeathSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Jingliusfx19.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Jingliusfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Jingliusfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 38, 215, 209, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Jingliusfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Jingliusfx14.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Jingliusfx21.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        for (int i = 0; i < 11; i++)
        {
            a = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(100, 350), a);
            y = PolarY(GetUnitY(t), GetRandomReal(100, 350), a);
            Effect("Jingliusfx22.mdx", x, y, 0, a, 0, 0, GetRandomReal(2, 3), 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.6, 1));
        }
    }

    if (count == 100)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A06Q')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        if (IsUnitAlive(t))
        {
            SaveUnitHandle(GameHT, GetHandleId(u), StringHash("JingliuE"), t);
            SaveInteger(GameHT, GetHandleId(u), StringHash("JingliuE"), 2);
            if (IsAbilityOnCooldown(GetUnitAbility(u, 'A06P')))
            {
                SetAbilityRemainingCooldown(GetUnitAbility(u, 'A06P'), 0);
            }
            TimerStart(tmr, 5, false, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit u = LoadUnitHandle(GameHT, hid, 'cstr');

                if (LoadInteger(GameHT, GetHandleId(u), StringHash("JingliuE")) == 2)
                {
                    RemoveSavedHandle(GameHT, GetHandleId(u), StringHash("JingliuE"));
                    RemoveSavedInteger(GameHT, GetHandleId(u), StringHash("JingliuE"));
                }
                FlushChildHashtable(GameHT, hid);
                PauseTimer(tmr);
                DestroyTimer(tmr);
            });
        }
        else
        {
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void JingliuE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("JingliuW2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, 400.f, .0f);
        SetUnitFlyHeight(t, 400.f, .0f);
        SetUnitAnimationByIndex(u, 16);
        SetUnitFacingEx(u, a, true);
        Effect("Jingliusfx12.mdx", GetUnitX(u), GetUnitY(u), 400, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
        Effect("Jingliusfx6.mdx", GetUnitX(u), GetUnitY(u), 450, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
    }

    if (count == 15 || count == 30)
    {
        SoundStart("EsdeathSE2.mp3");
        SetUnitAnimationByIndex(u, GetRandomInt(16, 17));
    }

    if (count == 5 || count == 25)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a + 15, 0, -180, 2, 1.5, 255, 255, 255, 255);
        }
        else
        {
            Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a + 15, -20, 0, 2, 1.5, 255, 255, 255, 255);
        }
        Effect("Jingliusfx2.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
    }

    if (count == 15 || count == 35)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a + 15, -20, 0, 2, 1.5, 255, 255, 255, 255);
        }
        else
        {
            Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a + 15, -30, -180, 2, 1.5, 255, 255, 255, 255);
        }
        Effect("Jingliusfx2.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
    }

    if (count == 8 || count == 18 || count == 28 || count == 38)
    {
        Effect("Jingliusfx10.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Jingliusfx9.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 3, 1.5, 255, 255, 255, 255);
    }

    if (count <= 40)
    {
        x = PolarX(GetUnitX(t), 10.f, a);
        y = PolarY(GetUnitY(t), 10.f, a);
        SetUnitXY(t, x, y, 2);
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 40)
    {
        RushSlide(t, a, 400, 0.3, 0.02, true);
        SetUnitFlyHeight(t, .0f, 1333);
    }

    if (count == 50)
    {
        SetUnitAnimationByIndex(u, 11);
        SetUnitTimeScale(u, 1.5);
        SetUnitFlyHeight(u, 0, 1333);
    }

    if (count >= 50 && count <= 65)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 65)
    {
        SoundStart("JingliuSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Jingliusfx21.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        for (int i = 1; i < 7; i++)
        {
            x = PolarX(GetUnitX(u), 200, i * 60);
            y = PolarY(GetUnitY(u), 200, i * 60);
            Effect("Jingliusfx22.mdx", x, y, 0, i * 60, 0, 0, 2.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }

        for (int i = 1; i < 9; i++)
        {
            x = PolarX(GetUnitX(u), 400, i * 45);
            y = PolarY(GetUnitY(u), 400, i * 45);
            Effect("Jingliusfx22.mdx", x, y, 0, i * 45, 0, 0, 2.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }
        Effect("Ryogisfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Ryogisfx14.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 70)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A06P') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JingliuW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("JingliuW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 16);
        Effect("Jingliusfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count <= 20)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 18)
    {
        Effect("Muramasasfx7.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Muramasasfx32.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        Effect("Jingliusfx19.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        RushSlide(t, a, 430, 0.4, 0.02, true);
    }

    if (count == 27)
    {
        SetUnitAnimationByIndex(u, 17);
        SetUnitTimeScale(u, 0.95);
        Effect("Jingliusfx3.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count >= 30 && count <= 45)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 42)
    {
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 60, a + 30, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Jingliusfx20.mdx", GetUnitX(u), GetUnitY(u), 60, a + 20, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Jingliusfx9.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Jingliusfx9.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 45)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Jingliusfx3.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Jingliusfx10.mdx", GetUnitX(t), GetUnitY(t), 50, a + 10, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Jingliusfx10.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Jingliusfx10.mdx", GetUnitX(t), GetUnitY(t), 50, a - 10, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Jingliusfx8.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 50)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A06O')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        if (IsUnitAlive(t))
        {
            SaveUnitHandle(GameHT, GetHandleId(u), StringHash("JingliuE"), t);
            SaveInteger(GameHT, GetHandleId(u), StringHash("JingliuE"), 1);
            if (IsAbilityOnCooldown(GetUnitAbility(u, 'A06P')))
            {
                SetAbilityRemainingCooldown(GetUnitAbility(u, 'A06P'), 0);
            }
            TimerStart(tmr, 5, false, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit u = LoadUnitHandle(GameHT, hid, 'cstr');

                if (LoadInteger(GameHT, GetHandleId(u), StringHash("JingliuE")) == 1)
                {
                    RemoveSavedHandle(GameHT, GetHandleId(u), StringHash("JingliuE"));
                    RemoveSavedInteger(GameHT, GetHandleId(u), StringHash("JingliuE"));
                }
                FlushChildHashtable(GameHT, hid);
                PauseTimer(tmr);
                DestroyTimer(tmr);
            });
        }
        else
        {
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void JingliuQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("JingliuQ.mp3");
        SoundStart("JingliuSE1.mp3");
        SetUnitAnimationByIndex(u, 16);
        SetUnitTimeScale(u, 1.5);
        Effect("Jingliusfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.2);

        Effect("Jingliusfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a + 10, 0, -90, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveReal(GameHT, hid, 0, a + 10);

        Effect("Jingliusfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a - 10, 0, -90, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        SaveReal(GameHT, hid, 1, a - 10);

        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();

        for (int i = 0; i < 2; i++)
        {
            e = LoadEffectHandle(GameHT, hid, i);
            a2 = LoadReal(GameHT, hid, i);
            x = PolarX(GetSpecialEffectX(e), 1600/12, a2);
            y = PolarY(GetSpecialEffectY(e), 1600/12, a2);
            SetEffectXY(e, x, y, 1);
            SetSpecialEffectHeight(e, 50);
            visionArea(GetOwningPlayer(u), 1000, 3, x, y);
            
            GroupEnumUnitsInRange(g2, x, y, 300, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A01A'));
                    GroupAddUnit(g1, d);
                }
            }

            if (count % 2 == 0)
            {
                Effect("Jingliusfx3.mdx", x, y, 0, a2, 0, 0, 1, 1, 255, 255, 255, 255);
                Effect("Jingliusfx4.mdx", x, y, 0, a2, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
            }

            if (count == 12)
            {
                SetSpecialEffectAnimation(e, "death");
                SetSpecialEffectTimeScale(e, 0.8);
            }
        }

        if (count == 12)
        {
            DestroyGroup(g1);
        }
        DestroyGroup(g2);
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ArthurD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ArthurD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        UnitHilang(u, true);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count == 5)
    {
        SoundStart("ArthurSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        a2 = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -130, a2 - 60);
        y = PolarY(GetUnitY(t), -130, a2 - 60);
        a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Arthur Proto.mdx", x, y, 0, a2, 0, 0, 0.95, 0.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 12);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Arthursfx6.mdx", x, y, 50, a2, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 15)
    {
        SoundStart("ArthurSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        a2 = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -130, a2 - 120);
        y = PolarY(GetUnitY(t), -130, a2 - 120);
        a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Arthur Proto.mdx", x, y, 0, a2, 0, 0, 0.95, 0.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 12);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Arthursfx6.mdx", x, y, 50, a2, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }
    
    if (count == 25)
    {
        SoundStart("ArthurSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        a2 = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -130, a2 - 240);
        y = PolarY(GetUnitY(t), -130, a2 - 240);
        a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Arthur Proto.mdx", x, y, 0, a2, 0, 0, 0.95, 0.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 12);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Arthursfx6.mdx", x, y, 50, a2, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 35)
    {
        SoundStart("ArthurSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        a2 = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -130, a2 - 300);
        y = PolarY(GetUnitY(t), -130, a2 - 300);
        a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Arthur Proto.mdx", x, y, 0, a2, 0, 0, 0.95, 0.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 12);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Arthursfx6.mdx", x, y, 50, a2, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 45)
    {
        x = PolarX(GetUnitX(t), -140, a);
        y = PolarY(GetUnitY(t), -140, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 3);
        UnitHilang(u, false);
        Effect("Arthursfx32.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 50)
    {
        SoundStart("ArthurD-1.mp3");
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 1);
    }

    if (count == 70)
    {
        SoundStart("ArthurD-2.mp3");
        Effect("Arthursfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 80)
    {
        x = PolarX(GetUnitX(t), -200, a);
        y = PolarY(GetUnitY(t), -200, a);
        Effect("Arthursfx33.mdx", x, y, 100, a, 0, 0, 2, 2, 255, 220, 0, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        SetUnitAnimationByIndex(u, 3);
    }

    if (count == 90)
    {
        SoundStart("ArthurD-3.mp3");
        SoundStart("ArthurSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), 400, a);
        y = PolarY(GetUnitY(t), 400, a);
        SetUnitXY(u, x, y, 0);
        Effect("Arthursfx34.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Arthursfx31.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 95)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ArthurF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("ArthurF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 15);
        Effect("Arthursfx29.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        dummy_effect = AddSpecialEffectTarget("Arthursfx25.mdx", u, "hand right");
        SetSpecialEffectVertexColour(dummy_effect, 255, 220, 0, 255);
        DestroyEffectTimed(dummy_effect, 2);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Arthursfx30.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 1 || count == 20 || count == 40 || count == 60 || count == 80)
    {
        Effect("Arthursfx19.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
    }

    if (count == 45)
    {
        SetUnitAnimationByIndex(u, 16);
    }

    if (count == 55)
    {
        SoundStart("ArthurSE3.mp3");
        for (int i = 0; i < 7; i++)
        {
            x = PolarX(GetUnitX(u), 50 + 320 * i, a);
            y = PolarY(GetUnitY(u), 50 + 320 * i, a);
            Effect("Arthursfx28.mdx", x, y, 200, a, 270, 0, 0.5, 3, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            AnimEffect2(dummy_effect, "birth", 0.6);
            x = PolarX(GetUnitX(u), 50 + 330 * i, a);
            y = PolarY(GetUnitY(u), 50 + 330 * i, a);
            Effect("Arthursfx31.mdx", x, y, 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
            TimeScaleEffect(dummy_effect, 0.45, 1);
        }
    }

    if (count >= 55 && count <= 105)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        for (int i = 0; i < 8; i++)
        {
            x = PolarX(GetUnitX(u), 50 + 280 * i, a);
            y = PolarY(GetUnitY(u), 50 + 280 * i, a);
            visionArea(GetOwningPlayer(u), 1200, 3, x, y);
            GroupEnumUnitsInRange(g2, x, y, 350, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 11 * GetHeroStr(u, true), 50);
                    CC_Unit(d, "stun", 0.1);
                    GroupAddUnit(g1, d);
                }
            }
        }
        if (count == 105)
        {
            DestroyGroup(g1);
        }
        else
        {
            GroupClear(g1);
        }
        DestroyGroup(g2);
    }

    if (count == 105)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ArthurT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("ArthurT.mp3");
        SoundStart("ArthurT-1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 13);
        Effect("Arthursfx18.mdx", GetUnitX(u), GetUnitY(u), 50, a, -270, 0, 5, 13, 255, 255, 255, 255);
        Effect("Arthursfx20.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 13, 255, 255, 255, 255);

        x = PolarX(GetUnitX(u), 550, a + 60);
        y = PolarY(GetUnitY(u), 550, a + 60);
        Effect("Arthursfx23.mdx", x, y, 0, a + 60, 0, 0, 1.5, 4, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0, 0.1);
        TimeScaleEffect(dummy_effect, 1, 3);

        x = PolarX(GetUnitX(u), 550, a + 120);
        y = PolarY(GetUnitY(u), 550, a + 120);
        Effect("Arthursfx23.mdx", x, y, 0, a + 120, 0, 0, 1.5, 5, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0, 0.1);
        TimeScaleEffect(dummy_effect, 1, 4);

        x = PolarX(GetUnitX(u), 550, a + 180);
        y = PolarY(GetUnitY(u), 550, a + 180);
        Effect("Arthursfx23.mdx", x, y, 0, a + 180, 0, 0, 1.5, 6, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0, 0.1);
        TimeScaleEffect(dummy_effect, 1, 5);

        x = PolarX(GetUnitX(u), 550, a + 240);
        y = PolarY(GetUnitY(u), 550, a + 240);
        Effect("Arthursfx23.mdx", x, y, 0, a + 240, 0, 0, 1.5, 7, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0, 0.1);
        TimeScaleEffect(dummy_effect, 1, 6);

        x = PolarX(GetUnitX(u), 550, a + 300);
        y = PolarY(GetUnitY(u), 550, a + 300);
        Effect("Arthursfx23.mdx", x, y, 0, a + 300, 0, 0, 1.5, 8, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0, 0.1);
        TimeScaleEffect(dummy_effect, 1, 7);

        x = PolarX(GetUnitX(u), 550, a + 360);
        y = PolarY(GetUnitY(u), 550, a + 360);
        Effect("Arthursfx23.mdx", x, y, 0, a + 360, 0, 0, 1.5, 11, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0, 0.1);
        TimeScaleEffect(dummy_effect, 1, 10);
    }

    if (count == 50 || count == 150 || count == 250 || count == 350)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Arthursfx19.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
    }

    if (count == 155 || count == 205 || count == 250 || count == 300 || count == 355 || count == 510)
    {
        SoundStart("ArthurT-2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Arthursfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Arthursfx22.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Arthursfx17.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 550)
    {
        SoundStart("ArthurT-3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 14);
        Effect("Arthursfx24.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 4, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.55);
    }

    if (count == 615)
    {
        SoundStart("ArthurT-4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 15);
        dummy_effect = AddSpecialEffectTarget("Arthursfx25.mdx", u, "hand right");
        SetSpecialEffectVertexColour(dummy_effect, 255, 220, 0, 255);
        DestroyEffectTimed(dummy_effect, 3);
    }

    if (count == 760)
    {
        SetUnitAnimationByIndex(u, 16);
        visionArea(GetOwningPlayer(u), 1500, 3, GetUnitX(t), GetUnitY(t));
        Effect("Arthursfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx27.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        for (int i = 0; i < 8; i++)
        {
            x = PolarX(GetUnitX(u), 50 + 300 * i, a);
            y = PolarY(GetUnitY(u), 50 + 300 * i, a);
            Effect("Arthursfx28.mdx", x, y, 200, a, 270, 0, 0.45, 2.5, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            AnimEffect2(dummy_effect, "birth", 1);
        }
    }

    if (count == 760 || count == 770 || count == 780 || count == 790 || count == 800 || count == 810)
    {
        Effect("Arthursfx17.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 820)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ArthurR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ArthurR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Arthursfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 7);
    }

    if (count == 5)
    {
        SoundStart("ArthurSE1.mp3");
        Effect("Arthursfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Arthursfx13.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, PercentTo255(50));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 20)
    {
        SoundStart("ArthurR-1.mp3");
        UnitHilang(u, true);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count == 30 || count == 50 || count == 70)
    {
        SoundStart("ArthurSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        a = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -130, a - 55);
        y = PolarY(GetUnitY(t), -130, a - 55);
        a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Arthur Proto.mdx", x, y, 0, a2, 0, 0, 0.95, 0.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 12);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Arthursfx6.mdx", x, y, 50, a2, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 40 || count == 60 || count == 80)
    {
        SoundStart("ArthurSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        a = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -130, a + 55);
        y = PolarY(GetUnitY(t), -130, a + 55);
        a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Arthur Proto.mdx", x, y, 0, a2, 0, 0, 0.95, 0.4, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 12);
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        Effect("Arthursfx6.mdx", x, y, 50, a2, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count >= 10 && count <= 90)
    {
        x = PolarX(GetUnitX(t), 10, a);
        y = PolarY(GetUnitY(t), 10, a);
        SetUnitXY(t, x, y, 2);
        e = LoadEffectHandle(GameHT, hid, 0);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 0);

        if (count % 10 == 0)
        {
            Effect("Arthursfx13.mdx", GetUnitX(t), GetUnitY(t), 100, a, -90, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 90)
    {
        x = PolarX(GetUnitX(t), 120, a);
        y = PolarY(GetUnitY(t), 120, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 0.9);
        UnitHilang(u, false);
    }

    if (count == 100)
    {
        SoundStart("ArthurR-2.mp3");
        x = PolarX(GetUnitX(u), -50, a);
        y = PolarY(GetUnitY(u), -50, a);
        Effect("Arthursfx14.mdx", x, y, 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 110)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Arthursfx15.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Arthursfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 115)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A03C')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ArthurE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("ArthurE.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 1.25);
        Effect("Arthursfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        RushSlide(u, a, dist, 0.2, 0.02, false);
        KnockupUnit(u, 0.2, 0.02, 410);
    }

    if (count <= 12)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("Arthursfx12.mdx", u, "hand right"), 1);
    }

    if (count == 12)
    {
        SoundStart("ArthurSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Arthursfx11.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.1, 2.5, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Arthursfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Arthursfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        for (int i = 1; i < 13; i++)
        {
            x2 = PolarX(GetUnitX(u), 350, i * 30);
            y2 = PolarY(GetUnitY(u), 350, i * 30);
            Effect("Arthursfx3.mdx", x2, y2, 0, a, 0, 0, 1.8, 1.5, 255, 255, 255, 255);
        }

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A03B') * GetHeroStr(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ArthurW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("ArthurW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Arthursfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 1.5);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count == 10)
    {
        SoundStart("ArthurSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Arthursfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        RushSlide(t, a, 600, 0.6, 0.02, true);
    }

    if (count == 15 || count == 20 || count == 25 || count == 30 || count == 35)
    {
        Effect("Arthursfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 40)
    {
        SoundStart("ArthurSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        a = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -120, a - 75);
        y = PolarY(GetUnitY(t), -120, a - 75);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 7);
        Effect("Arthursfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 50)
    {
        SoundStart("ArthurSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        a = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), -120, a + 75);
        y = PolarY(GetUnitY(t), -120, a + 75);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 7);
        Effect("Arthursfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    } 

    if (count == 60)
    {
        SoundStart("ArthurSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        a = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 7);
        Effect("Arthursfx6.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Arthursfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Arthursfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    } 

    if (count == 65)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A03A')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void ArthurQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("ArthurQ.mp3");
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 3);
        Effect("Arthursfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.25, 1.5, 255, 255, 255, 255);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A039'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            Effect("Arthursfx1.mdx", x, y, 100, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
            Effect("Arthursfx3.mdx", x, y, 0, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
            Effect("Arthursfx4.mdx", x, y, 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SaboD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("SaboG.mp3");
        SoundStart("SaboSE6.mp3");
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 1.5);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 15)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/15, a);
        y = PolarY(GetSpecialEffectY(e), 1600/15, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 8 * GetHeroStr(u, true));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 15)
        {
            DestroyGroup(g1);
            Effect("Sabosfx11.mdx", x, y, 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
            Effect("Sabosfx12.mdx", x, y, 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
            Effect("Sabosfx13.mdx", x, y, 50, a + 45, 90, 0, 2, 2, 255, 255, 255, 255);
            AnimEffect2(dummy_effect, "death", 1);
        }

        if (count % 2 == 0)
        {
            Effect("Sabosfx2.mdx", x, y, 100, a, -90, 0, 1.5, 2, 255, 255, 255, 255);
        }
    }

    if (count == 15)
    {
        SoundStart("SaboSE5.mp3");
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SaboF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("SaboF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        SetUnitAnimationByIndex(u, 5);
    }

    if (count == 25)
    {
        SoundStart("SaboSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        Effect("Sabosfx4.mdx", x, y, 0, randomAngle(), 0, 0, 2.2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        for (int i = 1; i < 14; i++)
        {
            a = randomAngle();
            x2 = PolarX(x, GetRandomReal(100, 400), a);
            y2 = PolarY(y, GetRandomReal(100, 400), a);
            Effect("Sabosfx1.mdx", x2, y2, 0, randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
            Effect("Sabosfx10.mdx", x2, y2, 0, randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
        }
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 11 * GetHeroStr(u, true));
            }
        }
        DestroyGroup(g1);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SaboT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("SaboT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 2);
    }

    if (count == 15)
    {
        SoundStart("SaboSE3.mp3");
        SetUnitXY(u, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Sabosfx8.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
        for (int i = 1; i < 9; i++)
        {
            x2 = PolarX(x, 350, i * 45);
            y2 = PolarY(y, 350, i * 45);
            Effect("Sabosfx9.mdx", x2, y2, 0, randomAngle(), 0, 0, 1.3, 2, 255, 255, 255, 255);
        }
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 15 * GetHeroStr(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SaboR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("SaboR.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitVertexColor(u, 255, 255, 255, 0);
    }

    if (count == 10)
    {
        SoundStart("SaboSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -300, a + 45);
        y = PolarY(GetUnitY(t), -300, a + 45);
        a = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Sabo.mdx", x, y, 0, a, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        SetSpecialEffectTimeScale(dummy_effect, 1.75);
        Effect("Sabosfx6.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Sabosfx7.mdx", x, y, 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 25)
    {
        SoundStart("SaboSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -300, a + 135);
        y = PolarY(GetUnitY(t), -300, a + 135);
        a = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Sabo.mdx", x, y, 0, a, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        SetSpecialEffectTimeScale(dummy_effect, 1.75);
        Effect("Sabosfx6.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Sabosfx7.mdx", x, y, 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 40)
    {
        SoundStart("SaboSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -300, a + 225);
        y = PolarY(GetUnitY(t), -300, a + 225);
        a = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Sabo.mdx", x, y, 0, a, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        SetSpecialEffectTimeScale(dummy_effect, 1.75);
        Effect("Sabosfx6.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Sabosfx7.mdx", x, y, 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 55)
    {
        SoundStart("SaboSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -300, a + 315);
        y = PolarY(GetUnitY(t), -300, a + 315);
        a = Angle(x, y, GetUnitX(t), GetUnitY(t));
        Effect("Sabo.mdx", x, y, 0, a, 0, 0, 1, 0.6, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        SetSpecialEffectTimeScale(dummy_effect, 1.75);
        Effect("Sabosfx6.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Sabosfx7.mdx", x, y, 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 65)
    {
        SetUnitVertexColor(u, 255, 255, 255, 255);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A01B')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SaboE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("SaboD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
    }

    if (count == 15)
    {
        SoundStart("SaboSE3.mp3");
        SetUnitXY(u, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Sabosfx4.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 3.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A01E') * GetHeroStr(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SaboW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("SaboW.mp3");
        SoundStart("SaboSE1.mp3");
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 1.5);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        if (count == 1) { RushSlide(u, a, 1200, 0.2, 0.02, false); }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, (1 + GetUnitAbilityLevel(u, 'A019')) * GetHeroStr(u, true));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            Effect("Sabosfx3.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
            Effect("Sabosfx4.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, 1, 2, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SaboQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("SaboQ.mp3");
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 2);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A018'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            Effect("Sabosfx1.mdx", x, y, 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
            Effect("Sabosfx2.mdx", x, y, 100, a, -90, 0, 1, 2, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SalterD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("SalterD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 6);
        Effect("Hydesfx13.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Saltersfx33.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 4, 103, 6, 3, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count <= 145)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 12, a);
            y = PolarY(GetUnitY(u), dist / 12, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 5, a);
            y = PolarY(GetUnitY(t), 5, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
        e = LoadEffectHandle(GameHT, hid, 0);
        SetEffectXY(e, GetUnitX(u), GetUnitY(u), 0);
        SetSpecialEffectHeight(e, 0);

        if (count == 20 || count == 40 || count == 60 || count == 80 || count == 100 || count == 120 || count == 140)
        {
            SetUnitAnimationByIndex(u, GetRandomInt(7, 9));
            SetUnitTimeScale(u, 1.25);
            Effect("Saltersfx12.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
            CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.22, 0.42, 0.02, GetUnitAnimationOffsetPercent(u));
        }

        if (count == 25 || count == 45 || count == 65 || count == 85 || count == 105 || count == 125 || count == 145)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
            Effect("Saltersfx38.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Saltersfx25.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
            if (GetRandomInt(1, 2) == 1)
            {
                Effect("Saltersfx32.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), 0, 0, 6, 2, 255, 255, 255, 255);
            }
            else
            {
                Effect("Saltersfx32.mdx", GetUnitX(u), GetUnitY(u), 100, a + GetRandomReal(-90, 90), 0, 40, 6, 2, 255, 255, 255, 255);
            }
            Effect("Saltersfx34.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 8, 2, 255, 255, 255, 255);
            Effect("Saltersfx35.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
            Effect("Hydesfx18.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), GetRandomReal(-20, 20), 0, 1, 2, 128, 12, 6, PercentTo255(80));
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
            Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
            if (GetRandomInt(1, 2) == 1)
            {
                SetSpecialEffectAnimationByIndex(dummy_effect, 1);
            }
            else
            {
                SetSpecialEffectAnimationByIndex(dummy_effect, 3);
            }
        }
    }
    
    if (count == 145)
    {
        RushSlide(t, a, 400, 0.4, 0.02, true);
    }

    if (count == 150)
    {
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 1.5);
    }

    if (count == 155)
    {
        DestroyEffectTimed(LoadEffectHandle(GameHT, hid, 0), .01f);
        Effect("Saltersfx40.mdx", GetUnitX(u), GetUnitY(u), 200, a, 0, 90, 5, 2, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count >= 155 && count <= 185)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));
        if (dist > 120)
        {
            x = PolarX(GetSpecialEffectX(e), dist / 10, a);
            y = PolarY(GetSpecialEffectY(e), dist / 10, a);
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectHeight(e, 50);
        }
        else
        {
            x = PolarX(GetUnitX(t), 5, a);
            y = PolarY(GetUnitY(t), 5, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -100, a);
            y = PolarY(GetUnitY(t), -100, a);
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectHeight(e, 50);
        }

        if (count % 5 == 0)
        {
            Effect("Saltersfx39.mdx", x, y, 100, a, 0, 0, 2, 1, 255, 255, 255, 255);
        }
    }

    if (count == 185)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(e, "death");
        Effect("Saltersfx34.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 8, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Saltersfx35.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Saltersfx2.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Saltersfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx14.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SalterF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    int iterator = LoadInteger(GameHT, hid, 'iter');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    effect e = nil;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("SalterF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 4);
        Effect("Saltersfx30.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Hydesfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Saltersfx14.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 10 || count == 30 || count == 50 || count == 70 || count == 90)
    {
        Effect("Saltersfx16.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.5, 1), 2, 255, 255, 255, 255);
        Effect("Saltersfx27.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count == 15 || count == 100)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count == 70)
    {
        SetUnitTimeScale(u, 2);
    }

    if (count == 75)
    {
        SoundStart("SalterF-1.mp3");
    }

    if (count == 80)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Hydesfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Saltersfx14.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 103, 6, 3, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 120)
    {
        g2 = CreateGroup();
        GroupEnumUnitsInRect(g2, GetWorldBounds(), nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            CC_SLOW_EFFECT = 0.9;
            CC_Unit(d, "slow", 0.1);
        }

        if (count >= 80)
        {
            e = LoadEffectHandle(GameHT, hid, 0);
            x = PolarX(GetSpecialEffectX(e), 62.5, a);
            y = PolarY(GetSpecialEffectY(e), 62.5, a);
            SetEffectXY(e, x, y, 1);
            visionArea(GetOwningPlayer(u), 1200, 3, x, y);

            g1 = LoadGroupHandle(GameHT, hid, 'grp+');
            GroupEnumUnitsInRange(g2, x, y, 400, nil);
            for (int i = 0; i < GroupGetCount(g2); i++)
            {
                d = GroupGetUnitByIndex(g2, i);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    if (GetUnitAbilityLevel(u, 'B006') > 0)
                    {
                        UnitDamageTarget(u, d, 11 * GetHeroStr(u, true) * 1.1);
                    }
                    else
                    {
                        UnitDamageTarget(u, d, 11 * GetHeroStr(u, true));
                    }
                    GroupAddUnit(g1, d);
                }
            }

            if (count % 2 == 0)
            {
                Effect("Saltersfx31.mdx", x, y, 0, a, 0, 0, 1.7, 1, 255, 255, 255, 255);
                SetSpecialEffectAnimation(dummy_effect, "stand");
            }
        }

        DestroyGroup(g2);
        if (count == 120)
        {
            DestroyGroup(g1);
        }

        iterator++;
        SaveInteger(GameHT, hid, 'iter', iterator);
        if ((iterator >= 3 && count <= 90) || (iterator >= 2 && count >= 90 && count <= 120))
        {
            SaveInteger(GameHT, hid, 'iter', 0);
            SaveInteger(GameHT, hid, 'img', LoadInteger(GameHT, hid, 'img') + 1);
            if (GetOwningPlayer(u) == GetLocalPlayer())
            {
                if (count != 120)
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\SalterF (" + I2S(LoadInteger(GameHT, hid, 'img')) + ").blp", 100, 100, 100, 0, 100, 100, 100, 0);
                }
                else
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\SalterF (" + I2S(LoadInteger(GameHT, hid, 'img')) + ").blp", 100, 100, 100, 0, 100, 100, 100, 100);
                }
            }
        }
    }

    if (count == 130)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SalterT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("SalterT.mp3");
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 0);
        visionArea(GetOwningPlayer(u), 1200, 8, GetUnitX(u), GetUnitY(u));
    }

    if (count <= 230)
    {
        if (count % 5 == 0)
        {
            Effect("Saltersfx3.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(0.5, 1.5), 2, 170, 72, 206, PercentTo255(60));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            Effect("Saltersfx20.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 2, 208, 28, 64, PercentTo255(80));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            Effect("Saltersfx20.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(1, 2), 2, 20, 16, 16, PercentTo255(80));
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
    }
    
    if (count == 230)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 1.1);
        Effect("Saltersfx14.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Saltersfx15.mdx", GetUnitX(u), GetUnitY(u), 150, a, 0, -180, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Saltersfx9.mdx", GetUnitX(t), GetUnitY(t), 150, a + 90, -40, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx9.mdx", GetUnitX(t), GetUnitY(t), 150, a - 90, -40, 0, 1.5, 2, 255, 255, 255, 255);
        for (int i = 1; i < 9; i++)
        {
            x = PolarX(GetUnitX(t), 250, i * 45);
            y = PolarY(GetUnitY(t), 250, i * 45);
            Effect("Saltersfx19.mdx", x, y, GetRandomReal(0, 50), randomAngle(), 0, 0, 0.4, 2, 255, 255, 255, 255);
            SetSpecialEffectAnimationByIndex(dummy_effect, GetRandomInt(2, 4));
        }
    }

    if (count == 240)
    {
        RushSlide(t, a, 800, 2.4, 0.02, true);
    }

    if (count == 250)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count == 330)
    {
        SetUnitAnimationByIndex(u, 6);
        Effect("Hydesfx13.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count >= 330 && count <= 500)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 5, a);
            y = PolarY(GetUnitY(t), 5, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 10 == 0)
        {
            Effect("Saltersfx21.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(0.5, 1.5), 1, 154, 37, 172, PercentTo255(40));
            Effect("Saltersfx22.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 38, 38, 38, PercentTo255(60));
            Effect("Saltersfx23.mdx", GetUnitX(u), GetUnitY(u), 100, a, -90, 0, GetRandomReal(0.75, 1.25), 1, 205, 57, 47, PercentTo255(80));
        }

        if (count == 380 || count == 400 || count == 420 || count == 440 || count == 460 || count == 480)
        {
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
            SetUnitAnimationByIndex(u, GetRandomInt(8, 9));
            SetUnitTimeScale(u, 1.2);
            Effect("Saltersfx24.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(0.5, 1), 2, 255, 255, 255, PercentTo255(80));
            if (GetRandomInt(1, 2) == 1)
            {
                Effect("Saltersfx15.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, -180, 5, 2, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, 0.8);
            }
            else
            {
                Effect("Saltersfx15.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 5, 2, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, 0.8);
            }
            Effect("Saltersfx25.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1, 1.5), 2, 255, 255, 255, 255);
            Effect("Saltersfx9.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), GetRandomReal(-20, 20), 0, 1, 2, 255, 255, 255, 255);
        }
    }

    if (count == 500)
    {
        RushSlide(t, a, 500, 0.6, 0.02, true);
    }

    if (count == 530 || count == 540 || count == 550 || count == 560 || count == 570 || count == 580 || count == 590 || count == 600 || count == 610 || count == 620)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        if (count > 530)
        {
            Effect("Hydesfx17.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1, 1, 255, 255, 255, 255);
            a = randomAngle();
            x = PolarX(GetUnitX(t), 600, a);
            y = PolarY(GetUnitY(t), 600, a);
            SetUnitXY(u, x, y, 0);
        }
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 1.4);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        Effect("Hydesfx13.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        RushSlide(u, GetUnitFacing(u), 1200, 0.18, 0.02, false);
    }

    if (count == 535 || count == 545 || count == 555 || count == 565 || count == 575 || count == 585 || count == 595 || count == 605 || count == 615 || count == 625)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Saltersfx9.mdx", GetUnitX(t), GetUnitY(t), 100, GetUnitFacing(u), 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 640)
    {
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -200, a);
        y = PolarY(GetUnitY(t), -200, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 1);
        Effect("Saltersfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 3.6, 220, 70, 60, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        Effect("Saltersfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 3.6, 0, 0, 0, PercentTo255(80));
        SetSpecialEffectAnimation(dummy_effect, "stand");
    }

    if (count == 640 || count == 660 || count == 680 || count == 700 || count == 720 || count == 740 || count == 760 || count == 780)
    {
        Effect("Saltersfx14.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, GetRandomReal(0.5, 1.25), 2, 255, 255, 255, 255);
        if (count < 740)
        {
            Effect("Saltersfx27.mdx", GetUnitX(u), GetUnitY(u), 50, a + GetRandomReal(-40, 40), 0, 0, 2, 1, 103, 6, 3, 255);
        }
    }

    if (count == 650)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count == 740)
    {
        visionArea(GetOwningPlayer(u), 1500, 5, GetUnitX(t), GetUnitY(t));
        SetUnitTimeScale(u, 1.25);
        for (int i = 1; i < 13; i++)
        {
            x = PolarX(GetUnitX(u), 300, i * 30);
            y = PolarY(GetUnitY(u), 300, i * 30);
            Effect("Saltersfx29.mdx", x, y, 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }
        x = PolarX(GetUnitX(u), -50, a);
        y = PolarY(GetUnitY(u), -50, a);
        Effect("Saltersfx28.mdx", x, y, 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.6, 0.4);
        RushSlide(t, a, 300, 2, 0.02, true);
    }

    if (count == 730 || count == 734 || count == 738 || count == 742 || count == 746 || count == 750 || count == 754 || count == 758 || count == 762 || count == 766 || count == 770 || count == 774
    || count == 778 || count == 782 || count == 786 || count == 790 || count == 794 || count == 798 || count == 802 || count == 806 || count == 810)
    {
        SaveInteger(GameHT, hid, 'img', LoadInteger(GameHT, hid, 'img') + 1);
        if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
        {
            if (count != 810)
            {
                CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\SalterT (" + I2S(LoadInteger(GameHT, hid, 'img')) + ").blp", 100, 100, 100, 0, 100, 100, 100, 0);
            }
            else
            {
                CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\SalterT (" + I2S(LoadInteger(GameHT, hid, 'img')) + ").blp", 100, 100, 100, 0, 100, 100, 100, 100);
            }
        }
    }

    if (count == 830)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SalterR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("SalterR.mp3");
        Effect("Hydesfx17.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Saltersfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 0);
        Effect("Hydesfx17.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 20)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 7);
        Effect("Saltersfx14.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Saltersfx15.mdx", GetUnitX(u), GetUnitY(u), 150, a, 0, -180, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Saltersfx9.mdx", GetUnitX(t), GetUnitY(t), 150, a + 90, -40, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx9.mdx", GetUnitX(t), GetUnitY(t), 150, a - 90, -40, 0, 1.5, 2, 255, 255, 255, 255);
    }

    if (count == 25)
    {
        RushSlide(t, a, 500, 1.8, 0.02, true);
    }

    if (count == 50)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 8);
    }

    if (count == 55)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count == 60 || count == 70 || count == 80 || count == 90 || count == 100)
    {
        Effect("Saltersfx16.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, GetRandomReal(0.5, 1), 2, 255, 255, 255, 255);
    }

    if (count == 100)
    {
        SetUnitTimeScale(u, 1);
        Effect("Saltersfx17.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 110)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        for (int i = 1; i < 5; i++)
        {
            x = PolarX(GetUnitX(u), 250 * i, a);
            y = PolarY(GetUnitY(u), 250 * i, a);
            Effect("saltersfx2.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
            Effect("Saltersfx18.mdx", x, y, 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A014')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SalterW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("SalterW.mp3");
        SetUnitAnimationByIndex(u, 0);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
    }

    if (count == 10 || count == 20 || count == 30 || count == 50 || count == 70 || count == 105 || count == 140)
    {
        Effect("Saltersfx3.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 1, 2, 212, 45, 45, PercentTo255(80));
        Effect("Saltersfx4.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
    }

    if (count == 30)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 1.2);
    }

    if (count == 40)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Saltersfx5.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Saltersfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx7.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Saltersfx8.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.4, 0.02, true);
        SetUnitFlyHeight(t, 300, 750);
    }

    if (count == 65 || count == 100 || count == 135)
    {
        Effect("Hydesfx17.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(8, 9));
        SetUnitTimeScale(u, 1.4);
    }

    if (count == 75)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Saltersfx5.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Saltersfx6.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx7.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Saltersfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.4, 0.02, true);
        SetUnitFlyHeight(t, 500, 500);
    }

    if (count == 110)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Saltersfx5.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Saltersfx6.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx7.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Saltersfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.4, 0.02, true);
    }

    if (count == 145)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Saltersfx5.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Saltersfx6.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Saltersfx7.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Saltersfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        RushSlide(t, a, 400, 0.4, 0.02, true);
        SetUnitFlyHeight(t, 0, 1250);
    }

    if (count == 155)
    {
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 1.25);
    }

    if (count == 160)
    {
        Effect("Saltersfx9.mdx", GetUnitX(t), GetUnitY(t), 300, a, -45, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 165)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hydesfx17.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, 0, 0);
        Effect("Saltersfx5.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Saltersfx10.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("saltersfx11.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Saltersfx12.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A012')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SalterQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("SalterQ.mp3");
        SetUnitAnimationByIndex(u, 7);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A011'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 12)
        {
            DestroyGroup(g1);
        }

        if (count % 2 == 0)
        {
            Effect("Saltersfx1.mdx", x, y, 0, a, -20, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "stand");
            Effect("Saltersfx2.mdx", x, y, 0, a, 0, 20, 1, 1, 255, 255, 255, 255);
            Effect("Saltersfx2.mdx", x, y, 0, a, 0, -20, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FuxuanD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("FuxuanD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Fuxuansfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Fuxuansfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Fuxuansfx14.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Fuxuansfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("fuxuansfx21.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        Effect("fuxuansfx25.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 2, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 1.4);
    }

    if (count == 15)
    {
        Effect("Fuxuansfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 20)
    {
        Effect("Fuxuansfx19.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Fuxuansfx15.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 1);
    }

    if (count == 80)
    {
        SoundStart("FuxuanSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Fuxuansfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Fuxuansfx8.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Fuxuansfx11.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 7, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FuxuanF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("FuxuanF.mp3");
        visionArea(GetOwningPlayer(u), 1200, 8, GetUnitX(u), GetUnitY(u));
        Effect("Fuxuansfx23.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 8, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "stand", 0.4);
        AnimEffect2(dummy_effect, "death", 7);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.5, 8, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count == 10)
    {
        Effect("Fuxuansfx18.mdx", GetUnitX(t), GetUnitY(t), 10, a, 0, 0, 0.8, 8, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        AnimEffect2(dummy_effect, "death", 7);
        Effect("Fuxuansfx25.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.8, 8, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 7);
    }

    if (count == 50)
    {
        Effect("Fuxuansfx15.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 8, 7, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 6);
    }

    if (count == 120)
    {
        Effect("Fuxuansfx13.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 6, 255, 255, 255, 255); 
        SetSpecialEffectTimeScale(dummy_effect, 0.4);  
    }

    if (count >= 25 && count <= 325)
    {
        if (count % 10 == 0)
        {
            Effect("Fuxuansfx19.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(2, 4), 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
            Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1.5, 3.5), 1.5, 255, 17, 255, PercentTo255(GetRandomReal(60, 80)));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
    }

    if (count == 350)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Fuxuansfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 8, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Fuxuansfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Fuxuansfx17.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FuxuanT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("FuxuanT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Fuxuansfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Fuxuansfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 3, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        Effect("Fuxuansfx23.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "stand", 0.4);
        AnimEffect2(dummy_effect, "death", 2.4);
        Effect("Fuxuansfx26.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1.7, 3.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 3);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 5 || count == 15 || count == 25 || count == 45 || count == 55 || count == 70 || count == 90 || count == 100 || count == 115 || count == 130)
    {
        Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, GetRandomReal(1.5, 2.5), 1.5, 255, 102, 255, PercentTo255(GetRandomReal(60, 80)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
    }

    if (count == 30)
    {
        Effect("Fuxuansfx15.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 6, 3, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 1.6);
    }

    if (count <= 100)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimationOffsetPercent(e, count * 0.01);
    }

    if (count >= 100 && count <= 150)
    {
        if (count == 100)
        {
            Effect("Fuxuansfx24.mdx", GetUnitX(t), GetUnitY(t), -10, a, 0, 0, 1, 2.5, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            AnimEffect2(dummy_effect, "death", 1.6);
            SaveEffectHandle(GameHT, hid, 1, dummy_effect);
        }
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectAnimationOffsetPercent(e, (count - 100) * 0.007);
    }

    if (count == 140)
    {
        KnockupUnit(t, 0.8, 0.02, 440);
    }

    if (count == 150)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Fuxuansfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 7, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Fuxuansfx7.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Fuxuansfx17.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Fuxuansfx9.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.5);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FuxuanR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("FuxuanR.mp3");
        SoundStart("FuxuanSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Fuxuansfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 1.5, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 1);
        Effect("Black.mdx", x, y, 0, a, 0, 0, 1.5, 1, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count % 5 == 0)
    {
        Effect("Fuxuansfx5.mdx", x, y, 50, randomAngle(), 0, 0, GetRandomReal(1, 2), 1, 255, 102, 255, PercentTo255(GetRandomReal(60, 80)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 40)
    {
        SoundStart("FuxuanSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);
        Effect("Fuxuansfx12.mdx", x, y, 0, randomAngle(), 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);
        Effect("Fuxuansfx7.mdx", x, y, 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Fuxuansfx8.mdx", x, y, 0, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Fuxuansfx21.mdx", x, y, 100, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, (9 + GetUnitAbilityLevel(u, 'A06K')) * GetHeroInt(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FuxuanE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("FuxuanE.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Fuxuansfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Fuxuansfx10.mdx", GetUnitX(u), GetUnitY(u), 60, a, 90, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 1.75);
        AnimEffect2(dummy_effect, "death", 1);
        TimeScaleEffect(dummy_effect, 1, 1);
        Effect("Fuxuansfx1.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Fuxuansfx11.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Fuxuansfx9.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 7, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Fuxuansfx25.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.4, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 1);
    }

    if (count == 15)
    {
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A06J') * GetHeroInt(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FuxuanW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("FuxuanW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count == 10)
    {
        Effect("Fuxuansfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacing(u, a + 180);
        Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 118, 206, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        x = PolarX(GetUnitX(u), 50, a + 180);
        y = PolarY(GetUnitY(u), 50, a + 180);
        Effect("Fuxuansfx22.mdx", x, y, 100, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 15)
    {
        SetUnitAnimationByIndex(u, 1);
        SetUnitTimeScale(u, 0.75);
    }

    if (count == 45)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Fuxuansfx4.mdx", GetUnitX(u), GetUnitY(u), 70, a, 0, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Fuxuansfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Fuxuansfx2.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Fuxuansfx3.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 2, 255, 118, 206, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Fuxuansfx21.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 1.5, 2.5, 255, 118, 206, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        RushSlide(t, a, 350, 0.6, 0.02, true);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A06I')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FuxuanQ2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("FuxuanQ2.mp3");
        SoundStart("FuxuanSE1.mp3");
        SetUnitAnimationByIndex(u, 1);
    }

    if (count == 10)
    {
        Effect("Fuxuansfx21.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        Effect("Fuxuansfx6.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetUnitXY(u, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Fuxuansfx2.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 7, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Fuxuansfx6-2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        Effect("Fuxuansfx7.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Fuxuansfx8.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Fuxuansfx21.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A06H') * GetHeroInt(u, true));
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void FuxuanQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("FuxuanQ.mp3");
        SoundStart("FuxuanSE1.mp3");
        SetUnitAnimationByIndex(u, 1);
        Effect("Fuxuansfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 214, 52, 132, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Fuxuansfx4.mdx", GetUnitX(u), GetUnitY(u), 70, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        x = PolarX(GetUnitX(u), 50, a);
        y = PolarY(GetUnitY(u), 50, a);
        Effect("Fuxuansfx22.mdx", x, y, 100, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 5)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        for (int i = 1; i < 10; i++)
        {
            x = PolarX(GetUnitX(u), 160 * i, a);
            y = PolarY(GetUnitY(u), 160 * i, a);
            visionArea(GetOwningPlayer(u), 1200, 3, x, y);
            GroupEnumUnitsInRange(g2, x, y, 300, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A06G'));
                    GroupAddUnit(g1, d);
                }
            }
            if (i == 1 || i == 3 || i == 5 || i == 7 || i == 9)
            {
                Effect("Fuxuansfx1.mdx", x, y, 80, randomAngle(), 0, 0, 2.5, 1.5, 255, 255, 255, 255);
                Effect("Fuxuansfx3.mdx", x, y, 90, a, -90, 0, 1.25, 1.5, 214, 52, 132, PercentTo255(70));
                Effect("Fuxuansfx21.mdx", x, y, 80, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
            }
        }
        DestroyGroup(g1);
        DestroyGroup(g2);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        UnitAddAbility(u, 'A06H');
        UnitMakeAbilityPermanent(u, true, 'A06H');
        SetUnitAbilityLevel(u, 'A06H', GetUnitAbilityLevel(u, 'A06G'));
        DisableAbility(GetUnitAbility(u, 'A06G'), true, true);
        TimerStart(tmr, 5.f, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            unit u = LoadUnitHandle(GameHT, hid, 'cstr');

            UnitRemoveAbility(u, 'A06H');
            EnableAbility(GetUnitAbility(u, 'A06G'), true, true);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        });
    }
}

void AceD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AceD.mp3");
        SetUnitAnimationByIndex(u, 9);
        Effect("Acesfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Acesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        for (int i = 0; i < 12; i++)
        {
            a = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(100, 350), a);
            y = PolarY(GetUnitY(t), GetRandomReal(100, 350), a);
            a = randomAngle();
            x2 = PolarX(GetUnitX(u), GetRandomReal(50, 250), a);
            y2 = PolarY(GetUnitY(u), GetRandomReal(50, 250), a);
            a = Angle(x2, y2, x, y);
            dist = Distance(x2, y2, x, y);
            Effect("Acesfx11.mdx", x2, y2, GetRandomReal(50, 100), a, 0, 0, 1, 3, 255, 255, 255, 255);
            SaveEffectHandle(GameHT, hid, 'e' + i, dummy_effect);
            SaveReal(GameHT, hid, 'd' + i, dist);
        }
    }

    if (count <= 100)
    {
        for (int i = 0; i < 12; i++)
        {
            e = LoadEffectHandle(GameHT, hid, 'e' + i);
            a = GetSpecialEffectYaw(e);
            dist = LoadReal(GameHT, hid, 'd' + i);
            x = PolarX(GetSpecialEffectX(e), dist / 100, a);
            y = PolarY(GetSpecialEffectY(e), dist / 100, a);
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
        }
    }

    if (count == 110)
    {
        SetUnitAnimationByIndex(u, 3);
    }

    if (count == 140)
    {
        for (int i = 0; i < 12; i++)
        {
            e = LoadEffectHandle(GameHT, hid, 'e' + i);
            Effect("Acesfx12.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectHeight(e), randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AceF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("AceF.mp3");
        SoundStart("AceSE1.mp3");
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 0.9);
        Effect("Acesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Acesfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Acesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Units\\Human\\Phoenix\\Phoenix.mdx", GetUnitX(u), GetUnitY(u), 150, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "walk");
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count >= 5 && count <= 30)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 80, a);
        y = PolarY(GetSpecialEffectY(e), 80, a);
        SetEffectXY(e, x, y, 1);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 11 * GetHeroStr(u, true));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        if (count == 30)
        {
            DestroyGroup(g1);
        }

        Effect("Acesfx1.mdx", x, y, 150, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 30)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(e, "death");
        Effect("Bellsfx23.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx26.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acesfx5.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 100, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AceT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;
    trigger t = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("AceT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 5, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 8);
        SetUnitFacingEx(u, a, true);
        Effect("Acesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Acesfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Acesfx10.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1.1, 5, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
        x = PolarX(GetUnitX(u), 10, a);
        y = PolarY(GetUnitY(u), 10, a);
        MouseWorldX[GetPlayerId(GetOwningPlayer(u))] = x;
        MouseWorldY[GetPlayerId(GetOwningPlayer(u))] = y;
    }

    if (count <= 210)
    {
        a = Angle(GetUnitX(u), GetUnitY(u), MouseWorldX[GetPlayerId(GetOwningPlayer(u))], MouseWorldY[GetPlayerId(GetOwningPlayer(u))]);
        SetUnitFacing(u, a);
        SaveReal(GameHT, hid, 'angl', GetUnitFacing(u));

        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) + 400 / 210);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.01);
        SetSpecialEffectYaw(e, a);
    }

    if (count == 15 || count == 25 || count == 40 || count == 55 || count == 65 || count == 75 || count == 100 || count == 120 || count == 130 || count == 150 || count == 165 || count == 180 || count == 210)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Acesfx1.mdx", GetUnitX(u), GetUnitY(u), GetSpecialEffectHeight(e), a, 0, 0, count * 0.02, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
    }

    if (count == 20 || count == 40 || count == 70 || count == 90 || count == 120 || count == 140 || count == 160 || count == 190)
    {
        Effect("Acesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1 + count * 0.005, 1.5, 255, 255, 255, 255);
        Effect("Acesfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5 + count * 0.01, 1.5, 255, 255, 255, 255);
    }

    if (count == 200)
    {
        SoundStart("AceT-1.mp3");
        SetUnitAnimationByIndex(u, 12);
    }

    if (count <= 240)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRect(g2, GetWorldBounds(), nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            CC_SLOW_EFFECT = 0.7;
            CC_Unit(d, "slow", 0.1);
        }

        if (count >= 210)
        {
            e = LoadEffectHandle(GameHT, hid, 0);
            x = PolarX(GetSpecialEffectX(e), 100, a);
            y = PolarY(GetSpecialEffectY(e), 100, a);
            SetEffectXY(e, x, y, 1);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
            visionArea(GetOwningPlayer(u), 800, 3, x, y);

            GroupEnumUnitsInRange(g2, x, y, 400, nil);
            for (int i = 0; i < GroupGetCount(g2); i++)
            {
                d = GroupGetUnitByIndex(g2, i);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 15 * GetHeroStr(u, true));
                    GroupAddUnit(g1, d);
                }
            }

            Effect("Acesfx1.mdx", x, y, GetSpecialEffectHeight(e), a, 0, 0, 4.2, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }
        DestroyGroup(g2);

        if (count == 240)
        {
            DestroyGroup(g1);
        }
    }

    if (count == 240)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Muramasasfx26.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AceR2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    float x = .0f;
    float y = .0f;
    effect e = nil;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("AceR2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 7);
        Effect("Acesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Acesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Acesfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 2, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);

        g1 = CreateGroup();
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);
        SaveGroupHandle(GameHT, hid, 'grp+', g1);
    }

    if (count <= 50)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.03);
    }

    if (count == 50)
    {
        SetUnitAnimationByIndex(u, 6);
        Effect("Acesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Acesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count < 90)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+'); 
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, true);
            SetInvulUnit(d, true);
        }
    }

    if (count == 90)
    {
        SoundStart("AceR2-1.mp3");
        Effect("Acesfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 4, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Muramasasfx57.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Tsunasfx19.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 3, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bellsfx18.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, false);
            SetInvulUnit(d, false);
        }
        DestroyGroup(g1);

        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, (3 + GetUnitAbilityLevel(u, 'A06C')) * GetHeroStr(u, true));
                KnockupUnit(d, 1, 0.02, 500);
            }
        }
        DestroyGroup(g2);
    }

    if (count == 95)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AceR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AceR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 0.1);
        Effect("Acesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acesfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 30)
    {
        Effect("Acesfx8.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count >= 30 && count <= 70)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), dist / 40, a);
        y = PolarY(GetSpecialEffectY(e), dist / 40, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 100);
        if (count == 70)
        {
            SetSpecialEffectAnimation(e, "death");
            SetSpecialEffectTimeScale(e, 0.75);
        }
    }

    if (count == 70)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Acesfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Acesfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acesfx4.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (5 + GetUnitAbilityLevel(u, 'A06B')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AceE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("AceE.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 0.9);
        DestroyEffectTimed(AddSpecialEffectTarget("Acesfx6.mdx", u, "hand right"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Acesfx6.mdx", u, "hand left"), 1);
        RushSlide(u, a, dist, 0.2, 0.02, false);
        KnockupUnit(u, 0.2, 0.02, 420);
    }

    if (count == 12)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Acesfx5.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Acesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.2, 2, 255, 255, 255, 255);
        for (int i = 0; i < 6; i++)
        {
            x = PolarX(GetUnitX(u), 350, i * 60);
            y = PolarY(GetUnitY(u), 350, i * 60);
            Effect("Shanasfx10.mdx", x, y, 0, i * 60, 0, 0, 1, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
        }

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, GetUnitAbilityLevel(u, 'A06A') * GetHeroStr(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        if (LoadInteger(GameHT, GetHandleId(u), StringHash("AceR")) == 1)
        {
            SaveInteger(GameHT, GetHandleId(u), StringHash("AceR"), 2);
            DisableAbility(GetUnitAbility(u, 'A06B'), true, true);
            EnableAbility(GetUnitAbility(u, 'A06C'), true, true);
        }
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AceW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AceW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 0.25);
        DestroyEffectTimed(AddSpecialEffectTarget("Acesfx6.mdx", u, "hand right"), 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Acesfx6.mdx", u, "hand left"), 2);
        Effect("Acesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("Acesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
    }

    if (count >= 5 && count <= 35)
    {
        if (dist > 130)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -110, a);
            y = PolarY(GetUnitY(t), -110, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 35)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitTimeScale(u, 1);
        Effect("Acesfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Acesfx5.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Acesfx7.mdx", GetUnitX(u), GetUnitY(u), 60, a, -90, 0, 3, 2, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.5, 0.4);
    }

    if (count == 40)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A069')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 390, 0.6, 0.02, true);
        if (LoadInteger(GameHT, GetHandleId(u), StringHash("AceR")) == 2)
        {
            SaveInteger(GameHT, GetHandleId(u), StringHash("AceR"), 1);
            DisableAbility(GetUnitAbility(u, 'A06C'), true, true);
            EnableAbility(GetUnitAbility(u, 'A06B'), true, true);
        }
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AceQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    group g1 = nil;
    group g2 = nil;
    unit d = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("AceQ.mp3");
        }
        else
        {
            SoundStart("AceQ-1.mp3");
        }
        SetUnitAnimationByIndex(u, 15);
        Effect("Acesfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Acesfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Acesfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200, 3, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A068'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        Effect("Acesfx1.mdx", x, y, 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        Effect("Acesfx5.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 50, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        DestroyGroup(g1);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MuramasaD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float z = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MuramasaD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count == 5)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 6);
    }

    if (count == 15)
    {
        SoundStart("MuramasaSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx47.mdx", GetUnitX(t), GetUnitY(t), 100, a, -60, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx51.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx45.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        RushSlide(t, a, 260, 0.6, 0.02, true);
    }

    if (count == 37)
    {
        x = PolarX(GetUnitX(t), -100, a);
        y = PolarY(GetUnitY(t), -100, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 8);
    }

    if (count == 44)
    {
        SoundStart("MuramasaSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a, -35, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx47.mdx", GetUnitX(t), GetUnitY(t), 100, a, 20, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx51.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx45.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        RushSlide(t, a, 510, 0.6, 0.02, true);
    }

    if (count == 56)
    {
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 5);
        SetUnitTimeScale(u, 3.5);
        SetUnitFlyHeight(u, 390, 1300);
    }

    if (count == 66)
    {
        SetUnitFlyHeight(u, 0, 1950);
    }

    if (count >= 56 && count <= 81)
    {
        if (dist > 120)
        {
            x = PolarX(GetUnitX(u), dist / 14, a);
            y = PolarY(GetUnitY(u), dist / 14, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -100, a);
            y = PolarY(GetUnitY(t), -100, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 81)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Muramasasfx39.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx35.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 30, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx58.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Muramasasfx60.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a, -20, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a + 180, 20, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Muramasasfx43.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx26.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MuramasaF2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MuramasaF2.mp3");
        SoundStart("MuramasaSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 26);
        SetUnitTimeScale(u, 1.5);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "hand left"), 3);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "hand right"), 3);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "foot left"), 3);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "foot right"), 3);
        RushSlide(t, a, 400, 2, 0.02, true);
        if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
        {
            CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "ReplaceableTextures\\CameraMasks\\Black_mask.blp", 100, 100, 100, 100, 100, 100, 100, 0);
        }
    }

    if (count == 20)
    {
        SetUnitAnimationByIndex(u, 19);
        SetUnitTimeScale(u, 1);
    }

    if (count == 35)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitTimeScale(u, 0);
    }

    if (count <= 100)
    {
        if (count % 10 == 0)
        {
            Effect("Muramasasfx10.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 0.5, 1, 255, 255, 255, 255);
        }
    }

    if (count == 75)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
        {
            CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "ReplaceableTextures\\CameraMasks\\Black_mask.blp", 100, 100, 100, 0, 100, 100, 100, 100);
        }
    }

    if (count == 100)
    {
        SoundStart("MuramasaSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx66.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        AnimEffect2(dummy_effect, "death", 1.8);
        for (int i = 0; i < 6; i++)
        {
            x = PolarX(GetUnitX(t), 300, i * 60);
            y = PolarY(GetUnitY(t), 300, i * 60);
            Effect("Muramasasfx66.mdx", x, y, 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
            AnimEffect2(dummy_effect, "stand", 0.6);
            AnimEffect2(dummy_effect, "death", 1.8);
        }
    }

    if (count == 120)
    {
        SoundStart("MuramasaSE5.mp3");
        SetUnitTimeScale(u, 1);
        Effect("Muramasasfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Muramasasfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a + 180, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
    }

    if (count == 125)
    {
        SetUnitFacingEx(u, a, true);
        Effect("Muramasasfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx55.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Muramasasfx47.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx47.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), -40, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx47.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 60, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx35.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 4, 1.5, 255, 255, 255, 255);
    }

    if (count == 127)
    {
        Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, GetUnitFacing(u), 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.85, 1));   
    }

    if (count == 129)
    {
        Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, GetUnitFacing(u), -180, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.85, 1));   
    }

    if (count == 131)
    {
        Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, GetUnitFacing(u), -40, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.85, 1));   
    }

    if (count == 133)
    {
        Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, GetUnitFacing(u), 70, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.85, 1));   
    }

    if (count >= 125 && count <= 135)
    {
        x = PolarX(GetUnitX(u), 110, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 110, GetUnitFacing(u));
        SetUnitXY(u, x, y, 1);
    }

    if (count == 135)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Muramasasfx49.mdx", GetUnitX(u), GetUnitY(u), 0, GetUnitFacing(u), 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 6 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MuramasaF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MuramasaF.mp3");
        SoundStart("MuramasaSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitAnimationByIndex(u, 26);
        Effect("Muramasasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "hand left"), 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "hand right"), 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "foot left"), 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "foot right"), 2);
    }

    if (count <= 20)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 16, a);
            y = PolarY(GetUnitY(t), 16, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 16)
    {
        SoundStart("MuramasaSE17.mp3");
        Effect("Muramasasfx15.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
    }

    if (count == 20)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 19);
        SetUnitTimeScale(u, 1.4);
        SetUnitFlyHeight(t, 160, 400);
        RushSlide(t, a, 140, 0.4, 0.02, true);
        Effect("Muramasasfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Muramasasfx23.mdx", GetUnitX(t), GetUnitY(t), 50, a, -25, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Muramasasfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx35.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 30, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx30.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 40)
    {
        SetUnitFlyHeight(t, 0, 400);
    }

    if (count == 32 || count == 36 || count == 40 || count == 44 || count == 48 || count == 52 || count == 56)
    {
        if (count == 32)
        {
            SoundStart("MuramasaSE2.mp3");
            SaveReal(GameHT, hid, 0, GetUnitX(t));
            SaveReal(GameHT, hid, 1, GetUnitY(t));
        }
        x = PolarX(LoadReal(GameHT, hid, 0), 170 * LoadInteger(GameHT, hid, 'ceff'), a);
        y = PolarY(LoadReal(GameHT, hid, 1), 170 * LoadInteger(GameHT, hid, 'ceff'), a);
        Effect("Muramasasfx66.mdx", x, y, 0, a, 0, 0, 1.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        AnimEffect2(dummy_effect, "stand", 0.3);
        AnimEffect2(dummy_effect, "death", 1.4 - (count - 32) * 0.02);
        TimeScaleEffect(dummy_effect, 1, 1.4 - (count - 32) * 0.02);
        SaveEffectHandle(GameHT, hid, LoadInteger(GameHT, hid, 'ceff'), dummy_effect);
        SaveInteger(GameHT, hid, 'ceff', LoadInteger(GameHT, hid, 'ceff') + 1);
    }

    if (count == 39 || count == 43 || count == 47 || count == 51 || count == 55 || count == 59 || count == 63)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        e = LoadEffectHandle(GameHT, hid, LoadInteger(GameHT, hid, 'leff'));
        Effect("Muramasasfx45.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 150, randomAngle(), 0, 0, 3, 1.5 - (count - 39) * 0.02, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        SaveInteger(GameHT, hid, 'leff', LoadInteger(GameHT, hid, 'leff') + 1);
        if (count < 63)
        {
            RushSlide(t, a, 130, 0.08, 0.02, true);
        }
        if (count == 39)
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
            SetUnitAnimationByIndex(u, 9);
            SetUnitTimeScale(u, 1);
            Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a, 10, 0, 2.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }

        if (count == 43)
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
            Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a, -15, 0, 2.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }

        if (count == 47)
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
            Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a, -25, 0, 2.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }

        if (count == 51)
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
            Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a, 35, 0, 2.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }

        if (count == 55)
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
            Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a, 50, 0, 2.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }

        if (count == 59)
        {
            SoundStart("MuramasaSE5.mp3");
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            Effect("Muramasasfx41.mdx", x, y, 100, a, -40, 0, 2.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }

        if (count == 63)
        {
            x = PolarX(GetUnitX(t), 160, a);
            y = PolarY(GetUnitY(t), 160, a);
            SetUnitXY(u, x, y, 0);
            SetUnitFacingEx(u, a + 180, true);
            Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a + 180, 30, 0, 2.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
            RushSlide(t, a + 180, 300, 0.6, 0.02, true);
        }
    }

    if (count == 64)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        UnitAddAbility(u, 'A066');
        UnitMakeAbilityPermanent(u, true, 'A066');
        DisableAbility(GetUnitAbility(u, 'A065'), true, true);
        TimerStart(tmr, 5, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            unit u = LoadUnitHandle(GameHT, hid, 'cstr');

            UnitRemoveAbility(u, 'A066');
            EnableAbility(GetUnitAbility(u, 'A065'), true, true);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        });
    }
}

void MuramasaT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("MuramasaT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -1000, a);
        y = PolarY(GetUnitY(t), -1000, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 25);
        SetUnitTimeScale(u, 0.6);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0, 0, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count <= 100)
    {
        x = PolarX(GetUnitX(u), 4, a);
        y = PolarY(GetUnitY(u), 4, a);
        SetUnitXY(u, x, y, 0);
        e = LoadEffectHandle(GameHT, hid, 0);
        SetEffectXY(e, GetUnitX(u), GetUnitY(u), 0);
        SetSpecialEffectHeight(e, 0);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.03);
    }

    if (count == 90)
    {
        SoundStart("MuramasaSE10.mp3");
    }

    if (count == 100)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        Effect("Muramasasfx63.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 0, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
    }

    if (count == 120)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectTimeScale(e, 0.4);
        DestroyEffectTimed(e, 1);
    }

    if (count >= 100 && count <= 150)
    {
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectAnimationOffsetPercent(e, (count - 100) * 0.02);
    }

    if (count == 140)
    {
        SoundStart("MuramasaSE11.mp3");
    }

    if (count == 150)
    {
        SoundStart("MuramasaSE12.mp3");
        for (int i = 0; i < 16; i++)
        {
            a = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(400, 750), a);
            y = PolarY(GetUnitY(u), GetRandomReal(400, 750), a);
            Effect("Muramasasfx53.mdx", x, y, 0, a, 0, 0, 0.75, 3, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            AnimEffect2(dummy_effect, "death", 2);
            TimeScaleEffect(dummy_effect, 0.5, 2);
        }
    }

    if (count == 250)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 14);
        e = LoadEffectHandle(GameHT, hid, 1);
        SetSpecialEffectAnimation(e, "death");
        SetSpecialEffectTimeScale(e, 0.8);
        DestroyEffectTimed(e, 1.5);
    }

    if (count > 260 && count <= 484)
    {
        if ((count - 260) % 7 == 0 && count <= 442 || (count - 442) % 6 == 0 && count > 442)
        {
            SaveInteger(GameHT, hid, 'tiff', LoadInteger(GameHT, hid, 'tiff') + 1);
            if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
            {
                if (count != 484)
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\MuramasaT (" + I2S(LoadInteger(GameHT, hid, 'tiff')) +").blp", 100, 100, 100, 0, 100, 100, 100, 0);
                }
                else
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\MuramasaT (" + I2S(LoadInteger(GameHT, hid, 'tiff')) +").blp", 100, 100, 100, 0, 100, 100, 100, 100);
                }
            }
        }
    }

    if (count == 265)
    {
        SoundStart("MuramasaSE16.mp3");
        SetUnitTimeScale(u, 0);
    }

    if (count == 260 || count == 285 || count == 310 || count == 335 || count == 360 || count == 390 || count == 420 || count == 440 || count == 470 || count == 500 || count == 530 || count == 580)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        e = AddSpecialEffectTarget("Muramasasfx65.mdx", u, "hand right");
        SetSpecialEffectAnimation(e, "birth");
        SetSpecialEffectTimeScale(e, 0.75);
        DestroyEffectTimed(e, 1.5);
        if (count == 285)
        {
            Effect("Muramasasfx62.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 6, 255, 255, 255, 255);
        }
        if (count == 420)
        {
            SoundStart("MuramasaSE16.mp3");
        }
    }

    if (count == 580)
    {
        SoundStart("MuramasaSE1.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitTimeScale(u, 0.75);
        Effect("Muramasasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Muramasasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 255, 255, 255, 255);
        SaveInteger(GameHT, hid, 'tiff', 0);
    }

    if (count >= 580 && count <= 610)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 12, a);
            y = PolarY(GetUnitY(u), dist / 12, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 600)
    {
        SoundStart("MuramasaSE13.mp3");
        Effect("Muramasasfx52.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 10, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
    }

    if (count == 610)
    {
        visionArea(GetOwningPlayer(u), 1500, 4, GetUnitX(t), GetUnitY(t));
        Effect("Muramasasfx54.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Muramasasfx55.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, -90, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        RushSlide(t, a, 140, 1.8, 0.02, true);
    }

    if (count == 620)
    {
        SoundStart("MuramasaSE14.mp3");
    }

    if (count == 640)
    {
        Effect("Muramasasfx43.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx57.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        TimeScaleEffect(dummy_effect, 0.2, 1);
        Effect("Muramasasfx61.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 3, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        TimeScaleEffect(dummy_effect, 0.35, 0.5);
    }

    if (count > 620 && count <= 684)
    {
        if ((count - 620) % 4 == 0)
        {
            SaveInteger(GameHT, hid, 'tiff', LoadInteger(GameHT, hid, 'tiff') + 1);
            if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
            {
                if (count != 684)
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\MuramasaT-1 (" + I2S(LoadInteger(GameHT, hid, 'tiff')) +").blp", 100, 100, 100, 0, 100, 100, 100, 0);
                }
                else
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\MuramasaT-1 (" + I2S(LoadInteger(GameHT, hid, 'tiff')) +").blp", 100, 100, 100, 0, 100, 100, 100, 100);
                }
            }
        }
    }

    if (count == 650)
    {
        for (int i = 0; i < 11; i++)
        {
            a = randomAngle();
            x = PolarX(GetUnitX(t), GetRandomReal(450, 750), a);
            y = PolarY(GetUnitY(t), GetRandomReal(450, 750), a);
            Effect("Muramasasfx58.mdx", x, y, 0, randomAngle(), 0, 0, 2.5, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85);
            SaveReal(GameHT, hid, 'xeff' + i, x);
            SaveReal(GameHT, hid, 'yeff' + i, y);
        }
    }

    if (count == 655)
    {
        for (int i = 0; i < 11; i++)
        {
            x = LoadReal(GameHT, hid, 'xeff' + i);
            y = LoadReal(GameHT, hid, 'yeff' + i);
            Effect("Muramasasfx60.mdx", x, y, 0, randomAngle(), 0, 0, 4, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9);
        }
    }

    if (count == 665)
    {
        SoundStart("MuramasaSE15.mp3");
        for (int i = 0; i < 11; i++)
        {
            x = LoadReal(GameHT, hid, 'xeff' + i);
            y = LoadReal(GameHT, hid, 'yeff' + i);
            Effect("Muramasasfx59.mdx", x, y, 0, randomAngle(), 0, 0, 3.5, 2.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 0.75));
        }
    }

    if (count == 680)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        for (int i = 0; i < 11; i++)
        {
            x = LoadReal(GameHT, hid, 'xeff' + i);
            y = LoadReal(GameHT, hid, 'yeff' + i);
            Effect("Muramasasfx56.mdx", x, y, 0, randomAngle(), 0, 0, 2, 2.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5);
        }
    }

    if (count == 720)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MuramasaR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MuramasaR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 25);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "hand left"), 3);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "hand right"), 3);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "foot left"), 3);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "foot right"), 3);
        Effect("Muramasasfx1.mdx", GetUnitX(u), GetUnitY(u), 10, a, 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count == 2 || count == 4 || count == 7 || count == 9 || count == 12 || count == 14 || count == 18 || count == 20)
    {
        Effect("Muramasasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, GetRandomReal(0.75, 1), 1, 138, 205, 215, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75, 1));
    }

    if (count == 10)
    {
        SetUnitAnimationByIndex(u, 6);
    }

    if (count == 23)
    {
        SetUnitTimeScale(u, 0);
    }

    if (count <= 33)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 8, a);
            y = PolarY(GetUnitY(u), dist / 8, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 33)
    {
        SetUnitTimeScale(u, 1);
    }

    if (count == 36)
    {
        SoundStart("MuramasaSE8.mp3");
        Effect("Muramasasfx15.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx21.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx30.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx51.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 3.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        RushSlide(t, a, 350, 0.6, 0.02, true);
    }

    if (count == 39)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Muramasasfx32.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Muramasasfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx33.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 1, 255, 255, 255, 255);
        Effect("Muramasasfx35.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 60, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx40.mdx", GetUnitX(t), GetUnitY(t), 0, a + 70, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx7.mdx", GetUnitX(u), GetUnitY(u), 100, a, -50, 0, 8, 1.5, 255, 255, 255, 255);
    }

    if (count == 51)
    {
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 0.85);
    }

    if (count == 51 || count == 53 || count == 56 || count == 59 || count == 63)
    {
        Effect("Muramasasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 138, 205, 215, PercentTo255(75));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.8, 1));
    }

    if (count >= 51 && count <= 66)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 66)
    {
        Effect("Muramasasfx51.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 3.5, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx32.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, -20, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Muramasasfx34.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
        Effect("Muramasasfx46.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx47.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), -60, -20, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 67)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Muramasasfx47.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 30, -80, 2, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx40.mdx", GetUnitX(t), GetUnitY(t), 0, a - 30, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        RushSlide(t, a, 360, 0.8, 0.02, true);
    }

    if (count == 74)
    {
        Effect("Muramasasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a + 180, 0, 0, 6, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx48.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 2.5);
        AnimEffect2(dummy_effect, "death", 1);
        TimeScaleEffect(dummy_effect, 1, 1);
    }

    if (count == 82)
    {
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 1.4);
        SetUnitFacingEx(u, a, true);
    }

    if (count == 93)
    {
        x = PolarX(GetUnitX(t), -100, a);
        y = PolarY(GetUnitY(t), -100, a);
        SetUnitXY(u, x, y, 0);
        Effect("Muramasasfx16.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx52.mdx", GetUnitX(u), GetUnitY(u), 30, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 97)
    {
        SoundStart("MuramasaSE9.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Muramasasfx50.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 5, 1, 255, 255, 255, 255);
        Effect("Muramasasfx49.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Muramasasfx48.mdx", GetUnitX(t), GetUnitY(t), 50, a, -90, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx45.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Muramasasfx35.mdx", GetUnitX(t), GetUnitY(t), 100, a, -70, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        RushSlide(t, a, 320, 0.6, 0.02, true);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A063')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MuramasaE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MuramasaE.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 7);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "hand left"), 1.5);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "hand right"), 1.5);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "foot left"), 1.5);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "foot right"), 1.5);
    }

    if (count == 8)
    {
        SoundStart("MuramasaSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx2.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 5, 1, 176, 97, 97, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Muramasasfx3.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        Effect("Muramasasfx10.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1.5, 176, 97, 97, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Muramasasfx13.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Muramasasfx27.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx25.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx44.mdx", t, "chest"), 1.5);
        RushSlide(t, a, 310, 0.6, 0.02, true);
    }

    if (count == 11)
    {
        Effect("Muramasasfx43.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Muramasasfx23.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx37.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 50, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
    }

    if (count == 29)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 32)
    {
        SoundStart("MuramasaSE7.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx25.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
        Effect("Muramasasfx28.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx37.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), -25, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx37.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), -30, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Muramasasfx23.mdx", GetUnitX(t), GetUnitY(t), 50, a, -45, 0, 4, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.55);
        Effect("Muramasasfx27.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65);
    }

    if (count == 34)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        RushSlide(t, a, 310, 0.6, 0.02, true);
        KnockupUnit(t, 0.6, 0.02, 280);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A062') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MuramasaW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MuramasaW.mp3");
        SoundStart("MuramasaSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 11);
        SetUnitTimeScale(u, 1.5);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx18.mdx", u, "hand right"), 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx17.mdx", u, "hand left"), 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx19.mdx", u, "chest"), 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx20.mdx", u, "chest"), 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "foot right"), 2);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "foot left"), 2);
        Effect("Muramasasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count <= 13)
    {
        if (dist > 130)
        {
            x = PolarX(GetUnitX(u), dist / 8, a);
            y = PolarY(GetUnitY(u), dist / 8, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -110, a);
            y = PolarY(GetUnitY(t), -110, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 12)
    {
        Effect("Muramasasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a + 180, 0, 0, 6, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
    }

    if (count == 13)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx13.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Muramasasfx6.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, -180, 4, 1.5, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 0.8);
        Effect("Muramasasfx21.mdx", GetUnitX(t), GetUnitY(t), 20, a + GetRandomReal(-45, 45), GetRandomReal(-20, 20), 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx22.mdx", GetUnitX(t), GetUnitY(t), 50, a + 25, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Muramasasfx23.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx37.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 5, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 250, 0.4, 0.02, true);
    }

    if (count == 20)
    {
        SetUnitAnimationByIndex(u, 12);
        SetUnitTimeScale(u, 1.3);
    }

    if (count >= 20 && count <= 32)
    {
        if (dist > 130)
        {
            x = PolarX(GetUnitX(u), dist / 6, a);
            y = PolarY(GetUnitY(u), dist / 6, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -110, a);
            y = PolarY(GetUnitY(t), -110, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 32)
    {
        SoundStart("MuramasaSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx30.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 1, 255, 255, 255, 255);
        Effect("Muramasasfx31.mdx", GetUnitX(t), GetUnitY(t), 50, a, 20, 0, 4, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Muramasasfx33.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1, 255, 255, 255, 255);
        Effect("Muramasasfx37.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 5, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx39.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), -45, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx21.mdx", GetUnitX(t), GetUnitY(t), 20, a + GetRandomReal(-45, 45), GetRandomReal(-20, 20), 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx6.mdx", GetUnitX(u), GetUnitY(u), 100, a, 45, 0, 4, 1.5, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 0.8);
        Effect("Muramasasfx22.mdx", GetUnitX(t), GetUnitY(t), 50, a - 30, 0, 0, 1.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 320, 0.4, 0.02, true);
    }

    if (count >= 38 && count <= 50)
    {
        if (dist > 130)
        {
            x = PolarX(GetUnitX(u), dist / 6, a);
            y = PolarY(GetUnitY(u), dist / 6, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -110, a);
            y = PolarY(GetUnitY(t), -110, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 50)
    {
        SoundStart("MuramasaSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx32.mdx", GetUnitX(t), GetUnitY(t), 50, a, -30, 0, 4.5, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Muramasasfx35.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 10, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85);
        Effect("Muramasasfx38.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 6, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx40.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 45, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx21.mdx", GetUnitX(t), GetUnitY(t), 20, a + GetRandomReal(-45, 45), GetRandomReal(-20, 20), 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx6.mdx", GetUnitX(u), GetUnitY(u), 100, a, 50, 0, 4, 1.5, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 0.8);
        Effect("Muramasasfx22.mdx", GetUnitX(t), GetUnitY(t), 50, a + 50, 0, 0, 1.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 260, 0.4, 0.02, true);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count >= 55 && count <= 70)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 8, a);
            y = PolarY(GetUnitY(u), dist / 8, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            a = LoadReal(GameHT, hid, 0);
            x = PolarX(GetUnitX(t), 120, a);
            y = PolarY(GetUnitY(t), 120, a);
            SetUnitXY(u, x, y, 0);
            SetUnitFacing(u, a + 180);
        }
    }

    if (count == 73)
    {
        SoundStart("MuramasaSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Muramasasfx41.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx34.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx31.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 5, 1, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Muramasasfx11.mdx", GetUnitX(t), GetUnitY(t), 100, a, 0, 0, 10, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        Effect("Muramasasfx21.mdx", GetUnitX(t), GetUnitY(t), 20, a + GetRandomReal(-45, 45), GetRandomReal(-20, 20), 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Muramasasfx6.mdx", GetUnitX(u), GetUnitY(u), 100, a, 20, -180, 4, 1.5, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 0.8);
        Effect("Muramasasfx37.mdx", GetUnitX(t), GetUnitY(t), 100, randomAngle(), 0, 0, 5, 1.5, 255, 255, 255, 255);
        Effect("Muramasasfx22.mdx", GetUnitX(t), GetUnitY(t), 50, a - 75, 0, 0, 1.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 480, 0.6, 0.02, true);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A061')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MuramasaQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("MuramasaQ.mp3");
        SoundStart("MuramasaSE1.mp3");
        SetUnitAnimationByIndex(u, 26);
        Effect("Muramasasfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.4, 1, 255, 255, 255, 255);
        Effect("Muramasasfx11.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx6.mdx", GetUnitX(u), GetUnitY(u), 100, a + 180, 0, 0, 3, 1.2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        AnimEffect2(dummy_effect, "death", 0.7);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "hand left"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "hand right"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "foot left"), 1);
        DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx5.mdx", u, "foot right"), 1);
        Effect("Muramasasfx15.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.6, 1, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }
    
    if (count == 2)
    {
        Effect("Muramasasfx6.mdx", GetUnitX(u), GetUnitY(u), 100, a + 180, 0, -180, 3, 1.2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        AnimEffect2(dummy_effect, "death", 0.7);
    }

    if (count == 5)
    {
        Effect("Muramasasfx6.mdx", GetUnitX(u), GetUnitY(u), 100, a + 180, 35, 0, 3, 1.2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        AnimEffect2(dummy_effect, "death", 0.7);
    }

    if (count == 8)
    {
        Effect("Muramasasfx6.mdx", GetUnitX(u), GetUnitY(u), 100, a + 180, -50, 0, 3, 1.2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        AnimEffect2(dummy_effect, "death", 0.7);
    }

    if (count == 11)
    {
        Effect("Muramasasfx6.mdx", GetUnitX(u), GetUnitY(u), 100, a + 180, -20, 0, 3, 1.2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        AnimEffect2(dummy_effect, "death", 0.7);
    }

    if (count == 7)
    {
        SoundStart("MuramasaSE2.mp3");
        Effect("Muramasasfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
    }

    if (count <= 12)
    {
        if (count == 1) 
        { 
            RushSlide(u, a, 1400, 0.2, 0.02, false); 
        }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        e = LoadEffectHandle(GameHT, hid, 0);
        SetEffectXY(e, GetUnitX(u), GetUnitY(u), 0);
        SetSpecialEffectHeight(e, 50);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                DestroyEffectTimed(AddSpecialEffectTarget("Muramasasfx13.mdx", u, "chest"), 0.4);
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A060'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count % 2 == 0)
        {
            Effect("Muramasasfx14.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Muramasasfx10.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 0.8, 1, 81, 130, 155, 255);
        }
    }

    if (count == 12)
    {
        Effect("Muramasasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Muramasasfx12.mdx", GetUnitX(u), GetUnitY(u), 0, a + 180, 0, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        DestroyGroup(g1);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void EsdeathD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("EsdeathD.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 7);
        Effect("Esdeathsfx27.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 3.5, 255, 255, 255, 255);
        Effect("Esdeathsfx17.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 5, 3.5, 255, 255, 255, 255);
        Effect("", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 4, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 10)
    {
        SoundStart("EsdeathSE6.mp3");
        SetUnitTimeScale(u, 0);
    }

    if (count <= 100)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), GetUnitX(t), GetUnitY(t));

        if (dist > 120)
        {
            x = PolarX(GetSpecialEffectX(e), dist / 12, a);
            y = PolarY(GetSpecialEffectY(e), dist / 12, a);
            SetEffectXY(e, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10, a);
            y = PolarY(GetUnitY(t), 10, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), 30, a);
            y = PolarY(GetUnitY(t), 30, a); 
            SetEffectXY(e, GetUnitX(t), GetUnitY(t), 0);

            if (count % 10 == 0)
            {
                Effect("Esdeathsfx16.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
            }
        }
        
        if (count % 10 == 0)
        {
            visionArea(GetOwningPlayer(u), 800, 3, GetUnitX(t), GetUnitY(t));
            Effect("Esdeathsfx17.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, a, 0, 0, 3, 3 - count * 0.02, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            SetSpecialEffectTimeScale(dummy_effect, 1.5);
        }
    }

    if (count == 100)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Esdeathsfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.3, 0.8);
        Effect("Esdeathsfx26.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2.5, 255, 255, 255, 255);
        Effect("Esdeathsfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5);
        TimeScaleEffect(dummy_effect, 0.05, 0.5);
        TimeScaleEffect(dummy_effect, 0.75, 1.5);
    }

    if (count == 115)
    {
        SetUnitAnimationByIndex(u, 1);
        SetUnitTimeScale(u, 1);
    }

    if (count >= 115 && count <= 135)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 14, a);
            y = PolarY(GetUnitY(u), dist / 14, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 135)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacing(u, a);
        SetUnitAnimation(u, "attack");
    }

    if (count == 155)
    {
        SoundStart("EsdeathSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Esdeathsfx28.mdx", GetUnitX(t), GetUnitY(t), 100, a + 20, 0, 0, 6, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Esdeathsfx21.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Esdeathsfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        Effect("Esdeathsfx12.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 4, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
    }

    if (count == 160)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void EsdeathF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float z = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("EsdeathF.mp3");
        SetUnitAnimationByIndex(u, 1);
    }

    if (count == 2 || count == 5 || count == 8 || count == 10)
    {
        Effect("Esdeathsfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count <= 50)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 7, a);
            y = PolarY(GetUnitY(u), dist / 7, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 12, a);
            y = PolarY(GetUnitY(t), 12, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
    }

    if (count == 12 || count == 24 || count == 35 || count == 47)
    {
        SetUnitAnimation(u, "attack");
    }

    if (count == 15 || count == 39)
    {
        SoundStart("EsdeathSE2.mp3");
        Effect("Esdeathsfx11.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Esdeathsfx12.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        Effect("Esdeathsfx8.mdx", GetUnitX(t), GetUnitY(t), 20, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
    }

    if (count == 28 || count == 52)
    {
        Effect("Esdeathsfx11.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, -180, 2, 1.5, 255, 255, 255, 255);
        Effect("Esdeathsfx12.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        Effect("Esdeathsfx8.mdx", GetUnitX(t), GetUnitY(t), 20, randomAngle(), 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        if (count == 52)
        {
            RushSlide(t, a, 410, 0.3, 0.02, true);
        }
    }

    if (count == 63)
    {
        SoundStart("EsdeathSE1.mp3");
    }

    if (count >= 63 && count <= 82)
    {
        if (dist > 140)
        {
            dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
    }

    if (count == 82)
    {
        x = PolarX(GetUnitX(t), 130, a);
        y = PolarY(GetUnitY(t), 130, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimation(u, "attack");
        Effect("Esdeathsfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
    }

    if (count == 88)
    {
        SoundStart("EsdeathSE2.mp3");
        Effect("Esdeathsfx14.mdx", GetUnitX(t), GetUnitY(t), 50, a - 30, 0, 0, 2, 1.5, 255, 255, 255, 255);
        Effect("Esdeathsfx13.mdx", GetUnitX(t), GetUnitY(t), 50, a, 60, 0, 5, 1.5, 16, 67, 159, 255);
        Effect("Esdeathsfx8.mdx", GetUnitX(t), GetUnitY(t), 20, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        RushSlide(t, a, 400, 0.6, 0.02, true);
    }

    if (count == 106)
    {
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 116)
    {
        for (int i = 0; i < 8; i++)
        {
            x = PolarX(GetUnitX(u), GetRandomReal(0, 150), randomAngle());
            y = PolarY(GetUnitY(u), GetRandomReal(0, 150), randomAngle());
            z = GetRandomReal(1200, 1300);
            Effect("Esdeathsfx25.mdx", x, y, z, a, Alpha(x, y, z, GetUnitX(t), GetUnitY(t), 0), 0, 3, 1.5, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SaveEffectHandle(GameHT, hid, 'eff' + i, dummy_effect);
            SaveReal(GameHT, hid, 'eff' + i, z);
        }
        SetUnitAnimation(u, "attack");
    }

    if (count >= 125 && count <= 137)
    {
        for (int i = 0; i < 8; i++)
        {
            e = LoadEffectHandle(GameHT, hid, 'eff' + i);
            x = PolarX(GetSpecialEffectX(e), dist / 12, a);
            y = PolarY(GetSpecialEffectY(e), dist / 12, a);
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - (LoadReal(GameHT, hid, 'eff' + i) / 12));
            if (count == 137)
            {
                SetSpecialEffectAnimation(e, "death");
                SetSpecialEffectTimeScale(e, 0.75);
                Effect("Esdeathsfx26.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, randomAngle(), 0, 0, 0.5, 2, 255, 255, 255, 255);
                Effect("Esdeathsfx17.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), 0, randomAngle(), 0, 0, 0.5, 2, 255, 255, 255, 255);
                SetSpecialEffectAnimation(dummy_effect, "birth");
                SetSpecialEffectTimeScale(dummy_effect, 0.8);
            }
        }
    }

    if (count == 137)
    {
        SoundStart("EsdeathSE3.mp3");
    }

    if (count == 143)
    {
        SoundStart("EsdeathR.mp3");
        SetUnitAnimationByIndex(u, 14);
        Effect("Esdeathsfx18.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 2);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 181)
    {
        SoundStart("EsdeathF-1.mp3");
    }

    if (count >= 203 && count <= 218)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - 36);
        if (count == 218)
        {
            SetSpecialEffectHeight(e, 0);
            SetSpecialEffectAnimation(e, "death");
            SetSpecialEffectTimeScale(e, 1);
            SoundStart("EsdeathSE4.mp3");
            visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
            Effect("Esdeathsfx19.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            Effect("Esdeathsfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6);
            Effect("Esdeathsfx21.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75);
        }
    }

    if (count == 221)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void EsdeathT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("EsdeathT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -1000, a);
        y = PolarY(GetUnitY(t), -1000, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 1);
        Effect("Esdeathsfx22.mdx", GetUnitX(u), GetUnitY(u), 20, a, 0, 0, 3, 9, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 1, dummy_effect);
    }

    if (count == 100)
    {
        Effect("Esdeathsfx23.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 3.5, 16, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        Effect("Esdeathsfx17.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 10, 15, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 2, dummy_effect);
    }

    if (count <= 400)
    {
        if (count <= 100)
        {
            x = PolarX(GetUnitX(u), 3, a);
            y = PolarY(GetUnitY(u), 3, a);
            SetUnitXY(u, x, y, 0);
            e = LoadEffectHandle(GameHT, hid, 1);
            SetEffectXY(e, GetUnitX(u), GetUnitY(u), 0);
        }
        if (count >= 100)
        {
            e = LoadEffectHandle(GameHT, hid, 2);
            SetSpecialEffectAnimationOffsetPercent(e, (count - 100) * (0.6/300));
        }
        if (count >= 100 && count <= 300)
        {
            e = LoadEffectHandle(GameHT, hid, 0);
            SetSpecialEffectAnimationOffsetPercent(e, (count - 100) * (0.0555/200));
        }
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count <= 405)
    {
        if (count % 5 == 0)
        {
            SaveInteger(GameHT, hid, 'tiff', LoadInteger(GameHT, hid, 'tiff') + 1);
            if (GetOwningPlayer(u) == GetLocalPlayer() || GetOwningPlayer(t) == GetLocalPlayer())
            {
                if (count != 405)
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\EsdeathT (" + I2S(LoadInteger(GameHT, hid, 'tiff')) +").blp", 100, 100, 100, 0, 100, 100, 100, 0);
                }
                else
                {
                    CinematicFilterGenericBJ(1, BLEND_MODE_BLEND, "SkillImage\\EsdeathT (" + I2S(LoadInteger(GameHT, hid, 'tiff')) +").blp", 100, 100, 100, 0, 100, 100, 100, 100);
                }
            }
        }
    }

    if (count == 450)
    {
        SetUnitAnimationByIndex(u, 3);
        SetUnitTimeScale(u, 0.4);
    }

    if (count >= 450 && count <= 700)
    {
        x = PolarX(GetUnitX(u), 2, a);
        y = PolarY(GetUnitY(u), 2, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
    }

    if (count == 700)
    {
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 0.75);
        Effect("Esdeathsfx26.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
    }

    if (count == 730)
    {
        SoundStart("EsdeathSE7.mp3");
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectAnimation(e, "death");
        e = LoadEffectHandle(GameHT, hid, 2);
        SetSpecialEffectAnimation(e, "death");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Esdeathsfx7.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 2.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Esdeathsfx21.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Esdeathsfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Esdeathsfx24.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 3, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.5, 0.3);
    }

    if (count == 740)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void EsdeathR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("EsdeathR.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 12);
        for (int i = 0; i < 6; i++)
        {
            x = PolarX(GetUnitX(u), 250, i * 60);
            y = PolarY(GetUnitY(u), 250, i * 60);
            Effect("Esdeathsfx17.mdx", x, y, .0f, i * 60, 0, 0, 3.5, 2, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            AnimEffect2(dummy_effect, "death", 1.4);
        }
        Effect("Esdeathsfx18.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 3, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 1.5);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
    }

    if (count == 75)
    {
        SoundStart("EsdeathR-1.mp3");
    }

    if (count >= 75 && count <= 95)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), dist / 20, a);
        y = PolarY(GetSpecialEffectY(e), dist / 20, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - 25);
        if (count == 95)
        {
            SetSpecialEffectHeight(e, 0);
            SetSpecialEffectAnimation(e, "death");
            SetSpecialEffectTimeScale(e, 0.85);
        }
    }

    if (count == 95)
    {
        SoundStart("EsdeathSE4.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Esdeathsfx19.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Esdeathsfx20.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);
        Effect("Esdeathsfx21.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 3, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A05W')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void EsdeathE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float a2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("EsdeathE.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitAnimationByIndex(u, 1);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count == 2 || count == 5 || count == 7 || count == 10 || count == 12)
    {
        Effect("Esdeathsfx16.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count <= 13)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 8, a);
            y = PolarY(GetUnitY(u), dist / 8, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 13)
    {
        x = PolarX(GetUnitX(t), 120, a);
        y = PolarY(GetUnitY(t), 120, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacing(u, a);
        SetUnitAnimationByIndex(u, 7);
    }

    if (count == 22)
    {
        SoundStart("Esdeathse2.mp3");
        Effect("Esdeathsfx15.mdx", GetUnitX(t), GetUnitY(t), 10, a, -270, 0, 5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        RushSlide(t, a, 370, 0.4, 0.02, true);
        SetUnitFlyHeight(t, 370, 370/0.4);
    }

    if (count == 40)
    {
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacing(u, a);
        SetUnitAnimationByIndex(u, 0);
        SetUnitFlyHeight(u, 370, 0);
    }

    if (count >= 40 && count <= 47)
    {
        x = PolarX(GetUnitX(t), -140, a);
        y = PolarY(GetUnitY(t), -140, a);
        SetUnitXY(u, x, y, 0);
    }

    if (count == 47)
    {
        KnockupUnit(t, 0.4, 0.02, 180);
    }

    if (count == 51)
    {
        SetUnitAnimationByIndex(u, 8);
    }

    if (count >= 47 && count <= 67)
    {
        if (count >= 57)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) - 37, 0);
        }
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);
    }

    if (count == 67)
    {
        SoundStart("Esdeathse3.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        a2 = randomAngle();
        Effect("Esdeathsfx13.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, a2, 30, 0, 5, 1.5, 0, 110, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Esdeathsfx13.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, a2 + 90, -30, 0, 5, 1.5, 0, 110, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9);
        Effect("Esdeathsfx1.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, 0, 0, 3.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        a2 = randomAngle();
        Effect("Esdeathsfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a2, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Esdeathsfx9.mdx", GetUnitX(t), GetUnitY(t), 0, a2 + 90, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.7);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A05V') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void EsdeathW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("EsdeathW.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 1);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
    }

    if (count <= 12)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 7, a);
            y = PolarY(GetUnitY(u), dist / 7, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 3 == 0)
        {
            Effect("Esdeathsfx2", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1, 1, 238, 247, 255, 255);
        }
    }

    if (count == 7)
    {
        SetUnitAnimationByIndex(u, 8);
    }

    if (count == 12)
    {
        SoundStart("EsdeathSE2.mp3");
        RushSlide(t, a, 280, 0.2, 0.02, true);
        Effect("Esdeathsfx1.mdx", GetUnitX(t), GetUnitY(t), 50, a, -90, 0, 1, 1, 255, 255, 255, 255);
        for (int i = 0; i < 3; i++)
        {
            Effect("Esdeathsfx6.mdx", GetUnitX(u), GetUnitY(u), GetRandomReal(10, 30), a + 180, GetRandomReal(-45, 45), 0, 2, 1.5, 154, 200, 205, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
        Effect("Esdeathsfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx10.mdx", GetUnitX(t), GetUnitY(t), 50, a, 60, 0, 4, 1, 154, 200, 205, 255);
    }

    if (count == 25)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 7);
    }

    if (count == 30)
    {
        SoundStart("EsdeathSE2.mp3");
        SetUnitTimeScale(u, 0.7);
        RushSlide(t, a, 320, 0.2, 0.02, true);
        for (int i = 0; i < 3; i++)
        {
            Effect("Esdeathsfx6.mdx", GetUnitX(u), GetUnitY(u), GetRandomReal(10, 30), a + 180, GetRandomReal(-45, 45), 0, 2, 1.5, 154, 200, 205, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
        Effect("Esdeathsfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85f);
        Effect("Esdeathsfx10.mdx", GetUnitX(t), GetUnitY(t), 50, a, -50, 0, 4, 1, 154, 200, 205, 255);
        SaveReal(GameHT, hid, 0, GetUnitX(t));
        SaveReal(GameHT, hid, 1, GetUnitY(t));
    }

    if (count == 42)
    {
        SoundStart("EsdeathW-1.mp3");
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        if (Distance(x, y, GetUnitX(t), GetUnitY(t)) > 160)
        {
            x = PolarX(GetUnitX(t), 270, a);
            y = PolarY(GetUnitY(t), 270, a);
            SetUnitXY(u, x, y, 1);
        }
        else
        {
            x = PolarX(GetUnitX(t), 140, a);
            y = PolarY(GetUnitY(t), 140, a);
            SetUnitXY(u, x, y, 1);
        }
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacing(u, a);
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 0.9);
    }

    if (count == 47)
    {
        SoundStart("EsdeathSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        for (int i = 0; i < 3; i++)
        {
            Effect("Esdeathsfx6.mdx", GetUnitX(u), GetUnitY(u), GetRandomReal(10, 30), a + 180, GetRandomReal(-45, 45), 0, 2, 1.5, 154, 200, 205, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5, 1));
        }
        Effect("Esdeathsfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx5.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
        Effect("Esdeathsfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 3, 1.5, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9f);

        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A05U')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 390, 0.6, 0.02, true);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void EsdeathQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("EsdeathQ.mp3");
        SoundStart("EsdeathSE1.mp3");
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 1.3f);
        Effect("Esdeathsfx4.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        if (count == 1)
        {
            RushSlide(u, a, 1400, 0.2, 0.02, false);
        }
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A05T'));
                GroupAddUnit(g1, d);
            }
        }

        if (count % 2 == 0)
        {
            Effect("esdeathsfx1.mdx", GetUnitX(u), GetUnitY(u), 50, a, -90, 0, 1.5, 1, 255, 255, 255, 255);
            Effect("Esdeathsfx2.mdx", GetUnitX(u), GetUnitY(u), 50, randomAngle(), 0, 0, 1.3, 1, 14, 70, 163, 255);
            Effect("esdeathsfx3.mdx", GetUnitX(u), GetUnitY(u), 0, randomAngle(), 0, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        DestroyGroup(g1);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SehaD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    int pid1 = GetPlayerId(GetOwningPlayer(u));

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        if (BabonExtra1[pid1])
        {
            SoundStart("SehaD-1.mp3");
        }
        else
        {
            SoundStart("SehaD.mp3");
        }
        SoundStart("SehaSE2.mp3");
        SetUnitAnimationByIndex(u, 0);
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
    }

    if (count <= 45)
    {
        if (dist > 120)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 14, a);
            y = PolarY(GetUnitY(t), 14, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -100, a);
            y = PolarY(GetUnitY(t), -100, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 35)
    {
        SetUnitAnimationByIndex(u, 1);
        SetUnitFlyHeight(t, 160.f, 900.f);
    }

    if (count == 35 || count == 40 || count == 45)
    {
        DestroyEffectTimed(AddSpecialEffectTarget("ichigosfx37.mdx", u, "weapon ref"), 1.f);
    }

    if (count == 45)
    {
        Effect("Sehasfx14.mdx", GetUnitX(u), GetUnitY(u), 100, a, -25, .0f, 2.f, 1.f, 255, 255, 255, 255);
        RushSlide(t, a, 140.f, 0.6f, 0.02f, true);
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 80.f, 400.f);
    }

    if (count == 55)
    {
        SetUnitFlyHeight(t, .0f, 600.f);
    }

    if (count == 65)
    {
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 0.9f);
        RushSlide(u, a+180, 220.f, 0.6f, 0.02f, true);
    }

    if (count == 90)
    {
        SoundStart("SehaSE9.mp3");
        Effect("Sehasfx16.mdx", GetUnitX(u), GetUnitY(u), 80.f, a, .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.75f);
    }

    if (count == 95)
    {
        SoundStart("SehaSE1.mp3");
        Effect("Sehasfx14.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 2.5f, 1.5f, 255, 255, 255, 255);
        Effect("Sehasfx9.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 3.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Sehasfx1.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75f);
        Effect("Sehasfx11.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, PercentTo255(80));
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        Effect("Sehasfx11.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        Effect("Sehasfx11.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, .0f, .0f, 2.5f, 2.f, 255, 255, 255, PercentTo255(60));
        SetSpecialEffectTimeScale(dummy_effect, 0.3f);

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SehaF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;
    effect e = nil;
    int pid1 = GetPlayerId(GetOwningPlayer(u));

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        if (BabonExtra1[pid1])
        {
            SoundStart("SehaF-1.mp3");
        }
        else
        {
            SoundStart("SehaF.mp3");
        }
        SoundStart("hydese1.mp3");
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitAnimationByIndex(u, 5);
        Effect("hydesfx19.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        Effect("Sehasfx11.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65f);
    }

    if (count == 10 || count == 25 || count == 40 || count == 55)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        if (count == 10)
        {
            x = PolarX(GetUnitX(t), 400, 0);
            y = PolarY(GetUnitY(t), 400, 0);
        }
        else if (count == 25)
        {
            x = PolarX(GetUnitX(t), 400, 90);
            y = PolarY(GetUnitY(t), 400, 90);
        }
        else if (count == 40)
        {
            x = PolarX(GetUnitX(t), 400, 180);
            y = PolarY(GetUnitY(t), 400, 180);
        }
        else if (count == 55)
        {
            x = PolarX(GetUnitX(t), 400, 270);
            y = PolarY(GetUnitY(t), 400, 270);
        }
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), 0);
        SetUnitAnimationByIndex(u, 14);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        RushSlide(u, a, 800.f, 0.26f, 0.02, false);
        SaveReal(GameHT, hid, 0, x);
        SaveReal(GameHT, hid, 1, y);
    }

    if (count == 15 || count == 30 || count == 45 || count == 60)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("SehaSE3.mp3");
        }
        else
        {
            SoundStart("SehaSE4.mp3");
        }
        x = LoadReal(GameHT, hid, 0);
        y = LoadReal(GameHT, hid, 1);
        a = Angle(x, y, GetUnitX(t), GetUnitY(t));
        x2 = PolarX(x, 200, a);
        y2 = PolarY(y, 200, a);
        Effect("Sehasfx13.mdx", x2, y2, GetUnitFlyHeight(t), a, .0f, .0f, 4.f, 1.f, 255, 255, 255, 255);
        Effect("Sehasfx9.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), a, .0f, .0f, 5.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 250.f, .0f);
    }

    if (count >= 60 && count <= 110)
    {
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) - 20.f, .0f);
    }

    if (count == 70)
    {
        SetUnitFacing(u, a);
        SetUnitFlyHeight(u, .0f, 2500.f);
        SetUnitAnimationByIndex(u, 6);
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SaveReal(GameHT, hid, 2, dist);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SaveReal(GameHT, hid, 3, a);
    }

    if (count >= 70 && count <= 85)
    {
        dist = LoadReal(GameHT, hid, 2);
        a = LoadReal(GameHT, hid, 3);
        x = PolarX(GetUnitX(u), dist / 15, a);
        y = PolarY(GetUnitY(u), dist / 15, a);
        SetUnitXY(u, x, y, 0);
        DestroyEffectTimed(AddSpecialEffectTarget("ichigosfx37.mdx", u, "weapon ref"), 1.f);
    }

    if (count == 85)
    {
        SoundStart("SehaSE1.mp3");
        Effect("Sehasfx1.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 2.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "spell four");
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Sehasfx6.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        for (int i = 0; i < 6; i++)
        {
            x = PolarX(GetUnitX(u), 300, i * 60);
            y = PolarY(GetUnitY(u), 300, i * 60);
            Effect("Sehasfx4.mdx", x, y, .0f, i * 60.f, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        }
        KnockupUnit(t, 0.6f, 0.02f, 360);
    }

    if (count == 95)
    {
        SoundStart("SehaSE8.mp3");
    }

    if (count >= 90 && count <= 115)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.05);
    }

    if (count == 115)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SehaT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;
    int pid1 = GetPlayerId(GetOwningPlayer(u));

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        if (BabonExtra1[pid1])
        {
            SoundStart("SehaT-1.mp3");
        }
        else
        {
            SoundStart("SehaT.mp3");
        }
        SoundStart("hydese1.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -100.f, a);
        y = PolarY(GetUnitY(t), -100.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 5);
        Effect("hydesfx19.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        Effect("Sehasfx11.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65f);
        RushSlide(t, a, 100.f, 0.6f, 0.02f, true);
    }

    if (count == 20)
    {
        SetUnitAnimation(u, "attack");
    }

    if (count == 25)
    {
        SoundStart("SehaSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Sehasfx3.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
        Effect("Sehasfx9.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
        RushSlide(t, a, 170.f, 0.4f, 0.02f, true);
    }

    if (count == 35)
    {
        x = PolarX(GetUnitX(t), -100.f, a);
        y = PolarY(GetUnitY(t), -100.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimation(u, "attack");
    }

    if (count == 40)
    {
        SoundStart("SehaSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Sehasfx3.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, 180.f, 2.f, 1.f, 255, 255, 255, 255);
        Effect("Sehasfx9.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
        RushSlide(t, a, 170.f, 0.4f, 0.02f, true);
    }

    if (count == 50)
    {
        x = PolarX(GetUnitX(t), -100.f, a);
        y = PolarY(GetUnitY(t), -100.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 7);
    }

    if (count == 55)
    {
        SoundStart("SehaSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Sehasfx3.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, 45.f, 2.f, 1.f, 255, 255, 255, 255);
        Effect("Sehasfx9.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
        RushSlide(t, a, 140.f, 2.f, 0.02f, true);
    }

    if (count == 65)
    {
        SetUnitAnimationByIndex(u, 18);
        SetUnitAnimationOffsetPercent(u, 0.9f);
    }

    if (count == 70)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitTimeScale(u, .0f);
    }

    if (count >= 65 && count <= 135)
    {
        if (count % 3 == 0)
        {
            DestroyEffectTimed(AddSpecialEffectTarget("ichigosfx37.mdx", u, "weapon ref"), 1.f);
        }
    }

    if (count == 125)
    {
        x = PolarX(GetUnitX(t), -100.f, a);
        y = PolarY(GetUnitY(t), -100.f, a);
        SetUnitXY(u, x, y, 0);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 19);
        SetUnitTimeScale(u, 1.f);
    }

    if (count == 130)
    {
        Effect("Sehasfx3.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, 90.f, 2.f, 1.5f, 255, 255, 255, 255);
    }

    if (count == 135)
    {
        SoundStart("Sehase7.mp3");
        x = PolarX(GetUnitX(u), 120.f, a);
        y = PolarY(GetUnitY(u), 120.f, a);
        Effect("Sehasfx5.mdx", x, y, .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75f);
    }

    if (count >= 135 && count <= 140)
    {
        x = PolarX(GetUnitX(u), 120.f, a);
        y = PolarY(GetUnitY(u), 120.f, a);
        Effect("Sehasfx12.mdx", x, y, .0f, randomAngle(), .0f, .0f, GetRandomReal(2.f, 3.f), 1.5f, 90, 178, 255, PercentTo255(GetRandomReal(60, 100)));
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.4f, 0.85f));
    }

    if (count == 140)
    {
        SoundStart("Sehase1.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(u), 120.f, a);
        y = PolarY(GetUnitY(u), 120.f, a);
        Effect("Sehasfx6.mdx", x, y, .0f, a, -10.f, .0f, 1.5f, 1.5f, 255, 255, 255, 255);
        for (int i = 0; i < 6; i++)
        {
            x2 = PolarX(x, 250.f, i * 60);
            y2 = PolarY(y, 250.f, i * 60);
            Effect("Sehasfx4.mdx", x2, y2, .0f, i * 60, .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }
    }

    if (count == 145)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 120.f, 0.4f, 0.02f, true);
        KnockupUnit(t, 0.4f, 0.02f, 280);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SehaR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    int pid1 = GetPlayerId(GetOwningPlayer(u));

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        if (BabonExtra1[pid1])
        {
            SoundStart("SehaR-1.mp3");
        }
        else
        {
            SoundStart("SehaR.mp3");
        }
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 0);
        if (dist < 500)
        {
            x = PolarX(GetUnitX(u), dist - 500, a);
            y = PolarY(GetUnitY(u), dist - 500, a);
            SetUnitXY(u, x, y, 0);
        }
        SetUnitFlyHeight(u, 600.f, .0f);
        UnitEnableAutoOrientation(u, false);
    }

    if (count <= 15)
    {
        x = PolarX(GetUnitX(u), -20, a);
        y = PolarY(GetUnitY(u), -20, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 40.f, .0f);
        SetUnitOrientation(u, a, -count * 2.5, .0f);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));

        if (count % 4 == 0)
        {
            CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.12, 0.46, 0.02, GetUnitAnimationOffsetPercent(u));
        }
    }

    if (count == 15)
    {
        dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SaveReal(GameHT, hid, 0, dist-100.f);
        SetUnitAnimationByIndex(u, 19);
    }

    if (count >= 15 && count <= 30)
    {
        dist = LoadReal(GameHT, hid, 0);
        x = PolarX(GetUnitX(u), dist / 15, a);
        y = PolarY(GetUnitY(u), dist / 15, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 75.f, .0f);

        if (count % 3 == 0)
        {
            Effect("sehasfx8.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), GetUnitFacing(u), GetUnitPitch(u), .0f, 4.f, 1.f, 109, 197, 209, 255);
            Effect("sehasfx10.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), GetUnitFacing(u), -GetUnitPitch(u), .0f, 1.f, 1.f, 109, 197, 209, 255);
            if (count <= 24)
            {
                CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.14, 0.42, 0.02, GetUnitAnimationOffsetPercent(u));
            }
        }
    }

    if (count == 30)
    {
        SoundStart("SehaSE7.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Sehasfx1.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9f);
        Effect("Sehasfx5.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.85f);
        Effect("Sehasfx6.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.5f, 1.5f, 255, 255, 255, 255);
        RushSlide(t, a, 120, 0.4, 0.02, true);
        KnockupUnit(t, 0.4, 0.02, 260);

        SetUnitOrientation(u, a, .0f, .0f);
        UnitEnableAutoOrientation(u, true);
        SetUnitFlyHeight(u, .0f, .0f);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A05P')) * GetHeroAgi(u, true));
        IssueImmediateOrderById(t, 851972);
        IssueTargetOrderById(u, 851983, t);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SehaE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    int pid1 = GetPlayerId(GetOwningPlayer(u));

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        if (BabonExtra1[pid1])
        {
            SoundStart("SehaE-1.mp3");
        }
        else
        {
            SoundStart("SehaE.mp3");
        }
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
    }

    if (count <= 14)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 9, a);
            y = PolarY(GetUnitY(u), dist / 9, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120.f, a);
            y = PolarY(GetUnitY(t), -120.f, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 3 == 0)
        {
            Effect("sehasfx7.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
            CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.22, 0.48, 0.02, GetUnitAnimationOffsetPercent(u));
        }
    }

    if (count == 10)
    {
        SetUnitAnimation(u, "attack");
    }

    if (count == 14)
    {
        SoundStart("SehaSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Sehasfx3.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
        Effect("Sehasfx9.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
        RushSlide(t, a, 300.f, 0.3f, 0.02f, true);
    }

    if (count == 24)
    {
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimation(u, "attack");
    }

    if (count == 28)
    {
        SoundStart("SehaSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Sehasfx3.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, 180.f, 2.f, 1.f, 255, 255, 255, 255);
        Effect("Sehasfx9.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
        RushSlide(t, a, 300.f, 0.3f, 0.02f, true);
    }

    if (count == 34)
    {
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 7);
    }

    if (count == 38)
    {
        SoundStart("SehaSE5.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Sehasfx3.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, 45.f, 2.f, 1.f, 255, 255, 255, 255);
        Effect("Sehasfx9.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
        RushSlide(t, a, 200.f, 0.4f, 0.02f, true);
    }

    if (count == 42)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A05O') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SehaW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    int pid1 = GetPlayerId(GetOwningPlayer(u));

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 42)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        if (BabonExtra1[pid1])
        {
            SoundStart("SehaW-1.mp3");
        }
        else
        {
            SoundStart("SehaW.mp3");
        }
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 0);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
    }

    if (count <= 12)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 7, a);
            y = PolarY(GetUnitY(u), dist / 7, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120.f, a);
            y = PolarY(GetUnitY(t), -120.f, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 3 == 0)
        {
            Effect("sehasfx7.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        }
    }

    if (count >= 12 && count <= 42)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 7, a);
            y = PolarY(GetUnitY(u), dist / 7, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 17.f, a);
            y = PolarY(GetUnitY(t), 17.f, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120.f, a);
            y = PolarY(GetUnitY(t), -120.f, a);
            SetUnitXY(u, x, y, 0);
        }
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));

        if (count < 30)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 38.f, .0f);
            SetUnitFlyHeight(u, GetUnitFlyHeight(t), .0f);
        }
        else
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) - 23, .0f);
            SetUnitFlyHeight(u, GetUnitFlyHeight(t), .0f);
        }

        if (count == 12)
        {
            SetUnitAnimation(u, "attack");
        }

        if (count == 16)
        {
            Effect("sehasfx3.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, .0f, 40.f, 1.5f, 1.f, 255, 255, 255, 255);
            Effect("sehasfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), -20.f, .0f, 5.f, 1.5f, 109, 197, 209, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75f);
            Effect("Sehasfx9.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }

        if (count == 22)
        {
            SetUnitAnimation(u, "attack");
        }

        if (count == 26)
        {
            Effect("sehasfx3.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, .0f, -30.f, 1.5f, 1.f, 255, 255, 255, 255);
            Effect("sehasfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), -20.f, .0f, 5.f, 1.5f, 109, 197, 209, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75f);
            Effect("Sehasfx9.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }

        if (count == 35)
        {
            SetUnitAnimationByIndex(u, 19);
        }

        if (count == 39)
        {
            Effect("sehasfx3.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), a, .0f, 100.f, 1.5f, 1.f, 255, 255, 255, 255);
            Effect("sehasfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), -20.f, .0f, 5.f, 1.5f, 109, 197, 209, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75f);
            Effect("Sehasfx9.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }

        if (count == 15 || count == 25 || count == 38)
        {
            if (GetRandomInt(1, 2) == 1)
            {
                SoundStart("SehaSE4.mp3");
            }
            else
            {
                SoundStart("SehaSE3.mp3");
            }
        }
    }

    if (count == 42)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        RushSlide(t, a, 250.f, 0.2f, 0.02f, true);
        SetUnitFlyHeight(t, .0f, 2040);
        SetUnitFlyHeight(u, .0f, 1360);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A01X')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
    }

    if (count == 53)
    {
        Effect("Sehasfx5.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
        RushSlide(t, a, 80, 0.4, 0.02, true);
        KnockupUnit(t, 0.4, 0.02, 160);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SehaQ2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = GetUnitFacing(u);
    float x = .0f;
    float y = .0f;
    int pid1 = GetPlayerId(GetOwningPlayer(u));

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        if (BabonExtra1[pid1])
        {
            SoundStart("SehaQ2-1.mp3");
        }
        else
        {
            SoundStart("SehaQ2.mp3");
        }
        SoundStart("SehaSE2.mp3");
        SetUnitAnimationByIndex(u, 17);
        RushSlide(u, a + 180, 1000, 0.36, 0.02, false);
    }

    if (count <= 20)
    {
        if (count % 3 == 0)
        {
            CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.16, 0.38, 0.02, GetUnitAnimationOffsetPercent(u));
            Effect("sehasfx2.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
            Effect("sehasfx7.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        }
    }

    if (count == 20)
    {
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void SehaQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;
    
    int pid1 = GetPlayerId(GetOwningPlayer(u));

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        if (BabonExtra1[pid1])
        {
            SoundStart("SehaQ-1.mp3");
        }
        else
        {
            SoundStart("SehaQ.mp3");
        }
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 1.2f);
        Effect("Sehasfx1.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "spell four");
        Effect("Sehasfx2.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        RushSlide(u, a, dist, 0.16, 0.02, false);
        KnockupUnit(u, 0.16, 0.02, 450);
    }

    if (count <= 10)
    {
        if (count % 2 == 0)
        {
            CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.18, 0.34, 0.02, GetUnitAnimationOffsetPercent(u));
        }
    }

    if (count == 7)
    {
        SoundStart("SehaSE1.mp3");
        Effect("Sehasfx3.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), GetUnitFacing(u), .0f, 90.f, 2.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.3f);
    }

    if (count == 10)
    {
        for (int i = 0; i < 6; i++)
        {
            x2 = PolarX(GetUnitX(u), 300, i * 60);
            y2 = PolarY(GetUnitY(u), 300, i * 60);
            Effect("Sehasfx4.mdx", x2, y2, .0f, i * 60, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        }
        Effect("Sehasfx6.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.5f, 1.5f, 255, 255, 255, 255);
        Effect("Sehasfx5.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9f);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600.f, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A00M'));
            }
        }
        DestroyGroup(g1);

        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        DisableAbility(GetUnitAbility(u, 'A00M'), true, true);
        UnitAddAbility(u, 'A00N');
        UnitMakeAbilityPermanent(u, true, 'A00N');
        TimerStart(tmr, 5.f, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            unit u = LoadUnitHandle(GameHT, hid, 'cstr');

            UnitRemoveAbility(u, 'A00N');
            EnableAbility(GetUnitAbility(u, 'A00M'), true, true);
            FlushChildHashtable(GameHT, hid);
            DestroyTimer(tmr);
        });
    }
}

void HydeD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HydeE.mp3");
        SoundStart("HydeSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 13);
    }

    if (count == 5)
    {
        SoundStart("HydeSE3.mp3");
        SoundStart("HydeSE4.mp3");
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacing(u, a);
        Effect("Hydesfx4.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1.5, 255, 255, 255, 255);
        Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), 100, a, 0, 0, 7, 1, 255, 255, 255, 255);
        Effect("Hydesfx6.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), 50, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
        RushSlide(t, a, 300, 0.6, 0.02, true);
    }

    if (count == 35)
    {
        SoundStart("HydeD.mp3");
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacing(u, a);
        SetUnitAnimationByIndex(u, 14);
        SetUnitTimeScale(u, 0.6);
        RushSlide(t, a, 600, 0.8, 0.02, true);
    }

    if (count >= 40 && count <= 80)
    {
        x = PolarX(GetUnitX(t), -130, a);
        y = PolarY(GetUnitY(t), -130, a);
        SetUnitXY(u, x, y, 0);

        if (count % 5 == 0)
        {
            DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "hand right"), 1);
            DestroyEffectTimed(AddSpecialEffectTarget("Gokusfx11.mdx", u, "chest"), 1);
            Effect("Gokusfx8.mdx", x, y, 100, randomAngle(), -45, 0, GetRandomReal(1.5, 2.5), 1, 255, 220, 0, 255);
            Effect("Gokusfx8.mdx", x, y, 100, randomAngle(), -30, 0, GetRandomReal(1.5, 2.5), 1, 255, 220, 0, 255);
            Effect("Hydesfx13.mdx", x, y, 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
        }
    }

    if (count == 80)
    {
        SoundStart("HydeD-1.mp3");
        SoundStart("HydeT.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Hydesfx27.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2, 1.5, 255, 255, 255, 255);
        RushSlide(t, a, 140, 0.6, 0.02, true);
    }

    if (count >= 80 && count <= 90)
    {
        SaveReal(GameHT, hid, 0, LoadReal(GameHT, hid, 0) + 150);
        x = PolarX(GetUnitX(u), LoadReal(GameHT, hid, 0), a);
        y = PolarY(GetUnitY(u), LoadReal(GameHT, hid, 0), a);
        Effect("Hydesfx9.mdx", x, y, 0, a, 0, 0, 2, 1, 255, 255, 255, 255);
    }

    if (count == 90)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HydeF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = GetUnitFacing(u);
    float a2 = .0f;
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;
    float dist = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("Hydef.mp3");
        SoundStart("hydef-1.mp3");
        Effect("Hydesfx17.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        SetUnitXY(u, x, y, 1);
        SetUnitAnimationByIndex(u, 21);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Hydesfx25.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 1.5f);
    }

    if (count == 50)
    {
        SoundStart("HydeF-2.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 14);
        SetUnitTimeScale(u, 0.8f);
    }

    if (count <= 80)
    {
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600.f, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                a2 = Angle(GetUnitX(d), GetUnitY(d), GetUnitX(u), GetUnitY(u));
                dist = Distance(GetUnitX(d), GetUnitY(d), GetUnitX(u), GetUnitY(u));
                if (dist > 100)
                {
                    x2 = PolarX(GetUnitX(d), 5, a2);
                    y2 = PolarY(GetUnitY(d), 5, a2);
                    SetUnitXY(d, x2, y2, 2);
                }
                else
                {
                    x2 = PolarX(GetUnitX(u), -120, a2);
                    y2 = PolarY(GetUnitY(u), -120, a2);
                    SetUnitXY(d, x2, y2, 2);
                }
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        if (count % 10 == 0)
        {
            Effect("Hydesfx26.mdx", GetUnitX(u), GetUnitY(u), 50.f, randomAngle(), .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        }
    }

    if (count == 80)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 22);
        SetUnitTimeScale(u, 1.5f);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600.f, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 11 * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        Effect("Hydesfx21.mdx", GetUnitX(u), GetUnitY(u), 50.f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        Effect("Jellalsfx30.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), 150.f, a, .0f, .0f, 10.f, 2.f, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.5f, 0.4f);
        Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), 150.f, a + 180, .0f, .0f, 10.f, 2.f, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.5f, 0.4f);
        Effect("Mystosfx20.mdx", GetUnitX(u), GetUnitY(u), 100.f, randomAngle(), .0f, .0f, 12.f, 2.f, 235, 158, 82, PercentTo255(10));
        SetSpecialEffectAnimation(dummy_effect, "death");

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HydeT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HydeT.mp3");
        SoundStart("HydeT-1.mp3");
        Effect("hydesfx17.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 21);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Hydesfx20.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 2.f);
        RushSlide(t, a, 200.f, 0.6f, 0.02f, true);
    }

    if (count == 35)
    {
        x = PolarX(GetUnitX(t), -120, a);
        y = PolarY(GetUnitY(t), -120, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 22);
        SetUnitTimeScale(u, 1.25f);
        Effect("Hydesfx24.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.25, 2.f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 1.5f);
        AnimEffect2(dummy_effect, "stand", 0.4f);
        AnimEffect2(dummy_effect, "death", 0.8f);
        TimeScaleEffect(dummy_effect, 1.f, 0.8f);
    }

    if (count == 45)
    {
        SoundStart("HydeT-2.mp3");
        SoundStart("HydeT-3.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Hydesfx21.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.5f, 0.4f);
        KnockupUnit(t, 1.f, 0.02f, 450);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HydeR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float x2 = .0f;
    float y2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HydeR.mp3");
        SoundStart("HydeE-3.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 15);
        Effect("Hydesfx13.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        Effect("Hydesfx14.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, .0f, .0f, 4.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8);
        Effect("Hydesfx15.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, .0f, .0f, 3.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx9.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        RushSlide(t, a, 600.f, 0.8f, 0.02f, true);
        SaveReal(GameHT, hid, 0, a);
    }

    if (count <= 40)
    {
        if (count % 5 == 0)
        {
            a = LoadReal(GameHT, hid, 0);
            Effect("Hydesfx16.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, 90.f, .0f, 1.f, 1.f, 255, 255, 255, PercentTo255(80));
        }
    }

    if (count == 20)
    {
        SoundStart("HydeR-1.mp3");
    }

    if (count == 25 || count == 45 || count == 65 || count == 85 || count == 100 || count == 120)
    {
        SetUnitAnimationByIndex(u, GetRandomInt(13, 14));
    }

    if (count == 30 || count == 40 || count == 85 || count == 100)
    {
        SoundStart("HydeW-5.mp3");
    }

    if (count == 30 || count == 50 || count == 70)
    {
        Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), 100.f, randomAngle(), .0f, .0f, 5.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx6.mdx", GetUnitX(u), GetUnitY(u), 100.f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
    }

    if (count == 50 || count == 125)
    {
        SoundStart("HydeW-1.mp3");
    }

    if (count == 35 || count == 45 || count == 55 || count == 65)
    {
        Effect("Hydesfx7.mdx", GetUnitX(u), GetUnitY(u), 100.f, randomAngle(), .0f, .0f, 5.f, 2.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(u), 50.f, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 50.f, GetUnitFacing(u));
        Effect("Hydesfx8.mdx", x, y, 100.f, randomAngle(), .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
    }

    if (count == 60 || count == 90 || count == 120)
    {
        SoundStart("HydeW-3.mp3");
    }

    if (count >= 20 && count <= 70)
    {
        x = PolarX(GetUnitX(u), 24, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 24, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 70)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Hydesfx9.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx17.mdx", GetUnitX(u), GetUnitY(u), 50.f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
    }

    if (count == 75)
    {
        SoundStart("HydeR-2.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitFlyHeight(u, 400.f, .0f);
        SetUnitFlyHeight(t, 400.f, .0f);
        SaveReal(GameHT, hid, 1, GetUnitX(t));
        SaveReal(GameHT, hid, 2, GetUnitY(t));
    }

    if (count == 85 || count == 95 || count == 105 || count == 120 || count == 130)
    {
        x = LoadReal(GameHT, hid, 1);
        y = LoadReal(GameHT, hid, 2);
        if (count == 130)
        {
            SetUnitXY(t, x, y, 0);
        }
        else
        {
            x2 = PolarX(x, GetRandomReal(100.f, 400.f), randomAngle());
            y2 = PolarY(y, GetRandomReal(100.f, 400.f), randomAngle());
            SetUnitXY(t, x2, y2, 0);
        }
        x2 = PolarX(GetUnitX(t), -120.f, a);
        y2 = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x2, y2, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        if (GetRandomInt(1, 2) == 1)
        {
            Effect("hydesfx5.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        }
        else
        {
            Effect("hydesfx7.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        }
        Effect("hydesfx18.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 100, randomAngle(), GetRandomReal(-20.f, 20.f), .0f, 1.5f, 2.f, 242, 81, 81, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        Effect("hydesfx6.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), GetRandomReal(-20.f, 20.f), .0f, 1.f, 1.f, 255, 255, 255, 255);
        Effect("hydesfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50.f, randomAngle(), GetRandomReal(-20.f, 20.f), .0f, 2.f, 1.f, 255, 255, 255, 255);
        Effect("Mystosfx20.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) - 50.f, randomAngle(), .0f, .0f, 12.f, 2.f, 242, 81, 81, PercentTo255(10));
        SetSpecialEffectAnimation(dummy_effect, "death");
    }

    if (count == 125)
    {
        SoundStart("HydeR-3.mp3");
    }

    if (count == 135)
    {
        RushSlide(t, a, 400.f, 0.3f, 0.02f, true);
        SetUnitFlyHeight(t, .0f, 1333.f);
    }

    if (count == 150)
    {
        Effect("hydesfx9.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        Effect("hydesfx10.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
    }

    if (count == 155)
    {
        SoundStart("hydese1.mp3");
        SoundStart("hyder-4.mp3");
        Effect("hydesfx17.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 2);
        SetUnitFlyHeight(u, .0f, .0f);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Hydesfx19.mdx", GetUnitX(u), GetUnitY(u), 200.f, a, .0f, .0f, 4.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
    }

    if (count == 165)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("Hyder-5.mp3");
        }
        else
        {
            SoundStart("hyder-7.mp3");
        }
        Effect("hydesfx20.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
    }

    if (count == 170)
    {
        SetUnitAnimationByIndex(u, 14);
        SetUnitTimeScale(u, 0.5f);
    }

    if (count == 190)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("Hyder-6.mp3");
        }
        else
        {
            SoundStart("hyder-8.mp3");
        }
    }

    if (count == 195)
    {
        SoundStart("hyder-9.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("hydesfx21.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9f);
        Effect("Mystosfx20.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 12.f, 3.f, 232, 154, 76, PercentTo255(10));
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.9f);
    }

    if (count == 200)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (7 + GetUnitAbilityLevel(u, 'A00U')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HydeE2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("hydee2.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitAnimationByIndex(u, 0);
        SetUnitFacingEx(u, a, true);
        Effect("Hydesfx4.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
    }

    if (count == 5)
    {
        SoundStart("HydeW-1.mp3");
    }

    if (count == 10)
    {
        Effect("hydesfx5.mdx", GetUnitX(u), GetUnitY(u), 100.f, randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        SetUnitAnimationByIndex(u, 7);
        SetUnitTimeScale(u, 1.3f);
    }

    if (count == 15)
    {
        SoundStart("Hydew-3.mp3");
        SetUnitAnimationByIndex(u, 14);
        SetUnitFlyHeight(u, 400.f, .0f);
        SetUnitFlyHeight(t, 400.f, .0f);
    }

    if (count == 15 || count == 25)
    {
        Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
    }

    if (count == 20 || count == 30)
    {
        Effect("Hydesfx7.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
    }

    if (count == 25)
    {
        SoundStart("HydeW-1.mp3");
        SetUnitAnimationByIndex(u, 14);
        SetUnitTimeScale(u, 1.f);
    }

    if (count <= 30)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10.f, a);
            y = PolarY(GetUnitY(u), dist / 10.f, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10.f, a);
            y = PolarY(GetUnitY(t), 10.f, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120.f, a);
            y = PolarY(GetUnitY(t), -120.f, a);
            SetUnitXY(u, x, y, 0);
        }
    }

    if (count == 30)
    {
        RushSlide(t, a, 400.f, 0.4f, 0.02f, true);
        SetUnitFlyHeight(t, .0f, 1000.f);
    }

    if (count == 50)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Hydesfx9.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx10.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
        SetUnitFlyHeight(u, .0f, .0f);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A00X')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HydeE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("hydee.mp3");
        SoundStart("hydee-1.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 8);
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        RushSlide(t, a, 400.f, 0.6f, 0.02f, true);
    } 

    if (count <= 30)
    {
        if (count % 5 == 0)
        {
            Effect("Hydesfx5.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
            Effect("Hydesfx7.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        }
    }

    if (count == 40)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 22);
        SetUnitTimeScale(u, 1.5f);
    }

    if (count == 50)
    {
        SoundStart("Hydee-2.mp3");
        SoundStart("Hydee-3.mp3");
        Effect("Hydesfx9.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx11.mdx", GetUnitX(t), GetUnitY(t), 150.f, randomAngle(), GetRandomReal(20.f, 40.f), .0f, 4.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        Effect("Hydesfx11.mdx", GetUnitX(t), GetUnitY(t), 150.f, randomAngle(), GetRandomReal(20.f, 40.f), .0f, 4.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        RushSlide(t, a, 400.f, 0.3f, 0.02f, true);
        SetUnitFlyHeight(t, 400.f, 1333.f);
    }

    if (count == 65)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Hydesfx12-x2.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        SetUnitFlyHeight(t, .0f, 1000.f);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A00T') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);

        if (GetUnitAbilityLevel(u, 'A00U') > 0 && IsUnitAlive(t))
        {
            HydeE_Target[GetUnitUserData(u)] = t;
            DisableAbility(GetUnitAbility(u, 'A00T'), true, true);
            EnableAbility(GetUnitAbility(u, 'A00X'), true, true);
            TimerStart(tmr, 5.f, false, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit u = LoadUnitHandle(GameHT, hid, 'cstr');
                int uid = GetUnitUserData(u);

                HydeE_Target[uid] = nil;
                EnableAbility(GetUnitAbility(u, 'A00T'), true, true);
                DisableAbility(GetUnitAbility(u, 'A00X'), true, true);
                FlushChildHashtable(GameHT, hid);
                DestroyTimer(tmr);
            });
        }
        else
        {
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void HydeW2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("HydeW2.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitAnimationByIndex(u, 0);
        SetUnitFacingEx(u, a, true);
    }

    if (count == 10)
    {
        SoundStart("HydeW-3.mp3");
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 13);
        SetUnitTimeScale(u, 1.2f);
        Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), 100.f, randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx7.mdx", GetUnitX(u), GetUnitY(u), 100.f, randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        RushSlide(t, a, 400.f, 0.3f, 0.02f, true);
    }

    if (count == 25 || count == 55 || count == 75)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), 140.f, a);
        y = PolarY(GetUnitY(t), 140.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFlyHeight(u, GetUnitFlyHeight(t), .0f);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, GetRandomInt(13, 14));
        if (count == 25)
        {
            RushSlide(t, a, 350.f, 0.6f, 0.02f, true);
        }
        else if (count == 55)
        {
            RushSlide(t, a, 350.f, 0.4f, 0.02f, true);
        }
        else
        {
            RushSlide(t, a, 350.f, 0.5f, 0.02f, true);
        }
    }

    if (count == 30)
    {
        SoundStart("HydeW2-1.mp3");
        SoundStart("HydeW-1.mp3");
        Effect("Hydesfx7.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
    }
    
    if (count == 60)
    {
        SoundStart("HydeW2-2.mp3");
        SoundStart("HydeW-3.mp3");
        Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx7.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
    }

    if (count >= 10 && count <= 100)
    {
        if (count <= 40)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 10.f, .0f);
        }
        if (count >= 80)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) - 20.f, .0f);
        }
    }

    if (count == 100)
    {
        SoundStart("HydeW-1.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), 140.f, a);
        y = PolarY(GetUnitY(t), 140.f, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitFlyHeight(u, .0f, .0f);
        SetUnitFlyHeight(t, .0f, .0f);
        Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx7.mdx", GetUnitX(u), GetUnitY(u), 100, randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx9.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (2 + GetUnitAbilityLevel(u, 'A00W')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HydeW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 90)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetInvulUnit(t, true);
        SetPauseUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("HydeW.mp3");
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 1.f);
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        Effect("Hydesfx3.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
    }

    if (count == 5)
    {
        SoundStart("HydeW-1.mp3");
    }

    if (count <= 90)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 12, a);
            y = PolarY(GetUnitY(u), dist / 12, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), 10.f, a);
            y = PolarY(GetUnitY(t), 10.f, a);
            SetUnitXY(t, x, y, 2);
            x = PolarX(GetUnitX(t), -120.f, a);
            y = PolarY(GetUnitY(t), -120.f, a);
            SetUnitXY(u, x, y, 0);
        }
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));

        if (count == 15)
        {
            Effect("Hydesfx4.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 7.f, 2.f, 255, 255, 255, 255);
            SetUnitAnimationByIndex(u, 7);
            SetUnitTimeScale(u, 1.3f);
        }

        if (count >= 20 && count <= 30)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 40.f, .0f);
            SetUnitFlyHeight(u, GetUnitFlyHeight(t), .0f);
        }

        if (count == 35)
        {
            SoundStart("HydeW-2.mp3");
            SoundStart("HydeW-3.mp3");
            SetUnitAnimationByIndex(u, 14);
        }

        if (count == 60)
        {
            SoundStart("HydeW-4.mp3");
            SoundStart("HydeW-5.mp3");
            SetUnitAnimationByIndex(u, 13);
        }

        if (count == 80)
        {
            SoundStart("HydeW-6.mp3");
            SoundStart("HydeW-1.mp3");
            SetUnitAnimationByIndex(u, 14);
            SetUnitTimeScale(u, 1.f);
        }

        if (count == 35 || count == 60 || count == 80)
        {
            Effect("Hydesfx5.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 50.f, randomAngle(), .0f, .0f, 7.f, 2.f, 255, 255, 255, 255);
            Effect("Hydesfx6.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }

        if (count == 45 || count == 70 || count == 90)
        {
            Effect("Hydesfx7.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 50, randomAngle(), .0f, .0f, 7.f, 2.f, 255, 255, 255, 255);
            Effect("Hydesfx8.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t), randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        }

        if (count % 9 == 0)
        {
            CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.14, 0.38, 0.02, GetUnitAnimationOffsetPercent(u));
        }
    }

    if (count == 90)
    {
        RushSlide(t, a, 360.f, 0.6f, 0.02f, true);
        SetUnitFlyHeight(t, 0, 666);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        SetUnitFlyHeight(u, .0f, 1000.f);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A00S')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);

        if (GetUnitAbilityLevel(u, 'A00U') > 0)
        {
            DisableAbility(GetUnitAbility(u, 'A00S'), true, true);
            EnableAbility(GetUnitAbility(u, 'A00W'), true, true);
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 5.f, false, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit u = LoadUnitHandle(GameHT, hid, 'cstr');

                EnableAbility(GetUnitAbility(u, 'A00S'), true, true);
                DisableAbility(GetUnitAbility(u, 'A00W'), true, true);
                FlushChildHashtable(GameHT, hid);
                DestroyTimer(tmr);
            });
        }
    }

    if (count == 120)
    {
        Effect("Hydesfx9.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        Effect("Hydesfx10.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HydeQ2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("HydeQ2.mp3");
        SetUnitAnimationByIndex(u, 16);
        SetUnitTimeScale(u, 1.f);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        if (count == 1)
        {
            RushSlide(u, a, 1400, 0.2, 0.02, false);
        }
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300.f, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, (2 + GetUnitAbilityLevel(u, 'A00V')) * GetHeroAgi(u, true));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count % 2 == 0)
        {
            x = PolarX(GetUnitX(u), -50.f, a);
            y = PolarY(GetUnitY(u), -50.f, a);
            Effect("Hydesfx22.mdx", x, y, 100.f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
            TimeScaleEffect(dummy_effect, 0.2f, 0.2f);
            Effect("Hydesfx23.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 1.25f);
            CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.14, 0.36, 0.02, GetUnitAnimationOffsetPercent(u));
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        DestroyGroup(g1);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void HydeQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("HydeQ.mp3");
        SetUnitAnimationByIndex(u, 14);
        SetUnitTimeScale(u, 1.5f);
        Effect("", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 0);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300.f, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A00R'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count % 2 == 0)
        {
            Effect("Hydesfx1.mdx", x, y, 100.f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }
    }

    if (count == 12)
    {
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        DestroyGroup(g1);
        if (GetUnitAbilityLevel(u, 'A00U') > 0)
        {
            DisableAbility(GetUnitAbility(u, 'A00R'), true, true);
            EnableAbility(GetUnitAbility(u, 'A00V'), true, true);
            TimerStart(tmr, 5, false, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit u = LoadUnitHandle(GameHT, hid, 'cstr');
                EnableAbility(GetUnitAbility(u, 'A00R'), true, true);
                DisableAbility(GetUnitAbility(u, 'A00V'), true, true);
                FlushChildHashtable(GameHT, hid);
                DestroyTimer(tmr);
            });
        }
        else
        {
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void BellD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("BellD.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 4);
        Effect("black.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, PercentTo255(40));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
    }

    if (count == 20)
    {
        SoundStart("BellD-1.mp3");
        Effect("Bellsfx22.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 5.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        Effect("Bellsfx4.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 2.f, 4.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Bellsfx23.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        Effect("Bellsfx14.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.4f);
        Effect("Bellsfx24.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.3f);
        for (int i = 0; i < 12; i++)
        {
            x = PolarX(GetUnitX(t), GetRandomReal(150.f, 350.f), randomAngle());
            y = PolarY(GetUnitY(t), GetRandomReal(150.f, 350.f), randomAngle());
            Effect("Bellsfx25.mdx", x, y, .0f, a, .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        }
    }

    if (count == 35)
    {
        for (int i = 0; i < 12; i++)
        {
            x = PolarX(GetUnitX(t), 300.f, i * 30.f);
            y = PolarY(GetUnitY(t), 300.f, i * 30.f);
            Effect("Bellsfx26.mdx", x, y, .0f, i * 30.f, .0f, .0f, 4.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75f);
        }
    }

    if (count == 50)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BellF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("BellF.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 12.f, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -700.f, a);
        y = PolarY(GetUnitY(t), -700.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 4);
        Effect("black.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 10.f, 255, 255, 255, PercentTo255(80));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
    }

    if (count == 10 || count == 60 || count == 110 || count == 160 || count == 210)
    {
        Effect("Bellsfx4.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
    }

    if (count == 20 || count == 40 || count == 80 || count == 100 || count == 130 || count == 150 || count == 220 || count == 260 || count == 320 || count == 380 || count == 440)
    {
        Effect("Bellsfx13.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        if (count > 220)
        {
            SetSpecialEffectTimeScale(dummy_effect, 0.75f);
        }
    }

    if (count == 30 || count == 90 || count == 150 || count == 210 || count == 270 || count == 330 || count == 390 || count == 450)
    {
        Effect("Bellsfx19.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
    }

    if (count == 100)
    {
        Effect("Bellsfx15.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.5f, 8.f, 255, 255, 255, 255);
    }

    if (count == 140 || count == 170 || count == 200 || count == 240 || count == 280 || count == 320 || count == 400 || count == 450)
    {
        Effect("Bellsfx20.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
    }

    if (count == 450)
    {
        SetUnitAnimationByIndex(u, 2);
        dummy_effect = AddSpecialEffectTarget("Abilities\\Weapons\\PhoenixMissile\\Phoenix_Missile.mdx", u, "hand right");
        AnimEffect2(dummy_effect, "death", 2.f);
        DestroyEffectTimed(dummy_effect, 3.f);
    }

    if (count == 530)
    {
        SetUnitAnimationByIndex(u, 4);
    }

    if (count >= 450 && count <= 550)
    {
        x = PolarX(GetUnitX(u), 6, a);
        y = PolarY(GetUnitY(u), 6, a);
        SetUnitXY(u, x, y, 0);

        if (count % 10 == 0)
        {
            Effect("bellsfx8.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
            Effect("Bellsfx9.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
        }
    }

    if (count == 560)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Bellsfx22.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 3.f, 255, 255, 255, 255);
        Effect("Bellsfx4.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        Effect("Bellsfx23.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        Effect("Bellsfx14.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
    }

    if (count == 570)
    {
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BellT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float a2 = .0f;
    
    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("BellT.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 5);
        Effect("Bellsfx12.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
    }

    if (count == 10)
    {
        Effect("Bellsfx17.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("black.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 8.f, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
    }

    if (count == 30)
    {
        SoundStart("BellT-1.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 40)
    {
        Effect("Bellsfx18.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.5f, 3.f, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
        TimeScaleEffect(dummy_effect, 0.5f, 1.6f);
        Effect("Bellsfx19.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.2f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        Effect("Bellsfx20.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Bellsfx21.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 0.6f);
        TimeScaleEffect(dummy_effect, 0.5f, 0.6f);
        Effect("Bellsfx14.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
    }

    if (count == 80)
    {
        SoundStart("BellT-2.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 90)
    {
        Effect("Bellsfx18.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
        TimeScaleEffect(dummy_effect, 0.5f, 1.6f);
        Effect("Bellsfx19.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        Effect("Bellsfx20.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), .0f, .0f, 2.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Bellsfx21.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 0.6f);
        TimeScaleEffect(dummy_effect, 0.5f, 0.6f);
        Effect("Bellsfx14.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
    }

    if (count == 140)
    {
        SoundStart("BellT-3.mp3");
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 150 || count == 170 || count == 190 || count == 210)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Bellsfx1.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 5.f, 2.f, 236, 70, 40, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        for (int i = 0; i < 8; i++)
        {
            x = PolarX(GetUnitX(t), 300.f, i * 45.f);
            y = PolarY(GetUnitY(t), 300.f, i * 45.f);
            Effect("Bellsfx2-x2.mdx", x, y, .0f, i * 45.f, .0f, .0f, 5.f, 1.f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }
        Effect("Bellsfx4.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 2.f + (count - 130) * 0.03f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Bellsfx5-x2.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), -90.f, .0f, 1.5f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
    }

    if (count == 200)
    {
        Effect("Bellsfx16.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), .0f, .0f, 5.f, 3.f, 236, 70, 40, PercentTo255(60));
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        AnimEffect2(dummy_effect, "death", 1.4f);
        Effect("Bellsfx21.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), .0f, .0f, 4.f, 2.5f, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 1.f);
        TimeScaleEffect(dummy_effect, 0.5f, 1.f);
    }

    if (count == 220)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Bellsfx6.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        Effect("Bellsfx7.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75f);
        Effect("Bellsfx22.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
    }

    if (count == 230)
    {
        Effect("Bellsfx7.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 3.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
    }

    if (count == 240)
    {
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BellR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    
    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("BellR-1.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 8.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 7);
        Effect("Bellsfx15.mdx", GetUnitX(u), GetUnitY(u), .0f, GetUnitFacing(u), .0f, .0f, 1.5f, 4.f, 255, 255, 255, 255);
        Effect("Bellsfx16.mdx", GetUnitX(u), GetUnitY(u), 50.f, GetUnitFacing(u), .0f, .0f, 5.f, 4.f, 236, 70, 40, PercentTo255(80));
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), .0f, GetUnitFacing(u), .0f, .0f, 1.5f, 4.f, 255, 255, 255, PercentTo255(60));
        TimeScaleEffect(dummy_effect, 0, 0.4);
    }

    if (count <= 200)
    {
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600.f, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, (9 + GetUnitAbilityLevel(u, 'A01W')) * GetHeroStr(u, true), 200);
                CC_Unit(d, "stun", 0.1f);
            }
        }
        DestroyGroup(g1);

        if (count % 10 == 0)
        {
            Effect("Bellsfx1.mdx", GetUnitX(u), GetUnitY(u), 100.f, GetUnitFacing(u), .0f, .0f, 4.f, 2.f, 236, 70, 40, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8);
            for (int i = 0; i < 8; i++)
            {
                x = PolarX(GetUnitX(u), 200.f, i * 45.f);
                y = PolarY(GetUnitY(u), 200.f, i * 45.f);
                Effect("Bellsfx2-x2.mdx", x, y, .0f, i * 45, .0f, .0f, 5.f, 1.f, 255, 255, 255, 255);
                SetSpecialEffectAnimation(dummy_effect, "death");
                SetSpecialEffectTimeScale(dummy_effect, 0.8f);
            }
            Effect("Bellsfx4.mdx", GetUnitX(u), GetUnitY(u), 50.f, GetUnitFacing(u), .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5f);
            Effect("Bellsfx5-x2.mdx", GetUnitX(u), GetUnitY(u), 50.f, GetUnitFacing(u), -90.f, .0f, 1.f, 3.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        }
    }

    if (count == 200)
    {
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BellW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("BellW.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 4);
        Effect("Bellsfx8.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
    }

    if (count <= 15)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10.f, a);
            y = PolarY(GetUnitY(u), dist / 10.f, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120.f, a);
            y = PolarY(GetUnitY(t), -120.f, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 3 == 0)
        {
            Effect("Bellsfx9.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
        }
    }

    if (count == 15)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), 200, a);
        y = PolarY(GetUnitY(t), 200, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacing(u, a + 180);
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        SetUnitVertexColor(u, 255, 255, 255, 0);
    }

    if (count == 15 || count == 30 || count == 45 || count == 60)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BellSE1.mp3");
        }
        else
        {
            SoundStart("BellSE2.mp3");
        }
    }

    if (count >= 15 && count <= 55)
    {
        SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 15, 0);

        if (count % 10 == 0)
        {
            Effect("Bellsfx10.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, randomAngle(), GetRandomReal(-60.f, 60.f), 0, 1, 1, 236, 70, 40, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            Effect("Bellsfx10.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, randomAngle(), GetRandomReal(-60.f, 60.f), 0, 1, 1, 236, 70, 40, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            Effect("Bellsfx11.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, randomAngle(), GetRandomReal(-60.f, -20.f), 0, 3, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            Effect("Bellsfx11.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, randomAngle(), GetRandomReal(.0f, 40.f), 0, 3, 1.5, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            Effect("Bellsfx12.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 50, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
            Effect("Bellsfx13.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 100, randomAngle(), 0, 0, 4, 2, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            x = PolarX(GetUnitX(t), 200, randomAngle());
            y = PolarY(GetUnitY(t), 200, randomAngle());
            a2 = Angle(x, y, GetUnitX(t), GetUnitY(t));
            Effect("BellCranel.mdx", x, y, GetUnitFlyHeight(t), a2, 0, 0, 1, 0.4, 255, 255, 255, PercentTo255(50));
            SetSpecialEffectAnimationByIndex(dummy_effect, 4);
        }
    }

    if (count == 60)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("BellSe1.mp3");
        }
        else
        {
            SoundStart("Bellse2.mp3");
        }
        Effect("Bellsfx14.mdx", GetUnitX(t), GetUnitY(t), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -250, a);
        y = PolarY(GetUnitY(t), -250, a);
        Effect("Bellcranel.mdx", x, y, 750, a, -45, 0, 1, 0.8, 255, 255, 255, PercentTo255(50));
        SetSpecialEffectAnimationByIndex(dummy_effect, 4);
        TimeScaleEffect(dummy_effect, 0, 0.4);
        SetUnitFlyHeight(t, 0, 2700);
        RushSlide(t, a, 100, 0.2, 0.02, true);
    }

    if (count == 70)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), 200, a);
        y = PolarY(GetUnitY(t), 200, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 2);
        SetUnitVertexColor(u, 255, 255, 255, 255);
        Effect("Bellsfx3.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 2, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75);
        Effect("Bellsfx7.mdx", GetUnitX(t), GetUnitY(t), 0, randomAngle(), 0, 0, 1.5, 2, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6);

        UnitUnStuck(u);
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A01U')) * GetHeroStr(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BellQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("BellQ.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 17);
        SetUnitTimeScale(u, 2.5f);
        dummy_effect = AddSpecialEffectTarget("Abilities\\Weapons\\PhoenixMissile\\Phoenix_Missile.mdx", u, "hand right");
        AnimEffect2(dummy_effect, "death", 0.6f);
        DestroyEffectTimed(dummy_effect, 2.f);
        dummy_effect = AddSpecialEffectTarget("Abilities\\Weapons\\PhoenixMissile\\Phoenix_Missile.mdx", u, "hand left");
        AnimEffect2(dummy_effect, "death", 0.6f);
        DestroyEffectTimed(dummy_effect, 2.f);
        dummy_effect = AddSpecialEffectTarget("Abilities\\Weapons\\PhoenixMissile\\Phoenix_Missile.mdx", u, "foot right");
        AnimEffect2(dummy_effect, "death", 0.6f);
        DestroyEffectTimed(dummy_effect, 2.f);
        dummy_effect = AddSpecialEffectTarget("Abilities\\Weapons\\PhoenixMissile\\Phoenix_Missile.mdx", u, "foot left");
        AnimEffect2(dummy_effect, "death", 0.6f);
        DestroyEffectTimed(dummy_effect, 2.f);
        RushSlide(u, a, dist, 0.16, 0.02, false);
        KnockupUnit(u, 0.16, 0.02, 400);
    }

    if (count == 10)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Bellsfx1.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 4.f, 2.f, 236, 70, 40, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        for (int i = 0; i < 8; i++)
        {
            x2 = PolarX(GetUnitX(u), 200, i * 45);
            y2 = PolarY(GetUnitY(u), 200, i * 45);
            Effect("Bellsfx2-x2.mdx", x2, y2, .0f, i * 45, .0f, .0f, 5.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        }
        Effect("Bellsfx3.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 5.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Bellsfx4.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Bellsfx5-x2.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, -90.f, .0f, 1.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Bellsfx6.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75f);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 600.f, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A01T'));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MokuoD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MokuoD.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Mokuosfx3.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -600.f, a);
        y = PolarY(GetUnitY(t), -600.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 2);
        Effect("Mokuosfx16.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 5.f, 2.f, 255, PercentTo255(80.f), PercentTo255(80.f), 255);
        TimeScaleEffect(dummy_effect, .0f, 0.2f);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, PercentTo255(60.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
    }

    if (count <= 100)
    {
        x = PolarX(GetUnitX(u), 10.f, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 10.f, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 100)
    {
        SoundStart("Mokuose1.mp3");
        Effect("Mokuosfx13.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        Effect("Mokuosfx17.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        for (int i = 0; i < 8; i++)
        {
            Effect("Mokuosfx18.mdx", GetUnitX(t), GetUnitY(t), .0f + i * 160.f, randomAngle(), .0f, .0f, 1.5f, 1.5f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.9f);
        }
    }

    if (count == 110)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MokuoF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    
    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MokuoF.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        Effect("Mokuosfx3.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 2);
        SaveReal(GameHT, hid, 0, a);
        SaveReal(GameHT, hid, 1, -120.f);
    }

    if (count == 10 || count == 50 || count == 130)
    {
        SoundStart("Mokuose2.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
    }

    if (count <= 90)
    {
        SaveReal(GameHT, hid, 1, LoadReal(GameHT, hid, 1) - 8.f);
        SaveReal(GameHT, hid, 0, LoadReal(GameHT, hid, 0) + 7.f);
        x = PolarX(GetUnitX(t), LoadReal(GameHT, hid, 1), LoadReal(GameHT, hid, 0));
        y = PolarY(GetUnitY(t), LoadReal(GameHT, hid, 1), LoadReal(GameHT, hid, 0));
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a + 90.f, true);

        if (count % 3 == 0)
        {
            Effect("Mokuosfx2.mdx", GetUnitX(u), GetUnitY(u), 50.f, GetUnitFacing(u), .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }
    }

    if (count == 95)
    {
        SetUnitAnimationByIndex(u, 9);
        SetUnitFacing(u, a);
    }

    if (count >= 100 && count <= 120)
    {
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 50.f, .0f);
    }

    if (count == 120)
    {
        SoundStart("MokuoF-1.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 1.5f);
        dummy_effect = AddSpecialEffectTarget("Units\\Human\\Phoenix\\Phoenix.mdx", u, "chest");
        SetSpecialEffectAnimation(dummy_effect, "walk");
        AnimEffect2(dummy_effect, "death", 0.6f);
        DestroyEffectTimed(dummy_effect, 1.5f);
    }

    if (count >= 120 && count <= 140)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 15, a);
            y = PolarY(GetUnitY(u), dist / 15, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120.f, a);
            y = PolarY(GetUnitY(t), -120.f, a);
            SetUnitXY(u, x, y, 0);
        }
        SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 50.f, .0f);
    }

    if (count == 140)
    {
        SoundStart("Mokuose8.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        SetUnitFlyHeight(u, .0f, .0f);
        Effect("Mokuosfx4.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 1.75f, 2.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65f);
        Effect("Mokuosfx13.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65f);
        Effect("Mokuosfx15.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        RushSlide(t, a, 350.f, 0.6f, 0.02f, true);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MokuoT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MokuoT.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        UnitAddAbility(t, 'Amrf');
        UnitRemoveAbility(t, 'Amrf');
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimation(u, "attack");
        RushSlide(t, a, 600.f, 0.6f, 0.02f, true);
    }

    if (count == 5 || count == 10 || count == 15 || count == 20 || count == 25)
    {
        Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, -90.f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
    }

    if (count == 30)
    {
        SoundStart("MokuoW.mp3");
        SoundStart("Mokuose2.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Mokuosfx3.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 140, a);
        y = PolarY(GetUnitY(t), 140, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimation(u, "attack");
        RushSlide(t, a, 600.f, 0.6f, 0.02f, true);
    }

    if (count == 35 || count == 40 || count == 45 || count == 50 || count == 55)
    {
        Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, -90.f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
    }

    if (count == 60)
    {
        SoundStart("MokuoT-1.mp3");
        SoundStart("Mokuose4.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Mokuosfx3.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 140.f, a);
        y = PolarY(GetUnitY(t), 140.f, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 2);
        dummy_effect = AddSpecialEffectTarget("Units\\Human\\Phoenix\\Phoenix.mdx", u, "chest");
        SetSpecialEffectAnimation(dummy_effect, "walk");
        AnimEffect2(dummy_effect, "death", 2.f);
        DestroyEffectTimed(dummy_effect, 3.f);
        RushSlide(t, a, 1000.f, 1.8f, 0.02f, true);
    }

    if (count >= 60 && count <= 150)
    {
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        if (count > 135)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) - 100.f, .0f);
            SetUnitFlyHeight(u, GetUnitFlyHeight(t), .0f);
        }
        else if (count >= 95)
        {
            SetUnitFlyHeight(t, GetUnitFlyHeight(t) + 37.5f, .0f);
            SetUnitFlyHeight(u, GetUnitFlyHeight(t), .0f);
        }

        if (count % 2 == 0)
        {
            Effect("Mokuosfx12.mdx", GetUnitX(t), GetUnitY(t), GetUnitFlyHeight(t) + 10.f, randomAngle(), .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "stand");
            SetSpecialEffectTimeScale(dummy_effect, 1.2);
        }
    }

    if (count == 150)
    {
        SoundStart("Mokuose8.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        SetUnitFlyHeight(u, .0f, .0f);
        SetUnitFlyHeight(t, .0f, .0f);
        Effect("Mokuosfx4.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 1.75f, 2.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Mokuosfx13.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75f);
        for (int i = 0; i < 11; i++)
        {
            x = PolarX(GetUnitX(t), GetRandomReal(100.f, 500.f), randomAngle());
            y = PolarY(GetUnitY(t), GetRandomReal(100.f, 500.f), randomAngle());
            Effect("Mokuosfx14.mdx", x, y, .0f, randomAngle(), .0f, .0f, GetRandomReal(1.f, 2.f), 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.8f, 1.f));
        }

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MokuoR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MokuoR.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -800.f, a);
        y = PolarY(GetUnitY(t), -800.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 25 || count == 45 || count == 65 || count == 85)
    {
        SetUnitAnimationByIndex(u, 4);
    }

    if (count == 20 || count == 60)
    {
        SoundStart("Mokuose2.mp3");
    }

    if (count == 10 || count == 20 || count == 30 || count == 40 || count == 50 || count == 60 || count == 70)
    {
        Effect("Abilities\\Weapons\\FireBallMissile\\FireBallMissile.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 3.f, 1.5f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 100 + LoadInteger(GameHT, hid, 100), dummy_effect);
        SaveInteger(GameHT, hid, 100, LoadInteger(GameHT, hid, 100) + 1);
    }

    if (count >= 10 && count <= 90)
    {
        for (int i = 0; i < LoadInteger(GameHT, hid, 100); i++)
        {
            e = LoadEffectHandle(GameHT, hid, 100 + i);
            SaveInteger(GameHT, hid, 200 + i, LoadInteger(GameHT, hid, 200 + i) + 1);
            if (LoadInteger(GameHT, hid, 200 + i) <= 20)
            {
                x = PolarX(GetSpecialEffectX(e), dist / 20.f, a);
                y = PolarY(GetSpecialEffectY(e), dist / 20.f, a);
                SetEffectXY(e, x, y, 0);
                SetSpecialEffectHeight(e, 50.f);
                if (LoadInteger(GameHT, hid, 200 + i) == 20)
                {
                    SetSpecialEffectAnimation(e, "death");
                    SetSpecialEffectTimeScale(e, 0.8f);
                }
            }
        }
    }

    if (count == 85)
    {
        SoundStart("Mokuose1.mp3");
        Effect("Mokuosfx1.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 1.5f, 1.5f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 120, dummy_effect);
    }

    if (count >= 85 && count <= 100)
    {
        e = LoadEffectHandle(GameHT, hid, 120);
        x = PolarX(GetSpecialEffectX(e), dist / 15, a);
        y = PolarY(GetSpecialEffectY(e), dist / 15, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 100.f);

        if (count % 3 == 0)
        {
            Effect("Mokuosfx2.mdx", x, y, 50.f, randomAngle(), .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }
    }

    if (count == 100)
    {
        e = LoadEffectHandle(GameHT, hid, 120);
        SetSpecialEffectAnimation(e, "death");
        Effect("Mokuosfx4.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        Effect("Mokuosfx13.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.3f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);

        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A05E')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MokuoE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("MokuoE.mp3");
        SoundStart("MokuoSE3.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 2);
        Effect("Mokuosfx6.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
        Effect("Mokuosfx7.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
    }

    if (count <= 15)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120.f, a);
            y = PolarY(GetUnitY(t), -120.f, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 3 == 0)
        {
            Effect("Mokuosfx3.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        }
    }

    if (count == 15)
    {
        SoundStart("Mokuose5.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimation(u, "attack");
        SetUnitTimeScale(u, 1.5f);
        Effect("Mokuosfx8.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.5f, 1.5f, 255, 255, 255, 255);
        Effect("Mokuosfx9.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 5.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Mokuosfx2.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Mokuosfx10.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 3.5f, 1.f, 255, 255, 255, 255);
        RushSlide(t, a, 250.f, 0.3f, 0.02f, true);
    }

    if (count == 30)
    {
        SoundStart("Mokuose4.mp3");
        SoundStart("Mokuose5.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Mokuosfx3.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimation(u, "attack");
        Effect("Mokuosfx8.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.5f, 1.5f, 255, 255, 255, 255);
        Effect("Mokuosfx9.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 5.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Mokuosfx2.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Mokuosfx10.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 3.5f, 1.f, 255, 255, 255, 255);
        RushSlide(t, a, 250, 0.3f, 0.02f, true);
    }

    if (count == 45)
    {
        SoundStart("Mokuose4.mp3");
        SoundStart("Mokuose6.mp3");
        SoundStart("Mokuose7.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Mokuosfx3.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimation(u, "attack");
        Effect("Mokuosfx8.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.5f, 1.5f, 255, 255, 255, 255);
        Effect("Mokuosfx9.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 5.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Mokuosfx2.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Mokuosfx10.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 3.5f, 1.f, 255, 255, 255, 255);
        Effect("Mokuosfx11.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75f);
        Effect("Mokuosfx12.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, .0f, .0f, 3.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        Effect("Mokuosfx2.mdx", GetUnitX(t), GetUnitY(t), 150.f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        SetSpecialEffectTimeScale(dummy_effect, 0.75f);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A05D') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 340.f, 0.6f, 0.02f, true);
        KnockupUnit(t, 0.6f, 0.02f, 290);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MokuoW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 12)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
        SetPauseUnit(t, true);
        SetInvulUnit(t, true);
    }

    if (count == 1)
    {
        SoundStart("MokuoW.mp3");
        SoundStart("Mokuose2.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        Effect("Mokuosfx3.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(t), 130.f, a);
        y = PolarY(GetUnitY(t), 130.f, a);
        SetUnitXY(u, x, y, 0);
        a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 6);
        SetUnitTimeScale(u, 1.5f);
    }

    if (count == 12)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Mokuosfx4.mdx", GetUnitX(t), GetUnitY(t), 50.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9f);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A05C')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        IssueImmediateOrderById(t, 851972);
        RushSlide(t, a, 450.f, 0.6f, 0.02f, true);
        SaveReal(GameHT, hid, 100, a);
    }

    if (count >= 12 && count <= 42)
    {
        if (count % 5 == 0)
        {
            a = LoadReal(GameHT, hid, 100);
            Effect("Mokuosfx5.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, -90.f, .0f, 1.5f, 1.5f, 255, 255, 255, 255);
        }
    }

    if (count == 42)
    {
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MokuoQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    effect e = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("MokuoQ.mp3");
        SoundStart("Mokuose1.mp3");
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 2.f);
        Effect("Mokuosfx1.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 1.5f, 1.5f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count <= 12)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        x = PolarX(GetSpecialEffectX(e), 1600/12, a);
        y = PolarY(GetSpecialEffectY(e), 1600/12, a);
        SetEffectXY(e, x, y, 1);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x, y);

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, x, y, 300.f, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A05B'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count % 2 == 0)
        {
            Effect("Mokuosfx2.mdx", x, y, 50.f, randomAngle(), .0f, .0f, 1.5f, 1.5f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.75f);
        }
    }

    if (count == 12)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectAnimation(e, "death");
        SetSpecialEffectTimeScale(e, 0.85f);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        DestroyGroup(g1);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JellalD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("JellalSE6.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 5);
        
        Effect("jellalsfx8.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 3.6f);
        Effect("Mystosfx5.mdx", GetUnitX(t), GetUnitY(t), 350.f, a, .0f, .0f, 2.f, 2.f, 0, 0, 0, 0);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
        Effect("Mystosfx5.mdx", GetUnitX(t), GetUnitY(t), 600.f, a, .0f, .0f, 2.f, 2.f, 0, 0, 0, 0);
        SaveEffectHandle(GameHT, hid, 101, dummy_effect);
        Effect("Mystosfx5.mdx", GetUnitX(t), GetUnitY(t), 850.f, a, .0f, .0f, 2.f, 2.f, 0, 0, 0, 0);
        SaveEffectHandle(GameHT, hid, 102, dummy_effect);
        Effect("Mystosfx5.mdx", GetUnitX(t), GetUnitY(t), 1100.f, a, .0f, .0f, 2.f, 2.f, 0, 0, 0, 0);
        SaveEffectHandle(GameHT, hid, 103, dummy_effect);
        Effect("Jellalsfx18.mdx", GetUnitX(t), GetUnitY(t), 350.f, a, -90.f, .0f, 1.f, 2.5f, 0, 0, 0, 0);
        SaveEffectHandle(GameHT, hid, 104, dummy_effect);
        Effect("Jellalsfx18.mdx", GetUnitX(t), GetUnitY(t), 600.f, a, -90.f, .0f, 1.f, 2.5f, 0, 0, 0, 0);
        SaveEffectHandle(GameHT, hid, 105, dummy_effect);
        Effect("Jellalsfx18.mdx", GetUnitX(t), GetUnitY(t), 850.f, a, -90.f, .0f, 1.f, 2.5f, 0, 0, 0, 0);
        SaveEffectHandle(GameHT, hid, 106, dummy_effect);
        Effect("Jellalsfx18.mdx", GetUnitX(t), GetUnitY(t), 1100.f, a, -90.f, .0f, 1.f, 2.5f, 0, 0, 0, 0);
        SaveEffectHandle(GameHT, hid, 107, dummy_effect);
    }

    if (count <= 40)
    {
        SaveReal(GameHT, hid, 100, LoadReal(GameHT, hid, 100) + 255.f / 40.f);

        for (int i = 0; i < 8; i++)
        {
            e = LoadEffectHandle(GameHT, hid, 100 + i);
            SetSpecialEffectVertexColour(e, R2I(LoadReal(GameHT, hid, 100)), R2I(LoadReal(GameHT, hid, 100)), R2I(LoadReal(GameHT, hid, 100)), R2I(LoadReal(GameHT, hid, 100)));
        }
    }

    if (count == 30)
    {
        SoundStart("JellalD.mp3");
        SetUnitAnimationByIndex(u, 2);
    }

    if (count == 40)
    {
        for (int i = 4; i < 8; i++)
        {
            e = LoadEffectHandle(GameHT, hid, 100 + i);
            SetSpecialEffectAnimation(e, "death");
        }
    }

    if (count == 50)
    {
        SoundStart("Jellalse5.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Jellalsfx6.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 3.f, 2.f, 255, 255, 255, 255);
        Effect("Jellalsfx5.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, 0.5f, 0.2f);
        Effect("Jellalsfx14.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        Effect("Jellalsfx17.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JellalF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    effect e = nil;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 80)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
    }

    if (count == 1)
    {
        SoundStart("JellalF.mp3");
        SoundStart("JellalSE9.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        Effect("Jellalsfx25.mdx", GetUnitX(u), GetUnitY(u), 300.f, a, .0f, .0f, 3.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        Effect("Jellalsfx26.mdx", GetUnitX(u), GetUnitY(u), 400.f, a, .0f, .0f, 1.f, .0f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
        Effect("Jellalsfx27.mdx", GetUnitX(u), GetUnitY(u), 300.f, a, .0f, .0f, 1.f, .0f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 101, dummy_effect);
        Effect("Jellalsfx29.mdx", GetUnitX(u), GetUnitY(u), 350.f, a, .0f, .0f, 1.f, .0f, 255, 255, 255, PercentTo255(40.f));
        SaveEffectHandle(GameHT, hid, 102, dummy_effect);
    }

    if (count <= 50)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.04f);
        e = LoadEffectHandle(GameHT, hid, 101);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.03f);
    }

    if (count == 80)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
    }

    if (count >= 80 && count <= 120)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        x = PolarX(GetSpecialEffectX(e), 87.5, GetSpecialEffectYaw(e));
        y = PolarY(GetSpecialEffectY(e), 87.5, GetSpecialEffectYaw(e));
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
        e = LoadEffectHandle(GameHT, hid, 101);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
        e = LoadEffectHandle(GameHT, hid, 102);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
        visionArea(GetOwningPlayer(u), 1000.f, 3.f, x, y);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 300, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                count = 220;
                SaveInteger(GameHT, hid, 'coun', count);
                SaveReal(GameHT, hid, 100, GetUnitX(d));
                SaveReal(GameHT, hid, 101, GetUnitY(d));
                break;
            }
        }
        DestroyGroup(g1);
    }

    if (count == 120)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectAnimation(e, "death");
        DestroyEffectTimed(e, 1.f);
        e = LoadEffectHandle(GameHT, hid, 101);
        DestroyEffectTimed(e, .01f);
        e = LoadEffectHandle(GameHT, hid, 102);
        SetSpecialEffectAnimation(e, "death");
        DestroyEffectTimed(e, 1.f);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }

    if (count == 220)
    {
        SoundStart("JellalSE8.mp3");
        x = LoadReal(GameHT, hid, 100);
        y = LoadReal(GameHT, hid, 101);
        visionArea(GetOwningPlayer(u), 1200.f, 5.f, x, y);
        e = LoadEffectHandle(GameHT, hid, 100);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
        e = LoadEffectHandle(GameHT, hid, 101);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
        e = LoadEffectHandle(GameHT, hid, 102);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
    }

    if (count >= 220 && count <= 320)
    {
        x = LoadReal(GameHT, hid, 100);
        y = LoadReal(GameHT, hid, 101);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600.f, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 11 * GetHeroAgi(u, true), 100);
                CC_Unit(d, "stun", 0.1);
            }
        }
        DestroyGroup(g1);

        if (count % 10 == 0)
        {
            Effect("Jellalsfx30.mdx", x, y, .0f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
            Effect("Jellalsfx31.mdx", x, y, .0f, a, .0f, .0f, 4.f, 1.f, 255, 255, 255, 255);
            Effect("Jellalsfx32.mdx", x, y, 350.f, a, .0f, .0f, 5.f, 1.f, 255, 255, 255, 255);
            Effect("Jellalsfx33.mdx", x, y, .0f, a, .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
            Effect("Jellalsfx34.mdx", x, y, .0f, a, .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
        }
    }

    if (count == 320)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectAnimation(e, "death");
        DestroyEffectTimed(e, 1.f);
        e = LoadEffectHandle(GameHT, hid, 101);
        DestroyEffectTimed(e, .01f);
        e = LoadEffectHandle(GameHT, hid, 102);
        SetSpecialEffectAnimation(e, "death");
        DestroyEffectTimed(e, 1.f);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JellalT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    effect e = nil;
    group g1 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);

    if (count == 1)
    {
        SoundStart("JellalT.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x, y);
        SetUnitAnimationByIndex(u, 5);
        Effect("jellalsfx19.mdx", x, y, 1200.f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        Effect("jellalsfx20.mdx", x, y, 1250.f, a, .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
    }

    if (count >= 25 && count <= 75)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - 24.f);
    }

    if (count == 75)
    {
        SoundStart("JellalSE7.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x, y);
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectScale(e, 5.f);
        SetSpecialEffectAnimation(e, "death");
        SetSpecialEffectTimeScale(e, 0.5f);
        Effect("Jellalsfx23.mdx", x, y, .0f, a, .0f, .0f, 1.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "death");
        Effect("Jellalsfx24.mdx", x, y, 50.f, a, .0f, .0f, 5.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 650.f, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 15 * GetHeroAgi(u, true));
                IssueImmediateOrderById(d, 851972);
            }
        }
        DestroyGroup(g1);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JellalR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
    float a2 = .0f;
    float x2 = .0f;
    float y2 = .0f;
    float x3 = .0f;
    float y3 = .0f;
    effect e = nil;
    lightning lt = nil;
    group g1 = nil;
    group g2 = nil;
    group g3 = nil;
    unit d = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 20)
    {
        SetInvulUnit(u, true);
    }

    if (count == 1)
    {
        SoundStart("JellalR3.mp3");
        SoundStart("JellalSE6.mp3");

        g1 = CreateGroup();
        g2 = CreateGroup();

        x2 = PolarX(x, -730.f, a - 90.f);
        y2 = PolarY(y, -730.f, a - 90.f);
        x2 = PolarX(x2, -400.f, a);
        y2 = PolarY(y2, -400.f, a);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x2, y2);
        Effect("Jellalsfx18.mdx", x2, y2, 50.f, a, 90.f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx6.mdx", x2, y2, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx8.mdx", x2, y2, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Mystosfx5.mdx", x2, y2, 1000.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
        GroupEnumUnitsInRange(g2, x2, y2, 350, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }

        x3 = PolarX(x, -350.f, a - 90.f);
        y3 = PolarY(y, -350.f, a - 90.f);
        x3 = PolarX(x3, -250.f, a);
        y3 = PolarY(y3, -250.f, a);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x3, y3);
        Effect("Jellalsfx18.mdx", x3, y3, 50.f, a, 90.f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx6.mdx", x3, y3, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx8.mdx", x3, y3, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Mystosfx5.mdx", x3, y3, 1000.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 101, dummy_effect);
        GroupEnumUnitsInRange(g2, x3, y3, 350, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }

        lt = AddLightningEx("CLPB", true, x2, y2, 1000.f, x3, y3, 1000.f);
        SetLightningTexture(lt, "Replaceabletextures\\weather\\healbeam.blp");
        SetLightningTextureCoordinates(lt, 1.f);
        SetLightningWidth(lt, 70.f);
        SetLightningNoiseScaling(lt, 0.01f);
        SaveLightningHandle(GameHT, hid, 200, lt);

        x2 = PolarX(x, .0f, a - 90.f);
        y2 = PolarY(y, .0f, a - 90.f);
        x2 = PolarX(x2, -100.f, a);
        y2 = PolarY(y2, -100.f, a);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x2, y2);
        Effect("Jellalsfx18.mdx", x2, y2, 50.f, a, 90.f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx6.mdx", x2, y2, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx8.mdx", x2, y2, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Mystosfx5.mdx", x2, y2, 1000.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 102, dummy_effect);
        GroupEnumUnitsInRange(g2, x2, y2, 350, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }

        lt = AddLightningEx("CLPB", true, x3, y3, 1000.f, x2, y2, 1000.f);
        SetLightningTexture(lt, "Replaceabletextures\\weather\\healbeam.blp");
        SetLightningTextureCoordinates(lt, 1.f);
        SetLightningWidth(lt, 70.f);
        SetLightningNoiseScaling(lt, 0.01f);
        SaveLightningHandle(GameHT, hid, 201, lt);

        x3 = PolarX(x, 200.f, a - 90.f);
        y3 = PolarY(y, 200.f, a - 90.f);
        x3 = PolarX(x3, 200.f, a);
        y3 = PolarY(y3, 200.f, a);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x3, y3);
        Effect("Jellalsfx18.mdx", x3, y3, 50.f, a, 90.f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx6.mdx", x3, y3, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx8.mdx", x3, y3, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Mystosfx5.mdx", x3, y3, 1000.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 103, dummy_effect);
        GroupEnumUnitsInRange(g2, x3, y3, 350, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }

        lt = AddLightningEx("CLPB", true, x2, y2, 1000.f, x3, y3, 1000.f);
        SetLightningTexture(lt, "Replaceabletextures\\weather\\healbeam.blp");
        SetLightningTextureCoordinates(lt, 1.f);
        SetLightningWidth(lt, 70.f);
        SetLightningNoiseScaling(lt, 0.01f);
        SaveLightningHandle(GameHT, hid, 202, lt);

        x2 = PolarX(x, -100.f, a - 90.f);
        y2 = PolarY(y, -100.f, a - 90.f);
        x2 = PolarX(x2, 400.f, a);
        y2 = PolarY(y2, 400.f, a);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x2, y2);
        Effect("Jellalsfx18.mdx", x2, y2, 50.f, a, 90.f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx6.mdx", x2, y2, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx8.mdx", x2, y2, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Mystosfx5.mdx", x2, y2, 1000.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 104, dummy_effect);
        GroupEnumUnitsInRange(g2, x2, y2, 350, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }

        lt = AddLightningEx("CLPB", true, x3, y3, 1000.f, x2, y2, 1000.f);
        SetLightningTexture(lt, "Replaceabletextures\\weather\\healbeam.blp");
        SetLightningTextureCoordinates(lt, 1.f);
        SetLightningWidth(lt, 70.f);
        SetLightningNoiseScaling(lt, 0.01f);
        SaveLightningHandle(GameHT, hid, 203, lt);

        x3 = PolarX(x, 180.f, a - 90.f);
        y3 = PolarY(y, 180.f, a - 90.f);
        x3 = PolarX(x3, 600.f, a);
        y3 = PolarY(y3, 600.f, a);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x3, y3);
        Effect("Jellalsfx18.mdx", x3, y3, 50.f, a, 90.f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx6.mdx", x3, y3, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx8.mdx", x3, y3, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Mystosfx5.mdx", x3, y3, 1000.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 105, dummy_effect);
        GroupEnumUnitsInRange(g2, x3, y3, 350, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }

        lt = AddLightningEx("CLPB", true, x2, y2, 1000.f, x3, y3, 1000.f);
        SetLightningTexture(lt, "Replaceabletextures\\weather\\healbeam.blp");
        SetLightningTextureCoordinates(lt, 1.f);
        SetLightningWidth(lt, 70.f);
        SetLightningNoiseScaling(lt, 0.01f);
        SaveLightningHandle(GameHT, hid, 204, lt);

        x2 = PolarX(x, 600.f, a - 90.f);
        y2 = PolarY(y, 600.f, a - 90.f);
        x2 = PolarX(x2, 800.f, a);
        y2 = PolarY(y2, 800.f, a);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x2, y2);
        Effect("Jellalsfx18.mdx", x2, y2, 50.f, a, 90.f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx6.mdx", x2, y2, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Jellalsfx8.mdx", x2, y2, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Mystosfx5.mdx", x2, y2, 1000.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 106, dummy_effect);
        GroupEnumUnitsInRange(g2, x2, y2, 350, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                SetPauseUnit(d, true);
                SetInvulUnit(d, true);
                GroupAddUnit(g1, d);
            }
        }

        lt = AddLightningEx("CLPB", true, x3, y3, 1000.f, x2, y2, 1000.f);
        SetLightningTexture(lt, "Replaceabletextures\\weather\\healbeam.blp");
        SetLightningTextureCoordinates(lt, 1.f);
        SetLightningWidth(lt, 70.f);
        SetLightningNoiseScaling(lt, 0.01f);
        SaveLightningHandle(GameHT, hid, 205, lt);

        SaveGroupHandle(GameHT, hid, 'grp+', g1);
        DestroyGroup(g2);
    }

    if (count == 20)
    {
        SetInvulUnit(u, false);
    }

    if (count == 60)
    {
        SoundStart("JellalR3-1.mp3");
    }

    if (count < 75)
    {
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            SetPauseUnit(d, true);
            SetInvulUnit(d, true);
        }
    }

    if (count == 75)
    {
        SoundStart("JellalSE5.mp3");

        for (int i = 0; i < 6; i++)
        {
            DestroyLightning(LoadLightningHandle(GameHT, hid, 200 + i));
        }

        g1 = CreateGroup();
        g2 = CreateGroup();
        g3 = LoadGroupHandle(GameHT, hid, 'grp+');
        for (int i = 0; i < GroupGetCount(g3); i++)
        {
            d = GroupGetUnitByIndex(g3, i);
            SetPauseUnit(d, false);
            SetInvulUnit(d, false);
        }

        for (int i = 0; i < 7; i++)
        {
            e = LoadEffectHandle(GameHT, hid, 100 + i);
            x = GetSpecialEffectX(e);
            y = GetSpecialEffectY(e);
            Effect("Jellalsfx5.mdx", x, y, .0f, randomAngle(), .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
            Effect("Jellalsfx17.mdx", x, y, .0f, randomAngle(), .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
            GroupEnumUnitsInRange(g2, x, y, 400, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, (9 + GetUnitAbilityLevel(u, 'A00L')) * GetHeroAgi(u, true));
                    IssueImmediateOrderById(d, 851972);
                    GroupAddUnit(g1, d);
                }
            }
        }
        DestroyGroup(g1);
        DestroyGroup(g2);
        DestroyGroup(g3);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JellalE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    int iterator = LoadInteger(GameHT, hid, 'iter');
    float a = GetUnitFacing(u);
    float x = .0f;
    float y = .0f;
    effect e = nil;
    int uid = GetUnitUserData(u);
    float dist = .0f;
    float dx = .0f;
    float t = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);

    if (count == 1)
    {
        SoundStart("JellalE.mp3");
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        ORDER_POSX[uid] = GetUnitX(u);
        ORDER_POSY[uid] = GetUnitY(u);
        SaveReal(GameHT, hid, 'ordX', ORDER_POSX[uid]);
        SaveReal(GameHT, hid, 'ordY', ORDER_POSY[uid]);
        SaveReal(GameHT, hid, 'open', GetRandomReal(-40.f, 40.f));
    }

    if (count > 1)
    {
        x = LoadReal(GameHT, hid, 'ordX');
        y = LoadReal(GameHT, hid, 'ordY');
        if (x != ORDER_POSX[uid] || y != ORDER_POSY[uid])
        {
            SaveReal(GameHT, hid, 100, .0f);
            SaveReal(GameHT, hid, 'open', GetRandomReal(-40.f, 40.f));
        }
        t = LoadReal(GameHT, hid, 100) + 0.04f;
        SaveReal(GameHT, hid, 100, t);

        a = Angle(GetUnitX(u), GetUnitY(u), ORDER_POSX[uid], ORDER_POSY[uid]) + LoadReal(GameHT, hid, 'open');
        dist = Distance(GetUnitX(u), GetUnitY(u), ORDER_POSX[uid], ORDER_POSY[uid]);
        if (dist > 100 && dist < 1400 && t < 1.f)
        {
            dx = MathRealLerp(.0f, dist, t);
            x = PolarX(GetUnitX(u), dx, a);
            y = PolarY(GetUnitY(u), dx, a);
            SetUnitXY(u, x, y, 1);
            SetUnitFacing(u, a);
            Effect("Jellalsfx12.mdx", GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u) + 50.f, a, .0f, .0f, 3.f, 1.f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
        }

        iterator++;
        SaveInteger(GameHT, hid, 'iter', iterator);
        if (iterator <= 50)
        {
            if (iterator < 25)
            {
                SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 10.f, .0f);
            }
            else
            {
                SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 10.f, .0f);
            }

            if (iterator % 25 == 0)
            {
                if (GetRandomInt(1, 2) == 1)
                {
                    SoundStart("JellalSE2.mp3");
                }
                else if (GetRandomInt(1, 2) == 1)
                {
                    SoundStart("JellalSE3.mp3");
                }
                else
                {
                    SoundStart("JellalSE4.mp3");
                }
            }

            if (iterator % 50 == 0)
            {
                SaveInteger(GameHT, hid, 'iter', 0);
            }
        }

        if (GetUnitAbilityLevel(u, 'B004') == 0)
        {
            SetUnitFlyHeight(u, 0, 0);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    }
}

void JellalW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 25)
    {
        SetPauseUnit(u, true);
        SetInvulUnit(u, true);
    }
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("JellalW-2.mp3");
        SetUnitAnimationByIndex(u, 2);
        SetUnitTimeScale(u, 1.5f);
    }

    if (count == 10)
    {
        Effect("Jellalsfx10-x2.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 1.f, 2.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 2.f);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
    }

    if (count >= 10 && count <= 25)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        x = PolarX(GetSpecialEffectX(e), dist / 15, a);
        y = PolarY(GetSpecialEffectY(e), dist / 15, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 100.f);
    }

    if (count == 25)
    {
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetInvulUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        RushSlide(t, a, 700.f, 1.f, 0.02f, true);
    }

    if (count >= 25 && count <= 75)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetEffectXY(e, GetUnitX(t), GetUnitY(t), 0);
        SetSpecialEffectHeight(e, 100.f);
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        if (count % 5 == 0)
        {
            Effect("Mystosfx7.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
        }
    }

    if (count == 75)
    {
        SoundStart("JellalSE1.mp3");
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectAnimation(e, "death");
        SetSpecialEffectTimeScale(e, 0.85f);
        Effect("Jellalsfx2.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);

        SetPauseUnit(t, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A00J')) * GetHeroAgi(u, true));
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void JellalQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'oriX');
    float y = LoadReal(GameHT, hid, 'oriY');
    float a = GetUnitFacing(u);
    unit d = nil;
    float x2 = .0f;
    float y2 = .0f;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("JellalQ.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, x, y);
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 2.5f);
    }

    if (count == 5)
    {
        for (int i = 0; i < 6; i++)
        {
            x2 = PolarX(x, 450.f, i * 60.f);
            y2 = PolarY(y, 450.f, i * 60.f);
            a = Angle(x2, y2, x, y);
            Effect("Jellalsfx1.mdx", x2, y2, .0f, a, -40.f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        }
        Effect("Jellalsfx3.mdx", x, y, .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9f);
        Effect("Jellalsfx2.mdx", x, y, .0f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);

        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 600.f, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(u, d))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A00I'));
            }
        }
        DestroyGroup(g1);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YugiD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YugiD.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 3);
        x = PolarX(GetUnitX(u), -250.f, a);
        y = PolarY(GetUnitY(u), -250.f, a);
        Effect("Yugisfx20.mdx", x, y, 100.f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 1);
        AnimEffect(dummy_effect, 2, 0.4f);
        TimeScaleEffect(dummy_effect, 1.5f, 0.4f);
        Effect("Yugisfx21.mdx", x, y, .0f, a, .0f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.f, 1.5f, 255, 255, 255, PercentTo255(80.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
    }

    if (count == 30)
    {
        SoundStart("Yugise3.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Yugisfx6.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        for (int i = 0; i < 9; i++)
        {
            x = PolarX(GetUnitX(t), 300.f, i * 40.f);
            y = PolarY(GetUnitY(t), 300.f, i * 40.f);
            Effect("Yugisfx22.mdx", x, y, .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.75f);
        }

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YugiF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YugiF.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 5.f, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 5);
        x = PolarX(GetUnitX(u), -200.f, a);
        y = PolarY(GetUnitY(u), -200.f, a);
        Effect("Yugisfx14.mdx", x, y, 100.f, a, .0f, .0f, 2.f, 4.5f, 255, 255, 255, 255);
        AnimEffect(dummy_effect, 2, 2.8f);
        TimeScaleEffect(dummy_effect, 1.5f, 2.8f);
        Effect("Yugisfx15.mdx", x, y, .0f, a, .0f, .0f, 4.f, 4.5f, 255, 0, 0, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 3.4f);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 5.f, 255, 255, 255, PercentTo255(80.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
    }

    if (count <= 200)
    {
        if (count % 10 == 0)
        {
            for (int i = 0; i < 3; i++)
            {
                x = PolarX(GetUnitX(u), -200.f, a);
                y = PolarY(GetUnitY(u), -200.f, a);
                Effect("Yugisfx16.mdx", x, y, 250.f, randomAngle(), -230.f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75f, 1.f));
                x = PolarX(x, GetRandomReal(150.f, 600.f), randomAngle());
                y = PolarY(y, GetRandomReal(150.f, 600.f), randomAngle());
                Effect("Yugisfx11.mdx", x, y, .0f, randomAngle(), .0f, .0f, 1.5f, 1.5f, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.6f, 1.f));
            }
        }
    }

    if (count == 200)
    {
        SoundStart("YugiF-1.mp3");
        SoundStart("Yugise3.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Yugisfx18.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.65f);
        Effect("Yugisfx18.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.75f);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YugiT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("yugit.mp3");
        visionArea(GetOwningPlayer(u), 1500.f, 10.f, GetUnitX(t), GetUnitY(t));
        SetUnitAnimationByIndex(u, 5);
        x = PolarX(GetUnitX(u), -550, a);
        y = PolarY(GetUnitY(u), -550, a);
        Effect("Yugisfx14.mdx", x, y, 100.f, a, .0f, .0f, 2.f, 9.f, 255, 0, 255, 0);
        AnimEffect(dummy_effect, 2, 6);
        TimeScaleEffect(dummy_effect, 1.5f, 6);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
        Effect("Yugisfx15.mdx", x, y, .0f, a, .0f, .0f, 4.f, 9.5f, 255, 0, 0, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "death", 8.4f);
        Effect("black.mdx", x, y, .0f, a, .0f, .0f, 2.f, 9.f, 255, 255, 255, PercentTo255(80.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
    }

    if (count == 100)
    {
        SoundStart("YugiT-1.mp3");
    }

    if (count == 150)
    {
        SoundStart("YugiT-2.mp3");
    }

    if (count <= 200)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectAlpha(e, PercentTo255(0.5f * count));
    }

    if (count >= 100 && count <= 200)
    {
        if (count % 10 == 0)
        {
            for (int i = 0; i < 3; i++)
            {
                x = PolarX(GetUnitX(u), -550.f, a);
                y = PolarY(GetUnitY(u), -550.f, a);
                Effect("Yugisfx16.mdx", x, y, 250.f, randomAngle(), -230.f, .0f, 2.f, 1.5f, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.75f, 1.f));
                x = PolarX(x, GetRandomReal(150.f, 600.f), randomAngle());
                y = PolarY(y, GetRandomReal(150.f, 600.f), randomAngle());
                Effect("Yugisfx11.mdx", x, y, .0f, randomAngle(), .0f, .0f, 1.5f, 1.5f, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            }
        }
    }

    if (count >= 350 && count <= 450)
    {
        if (count % 10 == 0)
        {
            for (int i = 0; i < 10; i++)
            {
                x = PolarX(GetUnitX(u), -550.f, a);
                y = PolarY(GetUnitY(u), -550.f, a);
                x = PolarX(x, 200.f * i, a);
                y = PolarY(y, 200.f * i, a);
                Effect("Yugisfx17.mdx", x, y, 350.f, a, -90.f, .0f, 2.5f, 1.5f, 255, 255, 255, PercentTo255(10.f));
            }
        }
    }

    if (count == 400)
    {
        SoundStart("Yugit-3.mp3");
    }

    if (count == 450)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YugiR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float life = GetUnitMaxLife(t) * (LoadReal(GameHT, hid, 'mahp') / GetUnitMaxLife(t) + 0.1);

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);
    if (GetUnitCurrentLife(t) > life)
    {
        SetUnitCurrentLife(t, life);
    }

    if (count == 1)
    {
        SoundStart("YugiR.mp3");
        visionArea(GetOwningPlayer(u), 1500.f, 10.f, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -450.f, a);
        y = PolarY(GetUnitY(t), -450.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 5);
        Effect("Yugisfx9.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 10.f, 255, 0, 255, 255);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 10.f, 255, 255, 255, PercentTo255(80.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
    }

    if (count == 150)
    {
        SoundStart("YugiR-1.mp3");
        x = PolarX(GetUnitX(u), 150.f, a);
        y = PolarY(GetUnitY(u), 150.f, a);
        Effect("Yugisfx10.mdx", x, y, .0f, a, .0f, .0f, 5.f, 8.f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect(dummy_effect, 2, 1);
        AnimEffect(dummy_effect, 4, 6);
        TimeScaleEffect(dummy_effect, 0.95f, 6);
        AnimEffect2(dummy_effect, "death", 7);
    }

    if (count >= 150 && count <= 450)
    {
        if (count % 10 == 0)
        {
            for (int i = 0; i < 4; i++)
            {
                x = PolarX(GetUnitX(u), GetRandomReal(150.f, 600.f), randomAngle());
                y = PolarY(GetUnitY(u), GetRandomReal(150.f, 600.f), randomAngle());
                Effect("Yugisfx11.mdx", x, y, .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 0, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            }
        }
    }

    if (count == 490)
    {
        SoundStart("Yugise3.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Yugisfx12.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 2.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        for (int i = 0; i < 8; i++)
        {
            x = PolarX(GetUnitX(t), 300.f, i * 45.f);
            y = PolarY(GetUnitY(t), 300.f, i * 45.f);
            Effect("Yugisfx13.mdx", x, y, .0f, i * 45.f, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }

        UnitUnStuck(u);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A04H')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YugiE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    float a2 = .0f;
    effect e = nil;
    int int1 = 0;
    float float1 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YugiE.mp3");
        SoundStart("Yugise2.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -300.f, a);
        y = PolarY(GetUnitY(t), -300.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitAnimationByIndex(u, 2);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.f, 2.5f, 255, 255, 255, PercentTo255(40.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
    }

    if (count == 20)
    {
        x = PolarX(GetUnitX(u), 100.f, a);
        y = PolarY(GetUnitY(u), 100.f, a);
        Effect("Yugisfx5.mdx", x, y, .0f, a, .0f, .0f, 1.5f, 2.5f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        AnimEffect2(dummy_effect, "attack", 2.f);
    }

    if (count == 30 || count == 40 || count == 50 || count == 60 || count == 70 || count == 80)
    {
        if (GetRandomInt(1, 2) == 1)
        {
            SoundStart("Yugie-1.mp3");
        }
        else
        {
            SoundStart("Yugie-2.mp3");
        }
        x = PolarX(GetUnitX(u), 100.f, a);
        y = PolarY(GetUnitY(u), 100.f, a);
        a2 = randomAngle();
        x = PolarX(x, GetRandomReal(100.f, 250.f), a2);
        y = PolarY(y, GetRandomReal(100.f, 250.f), a2);
        Effect("Yugisfx5.mdx", x, y, .0f, a, .0f, .0f, 1.5f, 2.5f - (count - 30) * 0.02f, 255, 255, 255, 0);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        AnimEffect2(dummy_effect, "attack", 1.8f - (count - 30) * 0.02f);
        SaveReal(GameHT, hid, 100 + LoadInteger(GameHT, hid, 100), .0f);
        SaveEffectHandle(GameHT, hid, 100 + LoadInteger(GameHT, hid, 100), dummy_effect);
        SaveInteger(GameHT, hid, 100, LoadInteger(GameHT, hid, 100) + 1);
    }

    if (count >= 30 && count <= 100)
    {
        int1 = LoadInteger(GameHT, hid, 100);
        for (int i = 0; i < int1; i++)
        {
            e = LoadEffectHandle(GameHT, hid, 100 + i);
            float1 = LoadReal(GameHT, hid, 100 + i);
            if (float1 < 100)
            {
                SetSpecialEffectAlpha(e, PercentTo255(float1));
                SaveReal(GameHT, hid, 100 + i, float1 + 5);
            }
        }
    }

    if (count <= 110)
    {
        if (count % 5 == 0)
        {
            Effect("Yugisfx4.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, GetRandomReal(0.8f, 1.2f), 2.f, 0, 255, 128, PercentTo255(GetRandomReal(60.f, 80.f)));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 0.8f));
            Effect("Yugisfx8.mdx", GetUnitX(u), GetUnitY(u), 50.f, randomAngle(), .0f, .0f, GetRandomReal(1.f, 2.f), 2.f, 0, 255, 128, PercentTo255(GetRandomReal(60.f, 80.f)));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 0.8f));
        }
    }

    if (count == 125)
    {
        SoundStart("Yugise3.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Yugisfx6.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        for (int i = 0; i < 6; i++)
        {
            x = PolarX(GetUnitX(t), 150.f, i * 60.f);
            y = PolarY(GetUnitY(t), 150.f, i * 60.f);
            Effect("Yugisfx7.mdx", x, y, .0f, i * 60.f, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        }

        UnitUnStuck(u);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A04G') * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YugiW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("YugiW.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 3);
        Effect("Yugisfx2.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        AnimEffect2(dummy_effect, "death", 1.f);
        Effect("Black.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.f, 1.5f, 255, 255, 255, PercentTo255(80.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
    }

    if (count == 15)
    {
        Effect("Yugisfx3.mdx", GetUnitX(t), GetUnitY(t), 2000.f, a, .0f, .0f, 4.f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);

        x = PolarX(GetUnitX(t), 150.f, a + 40.f);
        y = PolarY(GetUnitY(t), 150.f, a + 40.f);
        Effect("Yugisfx3.mdx", x, y, 2000.f, a, .0f, .0f, 4.f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 101, dummy_effect);

        x = PolarX(GetUnitX(t), 150.f, a + 130.f);
        y = PolarY(GetUnitY(t), 150.f, a + 130.f);
        Effect("Yugisfx3.mdx", x, y, 2000.f, a, .0f, .0f, 4.f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 102, dummy_effect);

        x = PolarX(GetUnitX(t), 150.f, a + 220.f);
        y = PolarY(GetUnitY(t), 150.f, a + 220.f);
        Effect("Yugisfx3.mdx", x, y, 2000.f, a, .0f, .0f, 4.f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 103, dummy_effect);

        x = PolarX(GetUnitX(t), 150.f, a + 310.f);
        y = PolarY(GetUnitY(t), 150.f, a + 310.f);
        Effect("Yugisfx3.mdx", x, y, 2000.f, a, .0f, .0f, 4.f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 104, dummy_effect);
    }

    if (count >= 15 && count <= 40)
    {
        for (int i = 0; i < 5; i++)
        {
            e = LoadEffectHandle(GameHT, hid, 100 + i);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e) - 76.f);
        }
    }

    if (count == 40)
    {
        SoundStart("yugise1.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));

        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A04F')) * GetHeroInt(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void YugiQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("YugiQ.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 3);
        Effect("Yugisfx1.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.3f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        x = PolarX(GetUnitX(u), 250.f, a);
        y = PolarY(GetUnitY(u), 250.f, a);
        Effect("Yugisfx1.mdx", x, y, 0, a, 0, 0, 1.35f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
    }

    if (count == 5)
    {
        g1 = CreateGroup();
        g2 = CreateGroup();
        for (int i = 0; i < 11; i++)
        {
            x = PolarX(GetUnitX(u), 160 * i, a);
            y = PolarY(GetUnitY(u), 160 * i, a);
            visionArea(GetOwningPlayer(u), 1200.f, 3.f, x, y);
            GroupEnumUnitsInRange(g2, x, y, 300.f, nil);
            for (int j = 0; j < GroupGetCount(g2); j++)
            {
                d = GroupGetUnitByIndex(g2, j);
                if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
                {
                    UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A04E'));
                    GroupAddUnit(g1, d);
                }
            }
        }
        DestroyGroup(g1);
        DestroyGroup(g2);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AlphaD()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float a2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("Alphase15.mp3");
        visionArea(GetOwningPlayer(u), 1500.f, 5.f, GetUnitX(t), GetUnitY(t));
        x = PolarX(GetUnitX(t), -400.f, a);
        y = PolarY(GetUnitY(t), -400.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 19);
        SetUnitTimeScale(u, 1.25f);
        Effect("Alphasfx20.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, .0f, 4.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, .0f, 4.f, 255, 255, 255, PercentTo255(60.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
        SaveEffectHandle(GameHT, hid, 101, dummy_effect);
        SaveReal(GameHT, hid, 100, a);
    }

    if (count == 120)
    {
        SetUnitAnimationByIndex(u, 20);
        SetUnitTimeScale(u, 2.f);
    }

    if (count == 130)
    {
        SoundStart("AlphaD2.mp3");
    }

    if (count <= 150)
    {
        if (count <= 100)
        {
            e = LoadEffectHandle(GameHT, hid, 100);
            SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.01f);
            e = LoadEffectHandle(GameHT, hid, 101);
            SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.015f);
        }

        if (count % 5 == 0)
        {
            Effect("Alphasfx21.mdx", GetUnitX(u), GetUnitY(u), 150.f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, PercentTo255(GetRandomReal(60.f, 80.f)));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            a2 = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(50.f, 150.f), a2);
            y = PolarY(GetUnitY(u), GetRandomReal(50.f, 150.f), a2);
            Effect("Alphasfx17.mdx", x, y, 150.f, randomAngle(), .0f, .0f, 4.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            a2 = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(200.f, 400.f), a2);
            y = PolarY(GetUnitY(u), GetRandomReal(200.f, 400.f), a2);
            Effect("Alphasfx22.mdx", x, y, .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
        }
    }
    
    if (count == 160)
    {
        SoundStart("Alphase14.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(u), 250.f, a);
        y = PolarY(GetUnitY(u), 250.f, a);
        x = PolarX(x, 250.f, a - 90.f);
        y = PolarY(y, 250.f, a - 90.f);
        Effect("Alphasfx36.mdx", x, y, .0f, a, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        TimeScaleEffect(dummy_effect, .0f, 0.6f);
    }

    if (count >= 160 && count <= 170)
    {
        a2 = LoadReal(GameHT, hid, 100) - 18.f;
        x = PolarX(GetUnitX(t), -400.f, a2);
        y = PolarY(GetUnitY(t), -400.f, a2);
        SetUnitXY(u, x, y, 0);
        SaveReal(GameHT, hid, 100, a2);
    }

    if (count == 180 || count == 210)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Alphasfx27.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Alphasfx31.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Alphasfx25.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Alphasfx17.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 6.f, 2.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.25f);
        Effect("Alphasfx32.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 2.5f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
    }

    if (count == 220)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 8 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AlphaF()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float a2 = .0f;
    float x2 = .0f;
    float y2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AlphaF.mp3");
        SoundStart("Alphase10.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -600.f, a);
        y = PolarY(GetUnitY(t), -600.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 2.f);
        x = PolarX(GetUnitX(u), -100.f, a);
        y = PolarY(GetUnitY(u), -100.f, a);
        Effect("Alphasfx2.mdx", x, y, 100.f, a, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SaveReal(GameHT, hid, 100, GetUnitX(u));
        SaveReal(GameHT, hid, 101, GetUnitY(u));
        SaveReal(GameHT, hid, 102, a);
        SaveReal(GameHT, hid, 103, 40.f);
    }

    if (count <= 15)
    {
        x = PolarX(GetUnitX(u), 70.f, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 70.f, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 15)
    {
        SoundStart("Alphase11.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
    }

    if (count >= 15 && count <= 55)
    {
        if (count % 5 == 0)
        {
            x = LoadReal(GameHT, hid, 100);
            y = LoadReal(GameHT, hid, 101);
            a2 = LoadReal(GameHT, hid, 102);
            x2 = PolarX(x, 23.f * (count - 15), a2);
            y2 = PolarY(y, 23.f * (count - 15), a2);
            Effect("Alphasfx27.mdx", x2, y2, .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.6f);
            a2 = a2 + LoadReal(GameHT, hid, 103);
            x2 = PolarX(x2, 300.f, a2);
            y2 = PolarY(y2, 300.f, a2);
            if (GetRandomInt(1, 2) == 1)
            {
                Effect("Alphasfx28.mdx", x2, y2, .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, 0.6f);
            }
            else
            {
                Effect("Alphasfx29.mdx", x2, y2, .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
                SetSpecialEffectTimeScale(dummy_effect, 0.6f);
            }
            SaveReal(GameHT, hid, 103, -LoadReal(GameHT, hid, 103));
        }
    }

    if (count == 55)
    {
        SoundStart("AlphaSE12.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 9);
        SetUnitTimeScale(u, 0.8f);
        SetUnitFacing(u, a);
    }

    if (count == 95)
    {
        Effect("Alphasfx30.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        SetUnitAnimationByIndex(u, 25);
        SetUnitTimeScale(u, 1.3f);
        SetUnitXY(u, GetUnitX(t), GetUnitY(t), 0);
        SetUnitFlyHeight(u, 700.f, .0f);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, .0f, 2.f, 255, 255, 255, PercentTo255(60.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
    }

    if (count >= 95 && count <= 125)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.07f);
        if (count >= 115)
        {
            SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 70.f, .0f);
        }
    }

    if (count == 125 || count == 150)
    {
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        Effect("Alphasfx27.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Alphasfx25.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        Effect("Alphasfx17.mdx", GetUnitX(t), GetUnitY(t), 200.f, randomAngle(), .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.4f);
        Effect("Alphasfx32.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
    }

    if (count == 160)
    {
        SetUnitTimeScale(u, 1);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 11 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AlphaT()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;
    float a2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AlphaT.mp3");
        x = PolarX(GetUnitX(t), -600.f, a);
        y = PolarY(GetUnitY(t), -600.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 16);
        SetUnitTimeScale(u, 0.75f);
        Effect("Alphasfx20.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, .0f, 4.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
        Effect("Black.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, .0f, 4.f, 255, 255, 255, PercentTo255(60.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
        SaveEffectHandle(GameHT, hid, 101, dummy_effect);
    }

    if (count == 10 || count == 40 || count == 70 || count == 100 || count == 130)
    {
        SoundStart("AlphaSE2.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
    }

    if (count <= 150)
    {
        if (count <= 100)
        {
            e = LoadEffectHandle(GameHT, hid, 100);
            SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.012f);
            e = LoadEffectHandle(GameHT, hid, 101);
            SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.018f);
        }

        if (count % 5 == 0)
        {
            Effect("Alphasfx21.mdx", GetUnitX(u), GetUnitY(u), 150.f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, PercentTo255(GetRandomReal(60.f, 80.f)));
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            a2 = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(50.f, 100.f), a2);
            y = PolarY(GetUnitY(u), GetRandomReal(50.f, 100.f), a2);
            Effect("Alphasfx17.mdx", x, y, 150, a2, .0f, .0f, 4.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            a2 = randomAngle();
            x = PolarX(GetUnitX(u), GetRandomReal(200.f, 400.f), a2);
            y = PolarY(GetUnitY(u), GetRandomReal(200.f, 400.f), a2);
            Effect("Alphasfx22.mdx", x, y, 0, a2, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
        }
    }

    if (count == 160)
    {
        SoundStart("AlphaSE8.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 1.25f);
        x = PolarX(GetUnitX(u), -100.f, a);
        y = PolarY(GetUnitY(u), -100.f, a);
        Effect("Alphasfx2.mdx", x, y, 100.f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
    }

    if (count >= 160 && count <= 175)
    {
        x = PolarX(GetUnitX(u), 70.f, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 70.f, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 170)
    {
        SoundStart("AlphaSE9.mp3");
        Effect("Alphasfx23.mdx", GetUnitX(t), GetUnitY(t), 100.f, GetUnitFacing(u) + 40.f, .0f, .0f, 3.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetSpecialEffectTimeScale(dummy_effect, 0.4f);
        Effect("Alphasfx24.mdx", GetUnitX(u), GetUnitY(u), 50.f, GetUnitFacing(u) + 40.f, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.4f);
        TimeScaleEffect(dummy_effect, .0f, 0.6f);
    }

    if (count == 180)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Alphasfx17.mdx", GetUnitX(t), GetUnitY(t), 200.f, randomAngle(), .0f, .0f, 7.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Alphasfx25.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);
        Effect("Alphasfx26.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, .0f, .0f, 1.5f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);

        UnitUnStuck(u);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, 15 * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AlphaR()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AlphaE.mp3");
        x = PolarX(GetUnitX(t), -500.f, a);
        y = PolarY(GetUnitY(t), -500.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 14);
    }

    if (count == 10 || count == 22 || count == 34 || count == 46 || count == 58)
    {
        SoundStart("Alphase8.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(u), GetUnitY(u));
        RushSlide(t, a, 30, 0.2, 0.02, true);
        Effect("Alphasfx8.mdx", GetUnitX(u), GetUnitY(u), 100.f, randomAngle(), GetRandomReal(30, 50), 0, 0.8, 1, 255, 255, 255, 255);
    }

    if (count == 10)
    {
        Effect("Alphasfx18.mdx", GetUnitX(u), GetUnitY(u), 200.f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
    }

    if (count >= 10 && count <= 30)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        x = PolarX(GetSpecialEffectX(e), 70.f, a);
        y = PolarY(GetSpecialEffectY(e), 70.f, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 200.f);
    }

    if (count == 22)
    {
        Effect("Alphasfx11.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 2.f, 1.f, 216, 66, 66, 255);
        if (GetRandomInt(1, 2) == 1)
        {
            SetSpecialEffectAnimationByIndex(dummy_effect, 1);
        }
        else
        {
            SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        }
        Effect("Alphasfx19.mdx", GetUnitX(u), GetUnitY(u), 200.f, a, .0f, 90.f, 1.5f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 101, dummy_effect);
    }

    if (count >= 22 && count <= 42)
    {
        e = LoadEffectHandle(GameHT, hid, 101);
        x = PolarX(GetSpecialEffectX(e), 70.f, a);
        y = PolarY(GetSpecialEffectY(e), 70.f, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 200.f);
    }

    if (count == 34)
    {
        Effect("Alphasfx11.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 2, 1, 51, 46, 255, 255);
        if (GetRandomInt(1, 2) == 1)
        {
            SetSpecialEffectAnimationByIndex(dummy_effect, 1);
        }
        else
        {
            SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        }
        Effect("Alphasfx18.mdx", GetUnitX(u), GetUnitY(u), 200.f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 102, dummy_effect);
        Effect("Alphasfx18.mdx", GetUnitX(u), GetUnitY(u), 200.f, a, .0f, 90.f, 1.5f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 103, dummy_effect);
    }

    if (count >= 34 && count <= 54)
    {
        e = LoadEffectHandle(GameHT, hid, 102);
        x = PolarX(GetSpecialEffectX(e), 70.f, a);
        y = PolarY(GetSpecialEffectY(e), 70.f, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 200.f);
        e = LoadEffectHandle(GameHT, hid, 103);
        x = PolarX(GetSpecialEffectX(e), 70.f, a);
        y = PolarY(GetSpecialEffectY(e), 70.f, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 200.f);
    }

    if (count == 46)
    {
        Effect("Alphasfx11.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 2.f, 1.f, 216, 66, 66, 255);
        if (GetRandomInt(1, 2) == 1)
        {
            SetSpecialEffectAnimationByIndex(dummy_effect, 1);
        }
        else
        {
            SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        }
        Effect("Alphasfx19.mdx", GetUnitX(u), GetUnitY(u), 200.f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 104, dummy_effect);
        Effect("Alphasfx19.mdx", GetUnitX(u), GetUnitY(u), 200.f, a, .0f, 90.f, 1.5f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 105, dummy_effect);
    }

    if (count >= 46 && count <= 66)
    {
        e = LoadEffectHandle(GameHT, hid, 104);
        x = PolarX(GetSpecialEffectX(e), 70.f, a);
        y = PolarY(GetSpecialEffectY(e), 70.f, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 200.f);
        e = LoadEffectHandle(GameHT, hid, 105);
        x = PolarX(GetSpecialEffectX(e), 70.f, a);
        y = PolarY(GetSpecialEffectY(e), 70.f, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 200.f);
    }

    if (count == 58)
    {
        Effect("Alphasfx11.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 2.f, 1.f, 51, 46, 255, 255);
        if (GetRandomInt(1, 2) == 1)
        {
            SetSpecialEffectAnimationByIndex(dummy_effect, 1);
        }
        else
        {
            SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        }
        Effect("Alphasfx19.mdx", GetUnitX(u), GetUnitY(u), 200.f, a, .0f, 90.f, 1.5f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 106, dummy_effect);
        Effect("Alphasfx19.mdx", GetUnitX(u), GetUnitY(u), 200.f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
        SaveEffectHandle(GameHT, hid, 107, dummy_effect);
    }

    if (count >= 58 && count <= 78)
    {
        e = LoadEffectHandle(GameHT, hid, 106);
        x = PolarX(GetSpecialEffectX(e), 70.f, a);
        y = PolarY(GetSpecialEffectY(e), 70.f, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 200.f);
        e = LoadEffectHandle(GameHT, hid, 107);
        x = PolarX(GetSpecialEffectX(e), 70.f, a);
        y = PolarY(GetSpecialEffectY(e), 70.f, a);
        SetEffectXY(e, x, y, 0);
        SetSpecialEffectHeight(e, 200.f);
    }

    if (count == 68)
    {
        Effect("Alphasfx11.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 2.f, 1.f, 216, 66, 66, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        Effect("Alphasfx11.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 2.f, 1.f, 51, 46, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 1);
    }

    if (count == 75)
    {
        SoundStart("alphase8.mp3");
        SetUnitFacingEx(u, a, true);
        x = PolarX(GetUnitX(u), -100.f, a);
        y = PolarY(GetUnitY(u), -100.f, a);
        Effect("Alphasfx2.mdx", x, y, 100.f, a, .0f, .0f, 1.2f, 1.f, 255, 255, 255, 255);
        CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.28, 0.56, 0.02, GetUnitAnimationOffsetPercent(u));
    }

    if (count >= 75 && count <= 90)
    {
        x = PolarX(GetUnitX(u), 70.f, GetUnitFacing(u));
        y = PolarY(GetUnitY(u), 70.f, GetUnitFacing(u));
        SetUnitXY(u, x, y, 0);
    }

    if (count == 85)
    {
        SoundStart("Alphase7.mp3");
        visionArea(GetOwningPlayer(u), 1200, 3, GetUnitX(t), GetUnitY(t));
        Effect("Alphasfx15.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
        Effect("Alphasfx16.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        Effect("Alphasfx17.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);
    }

    if (count == 90)
    {
        UnitUnStuck(u);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (9 + GetUnitAbilityLevel(u, 'A004')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AlphaE()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("AlphaD.mp3");
        SoundStart("Alphase13.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -600.f, a);
        y = PolarY(GetUnitY(t), -600.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacingEx(u, a, true);
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 2);
        x = PolarX(GetUnitX(t), -400.f, a);
        y = PolarY(GetUnitY(t), -400.f, a);
        Effect("Alphasfx35.mdx", x, y, 200.f, a, .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.6f);
        TimeScaleEffect(dummy_effect, .0f, 0.6f);
        Effect("Alphasfx30.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
    }

    if (count == 5)
    {
        UnitHilang(u, true);
    }
    
    if (count == 20)
    {
        SoundStart("Alphase14.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), 400.f, a);
        y = PolarY(GetUnitY(t), 400.f, a);
        SetUnitXY(u, x, y, 0);
        SetUnitFacing(u, a + 180);
        SetUnitAnimationByIndex(u, 4);
        SetUnitTimeScale(u, 2);
        UnitHilang(u, false);
        Effect("Alphasfx23.mdx", GetUnitX(t), GetUnitY(t), 100.f, a + 90.f, .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectAnimationByIndex(dummy_effect, 0);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Alphasfx24.mdx", GetUnitX(t), GetUnitY(t), 50.f, a + 90.f, .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
    }

    if (count == 40)
    {
        SoundStart("Alphase7.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        Effect("Alphasfx17.mdx", GetUnitX(t), GetUnitY(t), 200.f, randomAngle(), .0f, .0f, 5.f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Alphasfx25.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.8f);

        UnitUnStuck(u);
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, GetUnitAbilityLevel(u, 'A003') * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AlphaW()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = Angle(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
    float x = .0f;
    float y = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);
    SetInvulUnit(u, true);
    SetPauseUnit(t, true);
    SetInvulUnit(t, true);

    if (count == 1)
    {
        SoundStart("alphase3.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        SetUnitAnimationByIndex(u, 5);
        Effect("Alphasfx1.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
    }

    if (count == 5)
    {
        SoundStart("alphaw.mp3");
    }

    if (count <= 15)
    {
        if (dist > 140)
        {
            x = PolarX(GetUnitX(u), dist / 10, a);
            y = PolarY(GetUnitY(u), dist / 10, a);
            SetUnitXY(u, x, y, 0);
        }
        else
        {
            x = PolarX(GetUnitX(t), -120, a);
            y = PolarY(GetUnitY(t), -120, a);
            SetUnitXY(u, x, y, 0);
        }

        if (count % 3 == 0)
        {
            Effect("Alphasfx5.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
            Effect("Alphasfx9.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        }
    }

    if (count == 15 || count == 35)
    {
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));
        x = PolarX(GetUnitX(t), -120.f, a);
        y = PolarY(GetUnitY(t), -120.f, a);
        SetUnitXY(u, x, y, 0);
        if (GetRandomInt(1, 2) == 1)
        {
            SetUnitAnimationByIndex(u, 6);
        }
        else
        {
            SetUnitAnimationByIndex(u, 5);
        }
        SetUnitTimeScale(u, 1.25f);
        CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.12, 0.36, 0.02, GetUnitAnimationOffsetPercent(u));
        Effect("Alphasfx10.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 7.f, 1.f, 216, 66, 66, 255);
        Effect("Alphasfx11.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 2.f, 1.f, 216, 66, 66, 255);
        if (GetRandomInt(1, 2) == 1)
        {
            SetSpecialEffectAnimationByIndex(dummy_effect, 1);
        }
        else
        {
            SetSpecialEffectAnimationByIndex(dummy_effect, 3);
        }
        Effect("Alphasfx12.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, .0f, .0f, 3.f, 1.f, 255, 255, 255, 255);
    }

    if (count == 15)
    {
        SoundStart("AlphaSE4.mp3");
    }

    if (count == 35)
    {
        SoundStart("AlphaSE5.mp3");
    }

    if (count == 45)
    {
        UnitAddAbility(u, 'Amrf');
        UnitRemoveAbility(u, 'Amrf');
        SetUnitAnimationByIndex(u, 8);
        SetUnitTimeScale(u, 1.6f);
        Effect("Alphasfx7.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 2.f, 1.f, 255, 255, 255, 255);
    }

    if (count == 15)
    {
        RushSlide(t, a, 300, 0.6, 0.02, true);
    }

    if (count == 45)
    {
        RushSlide(t, a, 400, 0.6, 0.02, true);
    }

    if (count >= 15 && count <= 80)
    {
        if (count >= 55)
        {
            dist = Distance(GetUnitX(u), GetUnitY(u), GetUnitX(t), GetUnitY(t));
            if (dist > 140)
            {
                x = PolarX(GetUnitX(u), dist / 10, a);
                y = PolarY(GetUnitY(u), dist / 10, a);
                SetUnitXY(u, x, y, 0);
            }
            else
            {
                x = PolarX(GetUnitX(t), -120.f, a);
                y = PolarY(GetUnitY(t), -120.f, a);
                SetUnitXY(u, x, y, 0);
            }
            if (count > 70)
            {
                SetUnitFlyHeight(u, GetUnitFlyHeight(u) - 15.f, .0f);
            }
            else
            {
                SetUnitFlyHeight(u, GetUnitFlyHeight(u) + 15.f, .0f);
            }

            if (count % 3 == 0)
            {
                CloneAnimate(u, GetUnitCurrentAnimationId(u), 1, 0, 100, 0.12, 0.36, 0.02, GetUnitAnimationOffsetPercent(u));
            }
        }

        if (count % 5 == 0)
        {
            Effect("Alphasfx13.mdx", GetUnitX(t), GetUnitY(t), 50.f, randomAngle(), .0f, .0f, 1.f, 1.f, 216, 66, 66, PercentTo255(60.f));
            Effect("Alphasfx14.mdx", GetUnitX(t), GetUnitY(t), 100.f, randomAngle(), .0f, .0f, 1.f, 1.f, 216, 66, 66, PercentTo255(40.f));
        }
    }

    if (count == 75)
    {
        SoundStart("alphase6.mp3");
    }

    if (count == 80)
    {
        SoundStart("alphase7.mp3");
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(t), GetUnitY(t));
        SetUnitFlyHeight(u, .0f, .0f);
        Effect("Alphasfx15.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
        Effect("Alphasfx16.mdx", GetUnitX(t), GetUnitY(t), .0f, a, .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        Effect("Alphasfx17.mdx", GetUnitX(t), GetUnitY(t), 100.f, a, .0f, .0f, 6.f, 2.f, 255, 255, 255, 255);

        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        SetPauseUnit(t, false);
        SetInvulUnit(u, false);
        SetInvulUnit(t, false);
        UnitDamageTarget(u, t, (1 + GetUnitAbilityLevel(u, 'A002')) * GetHeroAgi(u, true));
        IssueTargetOrderById(u, 851983, t);
        StopUnitTimed(t, 0.2);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void AlphaQ()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = LoadReal(GameHT, hid, 'angl');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    group g2 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    SetPauseUnit(u, true);

    if (count == 1)
    {
        SoundStart("alphaq.mp3");
        SoundStart("alphase1.mp3");
        SetUnitAnimationByIndex(u, 10);
        SetUnitTimeScale(u, 2);
        Effect("Alphasfx1.mdx", GetUnitX(u), GetUnitY(u), 50.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        x = PolarX(GetUnitX(u), -100.f, a);
        y = PolarY(GetUnitY(u), -100.f, a);
        Effect("Alphasfx2.mdx", x, y, 100.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
        SaveGroupHandle(GameHT, hid, 'grp+', CreateGroup());
    }

    if (count == 3)
    {
        SoundStart("alphase2.mp3");
        x = PolarX(GetUnitX(u), -100.f, a);
        y = PolarY(GetUnitY(u), -100.f, a);
        Effect("Alphasfx2.mdx", x, y, 100.f, a, .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
    }

    if (count <= 12)
    {
        if (count == 1)
        {
            RushSlide(u, a, 1400, 0.2, 0.02, false);
            SaveReal(GameHT, hid, 0, 40);
        }
        visionArea(GetOwningPlayer(u), 1200.f, 3.f, GetUnitX(u), GetUnitY(u));

        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        g2 = CreateGroup();
        GroupEnumUnitsInRange(g2, GetUnitX(u), GetUnitY(u), 300, nil);
        for (int i = 0; i < GroupGetCount(g2); i++)
        {
            d = GroupGetUnitByIndex(g2, i);
            if (FilterGeneric(u, d) && !IsUnitInGroup(d, g1))
            {
                UnitDamageTarget(u, d, 100 * GetUnitAbilityLevel(u, 'A001'));
                GroupAddUnit(g1, d);
            }
        }
        DestroyGroup(g2);

        if (count % 2 == 0)
        {
            Effect("Alphasfx3.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
            Effect("Alphasfx4.mdx", GetUnitX(u), GetUnitY(u), 100.f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
            Effect("Alphasfx4.mdx", GetUnitX(u), GetUnitY(u), .0f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
            Effect("Alphasfx4.mdx", GetUnitX(u), GetUnitY(u), 150.f, randomAngle(), GetRandomReal(20.f, 40.f), .0f, 0.8f, 1.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, GetRandomReal(0.5f, 1.f));
            x = PolarX(GetUnitX(u), 200.f, a + LoadReal(GameHT, hid, 0));
            y = PolarY(GetUnitY(u), 200.f, a + LoadReal(GameHT, hid, 0));
            if (GetRandomInt(1, 2) == 1)
            {
                Effect("Alphasfx6.mdx", x, y, .0f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
            }
            else
            {
                Effect("Alphasfx7.mdx", x, y, .0f, a, .0f, .0f, 1.5f, 1.f, 255, 255, 255, 255);
            }
            SaveReal(GameHT, hid, 0, -LoadReal(GameHT, hid, 0));
        }
    }

    if (count == 12)
    {
        SoundStart("alphaq-1.mp3");
        SetUnitTimeScale(u, 1.f);
        SetPauseUnit(u, false);
        IssueImmediateOrderById(u, 851972);
        g1 = LoadGroupHandle(GameHT, hid, 'grp+');
        DestroyGroup(g1);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void MouseClickEvent()
{
    trigger t = CreateTrigger();
    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        TriggerRegisterPlayerEvent(t, Player(i), EVENT_PLAYER_TERRAIN_CLICK);
    }
    TriggerAddAction(t, function()
    {
        player p = GetTriggerPlayer();
        int pid = GetPlayerId(p);
        MouseWorldX[pid] = GetTriggerPlayerMouseWorldX();
        MouseWorldY[pid] = GetTriggerPlayerMouseWorldY();
    });
}

void UnitSelectEvent()
{
    trigger t = CreateTrigger();
    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_SELECTED, nil);
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_DESELECTED, nil);
    }
    TriggerAddAction(t, function()
    {
        player p = GetTriggerPlayer();
        int pid = GetPlayerId(p);
        
        if (GetTriggerEventId() == EVENT_PLAYER_UNIT_SELECTED)
        {
            SelectedUnit[pid] = GetTriggerUnit();
        }
        else
        {
            SelectedUnit[pid] = nil;
        }
    });
}

void OrderEvent()
{
    trigger t = CreateTrigger();
    for (int i = 0; i <= PLAYER_NEUTRAL_PASSIVE; i++)
    {
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_ISSUED_ORDER, nil);
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER, nil);
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, nil);
    }
    TriggerAddAction(t, function()
    {
        unit u = GetTriggerUnit();
        player p = GetTriggerPlayer();
        int oid = GetUnitCurrentOrder(u);
        int uid = GetUnitUserData(u);
        int pid = GetPlayerId(p);

        if (oid == 851986 || oid == 851971)
        {
            ORDER_POSX[uid] = GetOrderPointX();
            ORDER_POSY[uid] = GetOrderPointY();
        }
    });
}

void LearnAbilityEvent()
{
    trigger t = CreateTrigger();
    for (int i = 0; i <= PLAYER_NEUTRAL_PASSIVE; i++)
    {
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_HERO_SKILL, nil);
    }
    TriggerAddAction(t, function()
    {
        unit u = GetTriggerUnit();
        int aid = GetLearnedSkill();
        int alvl = GetLearnedSkillLevel();
        
        if (aid == 'A00U')
        {
            SetUnitAbilityLevel(u, 'A00V', alvl);
            SetUnitAbilityLevel(u, 'A00W', alvl);
        }

        if (aid == 'A06B')
        {
            if (alvl == 1)
            {
                SaveInteger(GameHT, GetHandleId(u), StringHash("AceR"), 1);
            }
            SetUnitAbilityLevel(u, 'A06C', alvl);
        }
    });
}

void AbilityAddEvent()
{
    trigger t = CreateTrigger();
    for (int i = 0; i <= PLAYER_NEUTRAL_PASSIVE; i++)
    {
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_ABILITY_ADDED, nil);
    }
    TriggerAddAction(t, function()
    {
        unit u = GetTriggerUnit();
        ability ab = GetSpellAbility();
        int aid = GetSpellAbilityId();

        if (aid == 'A006' || aid == 'A007' || aid == 'A04J' || aid == 'A04K' || aid == 'A00P' || aid == 'A00Q' || aid == 'A05G' || aid == 'A05H' || aid == 'A01Z' || aid == 'A020' || aid == 'A00Z' || aid == 'A010'
        || aid == 'A00V' || aid == 'A00W' || aid == 'A00X' || aid == 'A05R' || aid == 'A05S' || aid == 'A05Y' || aid == 'A05Z' || aid == 'A065' || aid == 'A067' || aid == 'A06C' || aid == 'A06E' || aid == 'A06F'
        || aid == 'A06M' || aid == 'A06N' || aid == 'A016' || aid == 'A017' || aid == 'A01D' || aid == 'A01F' || aid == 'A03E' || aid == 'A03F' || aid == 'A06S' || aid == 'A06T' || aid == 'A04X' || aid == 'A052'
        || aid == 'A01L' || aid == 'A01M' || aid == 'A037' || aid == 'A038' || aid == 'A03T' || aid == 'A03V' || aid == 'A03X' || aid == 'A03Y' || aid == 'A03Z' || aid == 'A045' || aid == 'A046' || aid == 'A02E'
        || aid == 'A02F' || aid == 'A04Q' || aid == 'A04R' || aid == 'A02L' || aid == 'A02M' || aid == 'A030' || aid == 'A031' || aid == 'A04C' || aid == 'A04D' || aid == 'A027' || aid == 'A028' || aid == 'A00G'
        || aid == 'A00H' || aid == 'A02T' || aid == 'A02U' || aid == 'A074' || aid == 'A075' || aid == 'A07D' || aid == 'A07E' || aid == 'A059' || aid == 'A05A' || aid == 'A05N' || aid == 'A07F' || aid == 'A07G'
        || aid == 'A07H' || aid == 'A07O' || aid == 'A07P' || aid == 'A07V' || aid == 'A07W' || aid == 'A07X' || aid == 'A07Y' || aid == 'A07Z' || aid == 'A080' || aid == 'A08D' || aid == 'A08E' || aid == 'A08L'
        || aid == 'A08M' || aid == 'A084' || aid == 'A085' || aid == 'A08R' || aid == 'A08S' || aid == 'A08Y' || aid == 'A08Z' || aid == 'A097' || aid == 'A098')
        {
            DisableAbility(ab, true, true);
        }

        if (aid == 'A02I' || aid == 'A089' || aid == 'A078' || aid == 'A07K' || aid == 'A07S' || aid == 'A013' || aid == 'A03S')
        {
            SetAbilityCastPoint(ab, .0f);
        }
    });
}

void SpellEvent()
{
    trigger t = CreateTrigger();
    for (int i = 0; i <= PLAYER_NEUTRAL_PASSIVE; i++)
    {
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_SPELL_EFFECT, nil);
    }
    TriggerAddAction(t, function()
    {
        unit u = GetTriggerUnit();
        unit t = GetSpellTargetUnit();
        int aid = GetSpellAbilityId();
        timer tmr = nil;
        int hid = 0;
        buff buf = nil;
        int tid = GetUnitUserData(t);
        group g1 = nil;
        unit d = nil;
        float x = GetSpellTargetX();
        float y = GetSpellTargetY();
        float a = Angle(GetUnitX(u), GetUnitY(u), x, y);
        float dist = Distance(GetUnitX(u), GetUnitY(u), x, y);
        ability ab = GetSpellAbility();
        bool hasBuff = false;
        int uid = GetUnitUserData(u);
        float dmg = .0f;

        if (aid == 'A098')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ReinforceD);
        }

        if (aid == 'A097')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ReinforceF);
        }

        if (aid == 'A094')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ReinforceT);
        }

        if (aid == 'A01S')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ReinforceR);
        }

        if (aid == 'A01R')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ReinforceE);
        }

        if (aid == 'A01Q')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ReinforceW);
        }

        if (aid == 'A01O')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @ReinforceQ);
        }

        if (aid == 'A01P')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @FireflyR2);
        }

        if (aid == 'A093')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @FireflyR);
        }

        if (aid == 'A092')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            if (HaveSavedBoolean(GameHT, GetHandleId(u), StringHash("FireflyMode1")))
            {
                SaveInteger(GameHT, hid, 'coun', 100);
            }
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @FireflyE);
        }

        if (aid == 'A091')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            if (HaveSavedBoolean(GameHT, GetHandleId(u), StringHash("FireflyMode1")))
            {
                SaveInteger(GameHT, hid, 'coun', 100);
            }
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @FireflyW);
        }

        if (aid == 'A090')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            if (HaveSavedBoolean(GameHT, GetHandleId(u), StringHash("FireflyMode1")))
            {
                SaveInteger(GameHT, hid, 'coun', 1100);
                SaveReal(GameHT, hid, 'angl', a);
            }
            else if (HaveSavedReal(GameHT, GetHandleId(u), StringHash("FireflyQPosX")))
            {
                SaveInteger(GameHT, hid, 'coun', 1000);
            }
            else
            {
                SaveReal(GameHT, hid, 'angl', a);
            }
            TimerStart(tmr, 0.02, true, @FireflyQ);
        }

        if (aid == 'A08Z')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ByakuranD);
        }

        if (aid == 'A08Y')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ByakuranF);
        }

        if (aid == 'A08X')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @ByakuranT);
        }

        if (aid == 'A08W')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ByakuranR);
        }

        if (aid == 'A08V')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ByakuranE);
        }

        if (aid == 'A08U')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ByakuranW);
        }

        if (aid == 'A08T')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @ByakuranQ);
        }

        if (aid == 'A08S')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02, true, @JotaroD);
        }

        if (aid == 'A08R')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02, true, @JotaroF);
        }

        if (aid == 'A08Q')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02, true, @JotaroT);
        }

        if (aid == 'A08P')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @JotaroR);
        }

        if (aid == 'A008')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @JotaroE);
        }

        if (aid == 'A08O')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @JotaroW);
        }

        if (aid == 'A08N')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @JotaroQ);
        }

        if (aid == 'A085')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @BisgohanD);
        }

        if (aid == 'A084')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @BisgohanF);
        }

        if (aid == 'A083')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @BisgohanT);
        }

        if (aid == 'A03L')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @BisgohanR);
        }

        if (aid == 'A03H')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @BisgohanE);
        }

        if (aid == 'A082')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @BisgohanW);
        }

        if (aid == 'A081')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @BisgohanQ);
        }

        if (aid == 'A08M')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @AcheronD);
        }

        if (aid == 'A08L')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @AcheronF);
        }

        if (aid == 'A08K')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02, true, @AcheronT);
        }

        if (aid == 'A08J')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @AcheronR);
        }

        if (aid == 'A08I')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @AcheronE);
        }

        if (aid == 'A08H')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @AcheronW);
        }

        if (aid == 'A08F')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @AcheronQ);
        }

        if (aid == 'A08E')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @CidD);
        }

        if (aid == 'A08D')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @CidF);
        }

        if (aid == 'A08B')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02, true, @CidT);
        }

        if (aid == 'A08A')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @CidR2);
        }

        if (aid == 'A089')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02, true, @CidR);
        }

        if (aid == 'A088')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            if (GetUnitAbilityLevel(u, 'B00L') > 0)
            {
                SaveInteger(GameHT, hid, 'coun', 200);
            }
            TimerStart(tmr, 0.02, true, @CidE);
        }

        if (aid == 'A087')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            if (GetUnitAbilityLevel(u, 'B00L') > 0)
            {
                SaveInteger(GameHT, hid, 'coun', 100);
            }
            TimerStart(tmr, 0.02, true, @CidW);
        }

        if (aid == 'A08C')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @CidQ2);
        }

        if (aid == 'A086')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @CidQ);
        }

        if (aid == 'A080')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @NatsuD);
        }

        if (aid == 'A07Z')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02, true, @NatsuF);
        }

        if (aid == 'A07Y')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @NatsuT2);
        }

        if (aid == 'A07U')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02, true, @NatsuT);
        }

        if (aid == 'A07X')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @NatsuR2);
        }

        if (aid == 'A07T')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @NatsuR);
        }

        if (aid == 'A07S')
        {
            hasBuff = GetUnitAbilityLevel(u, 'B00J') > 0;
            if (!hasBuff)
            {
                buf = CreateBuff('B00J');
                SetBuffRealField(buf, ABILITY_RLF_LIFE_REGEN_RATE, GetHeroAgi(u, true) * 0.1);
                UnitAddBuff(u, buf);
                SetBuffRemainingDuration(buf, 5 + 5 * GetUnitAbilityLevel(u, 'A07S'));

                tmr = CreateTimer();
                hid = GetHandleId(tmr);
                SaveUnitHandle(GameHT, hid, 'cstr', u);
                TimerStart(tmr, 0.02, true, @NatsuE);
            }
            else
            {
                UnitRemoveAbility(u, 'B00J');
            }
        }

        if (aid == 'A07W')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @NatsuW2);
        }

        if (aid == 'A07R')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @NatsuW);
        }

        if (aid == 'A07V')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @NatsuQ2);
        }

        if (aid == 'A07Q')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @NatsuQ);
        }

        if (aid == 'A07P')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02, true, @HibariD);
        }

        if (aid == 'A07O')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @HibariF);
        }

        if (aid == 'A07N')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @HibariT);
        }

        if (aid == 'A07M')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @HibariR);
        }

        if (aid == 'A07L')
        {
            if (dist > 700)
            {
                x = PolarX(GetUnitX(u), 700, a);
                y = PolarY(GetUnitY(u), 700, a);
            }
            if (!IsTerrainPathable(x, y, PATHING_TYPE_FLYABILITY))
            {
                Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
                Effect("Hibarisfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
                SetPauseUnit(u, true);
                SetUnitPosition(u, x, y);
                SetPauseUnit(u, false);
                Effect("Astasfx2.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
                Effect("Hibarisfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 2.5, 1, 255, 255, 255, 255);
            }
            else
            {
                Effect("Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
                SetUnitCurrentMana(u, GetUnitCurrentMana(u) + 50);
                SetAbilityRemainingCooldown(GetSpellAbility(), 0);
            }
        }

        if (aid == 'A07K')
        {
            hasBuff = GetUnitAbilityLevel(u, 'B00I') > 0;
            if (!hasBuff) 
            {
                buf = CreateBuff('B00I');
                SetBuffRealField(buf, ABILITY_RLF_DAMAGE_INCREASE_PERCENT_INF1, 0.6f);
                UnitAddBuff(u, buf);
                
                tmr = CreateTimer();
                hid = GetHandleId(tmr);
                SaveUnitHandle(GameHT, hid, 'cstr', u);
                TimerStart(tmr, 0.02, true, @HibariE);
            }
            else
            {
                buf = GetUnitBuff(u, 'B00I');
                SetBuffRealField(buf, ABILITY_RLF_DAMAGE_INCREASE_PERCENT_INF1, 0.6f);
            }
            SetBuffRemainingDuration(buf, 5.f + 5.f * GetUnitAbilityLevel(u, 'A07K'));
        }

        if (aid == 'A07J')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @HibariW);
        }

        if (aid == 'A07I')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            if (dist > 800)
            {
                SaveInteger(GameHT, hid, 'coun', 100);
            }
            TimerStart(tmr, 0.02, true, @HibariQ);
        }

        if (aid == 'A07F')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @OkitaD);
        }

        if (aid == 'A05N')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @OkitaF);
        }

        if (aid == 'A05M')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @OkitaT);
        }

        if (aid == 'A05L')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02, true, @OkitaR);
        }

        if (aid == 'A05K')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @OkitaE);
        }

        if (aid == 'A05J')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @OkitaW);
        }

        if (aid == 'A05I')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @OkitaQ);
        }

        if (aid == 'A05A')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @VegetaD);
        }

        if (aid == 'A059')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @VegetaF);
        }

        if (aid == 'A058')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @VegetaT);
        }

        if (aid == 'A057')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @VegetaR);
        }

        if (aid == 'A056')
        {
            if (dist > 700)
            {
                x = PolarX(GetUnitX(u), 700, a);
                y = PolarY(GetUnitY(u), 700, a);
            }
            if (!IsTerrainPathable(x, y, PATHING_TYPE_FLYABILITY))
            {
                SoundStart("GojoSE3.mp3");
                Effect("Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
                Effect("vegetasfx5.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 1, 1, 255, 255, 255, 255);
                SetPauseUnit(u, true);
                SetUnitPosition(u, x, y);
                SetPauseUnit(u, false);
                Effect("vegetasfx10.mdx", GetUnitX(u), GetUnitY(u), 30, a, 0, 0, 2, 1, 255, 255, 255, 255);
            }
            else
            {
                Effect("Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
                SetUnitCurrentMana(u, GetUnitCurrentMana(u) + 10 * GetUnitAbilityLevel(u, aid));
                SetAbilityRemainingCooldown(GetSpellAbility(), 0);
            }
        }

        if (aid == 'A055')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @VegetaW);
        }

        if (aid == 'A054')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @VegetaQ);
        }

        if (aid == 'A07E')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @GokuD);
        }

        if (aid == 'A07D')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @GokuF);
        }

        if (aid == 'A07C')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02, true, @GokuT);
        }

        if (aid == 'A07B')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02, true, @GokuR2);
        }

        if (aid == 'A07A')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @GokuR);
        }

        if (aid == 'A079')
        {
            if (dist > 700)
            {
                x = PolarX(GetUnitX(u), 700, a);
                y = PolarY(GetUnitY(u), 700, a);
            }
            if (!IsTerrainPathable(x, y, PATHING_TYPE_FLYABILITY))
            {
                SoundStart("GojoSE3.mp3");
                Effect("Arthursfx5.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
                Effect("Alicesfx9.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1, 1, 255, 255, 255, 255);
                SetPauseUnit(u, true);
                SetUnitPosition(u, x, y);
                SetPauseUnit(u, false);
                Effect("Hutaosfx3.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
            }
            else
            {
                Effect("Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
                SetUnitCurrentMana(u, GetUnitCurrentMana(u) + 50);
                SetAbilityRemainingCooldown(GetSpellAbility(), 0);
            }
        }

        if (aid == 'A078')
        {
            hasBuff = GetUnitAbilityLevel(u, 'B00H') > 0;
            if (!hasBuff) 
            {
                buf = CreateBuff('B00H');
                UnitAddBuff(u, buf);

                SetPauseUnit(u, true);
                SetInvulUnit(u, true);
                tmr = CreateTimer();
                hid = GetHandleId(tmr);
                SaveUnitHandle(GameHT, hid, 'cstr', u);
                TimerStart(tmr, 0.02, true, @GokuE);
            }
            else
            {
                buf = GetUnitBuff(u, 'B00H');
            }
            SetBuffRemainingDuration(buf, 5.f + 5.f * GetUnitAbilityLevel(u, 'A078'));
        }

        if (aid == 'A077')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @GokuW);
        }

        if (aid == 'A076')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @GokuQ);
        }

        if (aid == 'A075')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @GojoD);
        }

        if (aid == 'A074')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @GojoF);
        }

        if (aid == 'A073')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02, true, @GojoT);
        }

        if (aid == 'A072')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @GojoR);
        }

        if (aid == 'A071')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @GojoE);
        }

        if (aid == 'A070')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @GojoW);
        }

        if (aid == 'A06Z')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @GojoQ);
        }

        if (aid == 'A02U')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @RyougiD);
        }

        if (aid == 'A02T')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @RyougiF);
        }

        if (aid == 'A02S')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @RyougiT);
        }

        if (aid == 'A02R')
        {
            t = nil;
            g1 = CreateGroup();
            GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 700, nil);
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                d = GroupGetUnitByIndex(g1, i);
                if (FilterGeneric(u, d) && IsUnitHero(d))
                {
                    t = d;
                    break;
                }
            }
            DestroyGroup(g1);
            
            if (t != nil)
            {
                SetPauseUnit(u, true);
                SetInvulUnit(u, true);
                SetPauseUnit(t, true);
                SetInvulUnit(t, true);

                tmr = CreateTimer();
                hid = GetHandleId(tmr);
                SaveUnitHandle(GameHT, hid, 'cstr', u);
                SaveUnitHandle(GameHT, hid, 'trgt', t);
                TimerStart(tmr, 0.02, true, @RyougiR2);
            }
        }

        if (aid == 'A02Q')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @RyougiR);
        }

        if (aid == 'A02P')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            t = LoadUnitHandle(GameHT, GetHandleId(u), StringHash("RyogiE"));
            RemoveSavedHandle(GameHT, GetHandleId(u), StringHash("RyogiE"));

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            if (t != nil && !IsUnitInvulnerable(t) && IsUnitAlive(t))
            {
                SetPauseUnit(t, true);
                SetInvulUnit(t, true);
                SaveUnitHandle(GameHT, hid, 'trgt', t);
            }
            TimerStart(tmr, 0.02, true, @RyougiE);
        }

        if (aid == 'A02O')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @RyougiW);
        }

        if (aid == 'A02N')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @RyougiQ);
        }

        if (aid == 'A00H')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @MystoD);
        }

        if (aid == 'A00G')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @MystoF);
        }

        if (aid == 'A00F')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @MystoT);
        }

        if (aid == 'A00E')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @MystoR);
        }

        if (aid == 'A00C')
        {
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02, true, @MystoE2);
        }

        if (aid == 'A00B')
        {
            d = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'h000', GetUnitX(u), GetUnitY(u), 0);
            UnitAddAbility(d, 'A00D');
            ab = GetUnitAbility(d, 'A00D');
            SetAbilityRealLevelField(ab, ABILITY_RLF_TRANSITION_TIME_SECONDS, 0, 0.5);
            SetAbilityRealLevelField(ab, ABILITY_RLF_DURATION_HERO, 0, 7 + GetUnitAbilityLevel(u, aid));
            SetAbilityRealLevelField(ab, ABILITY_RLF_DURATION_NORMAL, 0, 7 + GetUnitAbilityLevel(u, aid));
            CastAbilityTarget(ab, u);
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'dumi', d);
            TimerStart(tmr, 0.1, false, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit d = LoadUnitHandle(GameHT, hid, 'dumi');

                RemoveUnit(d);
                FlushChildHashtable(GameHT, hid);
                DestroyTimer(tmr);
            });

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02, true, @MystoE);
        }

        if (aid == 'A00A')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @MystoW);
        }

        if (aid == 'A009')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @MystoQ);
        }

        if (aid == 'A028')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @IchigoD);
        }

        if (aid == 'A027')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @IchigoF);
        }

        if (aid == 'A026')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @IchigoT);
        }

        if (aid == 'A025')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @IchigoR);
        }

        if (aid == 'A024')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02, true, @IchigoE);
        }

        if (aid == 'A023')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @IchigoW);
        }

        if (aid == 'A022')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @IchigoQ);
        }

        if (aid == 'A04D')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02, true, @AliceD);
        }

        if (aid == 'A04C')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @AliceF);
        }

        if (aid == 'A04B')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @AliceT);
        }
        
        if (aid == 'A04A')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @AliceR);
        }

        if (aid == 'A049')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @AliceE);
        }

        if (aid == 'A048')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @AliceW);
        }

        if (aid == 'A047')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @AliceQ);
        }

        if (aid == 'A031')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ShanaD);
        }

        if (aid == 'A030')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ShanaF);
        }

        if (aid == 'A02Z')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02, true, @ShanaT);
        }

        if (aid == 'A02Y')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ShanaR);
        }

        if (aid == 'A02W')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @ShanaW);
        }

        if (aid == 'A02V')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @ShanaQ);
        }

        if (aid == 'A02M')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AkameD);
        }

        if (aid == 'A02L')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AkameF);
        }

        if (aid == 'A02K')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AkameT);
        }

        if (aid == 'A02J')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AkameR);
        }

        if (aid == 'A08G')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AkameE2);
        }

        if (aid == 'A02I')
        {
            hasBuff = GetUnitAbilityLevel(u, 'B00C') > 0;
            if (!hasBuff)
            {
                buf = CreateBuff('B00C');
                SetBuffRealField(buf, ABILITY_RLF_DAMAGE_INCREASE_PERCENT_INF1, 0.6);
                UnitAddBuff(u, buf);

                tmr = CreateTimer();
                hid = GetHandleId(tmr);
                SaveUnitHandle(GameHT, hid, 'cstr', u);
                TimerStart(tmr, 0.02, true, @AkameE);
            }
            else
            {
                buf = GetUnitBuff(u, 'B00C');
                SetBuffRealField(buf, ABILITY_RLF_DAMAGE_INCREASE_PERCENT_INF1, 0.6);
            }
            SetBuffRemainingDuration(buf, 5 + 5 * GetUnitAbilityLevel(u, 'A02I'));
        }

        if (aid == 'A02H')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AkameW);
        }

        if (aid == 'A02G')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @AkameQ);
        }

        if (aid == 'A07H')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02, true, @AstaD);
        }

        if (aid == 'A07G')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02, true, @AstaF);
        }

        if (aid == 'A06Y')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @AstaT);
        }

        if (aid == 'A06X')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AstaR);
        }

        if (aid == 'A06W')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AstaE);
        }

        if (aid == 'A06V')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AstaW);
        }

        if (aid == 'A06U')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @AstaQ);
        }

        if (aid == 'A04R')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @KianaD);
        }

        if (aid == 'A04Q')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @KianaF);
        }

        if (aid == 'A04P')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @KianaT);
        }

        if (aid == 'A04O')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @KianaR);
        }

        if (aid == 'A04N')
        {
            if (dist > 700)
            {
                x = PolarX(GetUnitX(u), 700, a);
                y = PolarY(GetUnitY(u), 700, a);
            }
            if (!IsTerrainPathable(x, y, PATHING_TYPE_FLYABILITY))
            {
                Effect("Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
                SetPauseUnit(u, true);
                SetUnitPosition(u, x, y);
                SetPauseUnit(u, false);
                Effect("Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdx", GetUnitX(u), GetUnitY(u), 0, a, 0, 0, 1.5, 1, 255, 255, 255, 255);
            }
            else
            {
                Effect("Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdx", GetUnitX(u), GetUnitY(u), 50, a, 0, 0, 2, 1, 255, 255, 255, 255);
                SetUnitCurrentMana(u, GetUnitCurrentMana(u) + 10 * GetUnitAbilityLevel(u, aid));
                SetAbilityRemainingCooldown(GetSpellAbility(), 0);
            }
        }

        if (aid == 'A04M')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @KianaW);
        }

        if (aid == 'A04L')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @KianaQ);
        }

        if (aid == 'A02F')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MusashiD);
        }

        if (aid == 'A02E')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MusashiF);
        }

        if (aid == 'A02D')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MusashiT);
        }

        if (aid == 'A02C')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MusashiR);
        }

        if (aid == 'A02B')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MusashiE);
        }

        if (aid == 'A02A')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @MusashiW);
        }

        if (aid == 'A029')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @MusashiQ);
        }

        if (aid == 'A046')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HutaoD);
        }

        if (aid == 'A045')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @HutaoF);
        }

        if (aid == 'A044')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HutaoT);
        }

        if (aid == 'A03P')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HutaoR);
        }

        if (aid == 'A042')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HutaoE);
        }

        if (aid == 'A041')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @HutaoW);
        }

        if (aid == 'A040')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @HutaoQ);
        }

        if (aid == 'A03Z')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YamajiD);
        }

        if (aid == 'A03Y')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YamajiF);
        }

        if (aid == 'A03X')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @YamajiT2);
        }

        if (aid == 'A03W')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YamajiT);
        }

        if (aid == 'A03V')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YamajiR2);
        }

        if (aid == 'A03U')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YamajiR);
        }

        if (aid == 'A03T')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @YamajiQ2);
        }

        if (aid == 'A03S')
        {
            if (!HaveSavedBoolean(GameHT, GetHandleId(u), StringHash("YamajiE")))
            {
                SaveBoolean(GameHT, GetHandleId(u), StringHash("YamajiE"), true);
                SetPauseUnit(u, true);
                SetInvulUnit(u, true);

                tmr = CreateTimer();
                hid = GetHandleId(tmr);
                SaveUnitHandle(GameHT, hid, 'cstr', u);
                TimerStart(tmr, 0.02f, true, @YamajiE);
            }
            else
            {
                RemoveSavedBoolean(GameHT, GetHandleId(u), StringHash("YamajiE"));
                DestroyEffectTimed(LoadEffectHandle(GameHT, GetHandleId(u), StringHash("YamajiE")), .01f);
                if (LoadBoolean(GameHT, GetHandleId(u), StringHash("YamajiQ2")))
                {
                    SaveBoolean(GameHT, GetHandleId(u), StringHash("YamajiQ2"), false);
                    DisableAbility(GetUnitAbility(u, 'A03T'), true, true);
                    EnableAbility(GetUnitAbility(u, 'A03Q'), true, true);
                }
                if (LoadBoolean(GameHT, GetHandleId(u), StringHash("YamajiR2")))
                {
                    SaveBoolean(GameHT, GetHandleId(u), StringHash("YamajiR2"), false);
                    DisableAbility(GetUnitAbility(u, 'A03V'), true, true);
                    EnableAbility(GetUnitAbility(u, 'A03U'), true, true);
                }
                if (LoadBoolean(GameHT, GetHandleId(u), StringHash("YamajiT2")))
                {
                    SaveBoolean(GameHT, GetHandleId(u), StringHash("YamajiT2"), false);
                    DisableAbility(GetUnitAbility(u, 'A03X'), true, true);
                    EnableAbility(GetUnitAbility(u, 'A03W'), true, true);
                }
            }
        }

        if (aid == 'A03R')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YamajiW);
        }

        if (aid == 'A03Q')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @YamajiQ);
        }

        if (aid == 'A01I')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @TsunaD2);
        }

        if (aid == 'A038')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @TsunaD);
        }

        if (aid == 'A037')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @TsunaF);
        }

        if (aid == 'A036')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @TsunaT);
        }

        if (aid == 'A035')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @TsunaR);
        }

        if (aid == 'A034')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @TsunaE);
        }

        if (aid == 'A033')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @TsunaW);
        }

        if (aid == 'A032')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @TsunaQ);
        }
        
        if (aid == 'A01M')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YomiD);
        }

        if (aid == 'A01L')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YomiF);
        }

        if (aid == 'A01K')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YomiT);
        }

        if (aid == 'A01J')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YomiR);
        }

        if (aid == 'A01N')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @YomiE);
        }

        if (aid == 'A01H')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YomiW);
        }

        if (aid == 'A01G')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @YomiQ);
        }

        if (aid == 'A052')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @CronusD);
        }

        if (aid == 'A051')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveInteger(GameHT, GetHandleId(u), StringHash("CronusFOn"), 4);
            TimerStart(tmr, 0.02f, true, @CronusT2);
        }

        if (aid == 'A050')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveInteger(GameHT, GetHandleId(u), StringHash("CronusFOn"), 3);
            TimerStart(tmr, 0.02f, true, @CronusR2);
        }

        if (aid == 'A04Z')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveInteger(GameHT, GetHandleId(u), StringHash("CronusFOn"), 2);
            TimerStart(tmr, 0.02f, true, @CronusW2);
        }

        if (aid == 'A04Y')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveInteger(GameHT, GetHandleId(u), StringHash("CronusFOn"), 1);
            TimerStart(tmr, 0.02f, true, @CronusQ2);
        }

        if (aid == 'A04X')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @CronusF);
        }

        if (aid == 'A04W')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @CronusT);
        }

        if (aid == 'A04V')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @CronusR);
        }

        if (aid == 'A04U')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @CronusE);
        }

        if (aid == 'A04T')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @CronusW);
        }

        if (aid == 'A04S')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @CronusQ);
        }

        if (aid == 'A06T')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @JingliuD);
        }

        if (aid == 'A06S')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @JingliuF);
        }

        if (aid == 'A06R')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @JingliuT);
        }

        if (aid == 'A06Q')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @JingliuR);
        }

        if (aid == 'A06P')
        {
            t = LoadUnitHandle(GameHT, GetHandleId(u), StringHash("JingliuE"));
            if (t != nil && !IsUnitInvulnerable(t) && IsUnitAlive(t))
            {
                SetPauseUnit(u, true);
                SetInvulUnit(u, true);
                SetPauseUnit(t, true);
                SetInvulUnit(t, true);

                tmr = CreateTimer();
                hid = GetHandleId(tmr);
                SaveUnitHandle(GameHT, hid, 'cstr', u);
                SaveUnitHandle(GameHT, hid, 'trgt', t);
                if (LoadInteger(GameHT, GetHandleId(u), StringHash("JingliuE")) == 1)
                {
                    TimerStart(tmr, 0.02f, true, @JingliuE);
                }
                else
                {
                    TimerStart(tmr, 0.02f, true, @JingliuE2);
                }
            }
        }

        if (aid == 'A06O')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @JingliuW);
        }

        if (aid == 'A01A')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @JingliuQ);
        }

        if (aid == 'A03F')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @ArthurD);
        }

        if (aid == 'A03E')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @ArthurF);
        }

        if (aid == 'A03D')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @ArthurT);
        }

        if (aid == 'A03C')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @ArthurR);
        }

        if (aid == 'A03B')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @ArthurE);
        }

        if (aid == 'A03A')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @ArthurW);
        }

        if (aid == 'A039')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @ArthurQ);
        }

        if (aid == 'A01F')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @SaboD);
        }

        if (aid == 'A01D')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @SaboF);
        }

        if (aid == 'A01C')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @SaboT);
        }

        if (aid == 'A01B')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @SaboR);
        }

        if (aid == 'A01E')
        {
            SetPauseUnit(u, true);
            
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @SaboE);
        }

        if (aid == 'A019')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @SaboW);
        }

        if (aid == 'A018')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @SaboQ);
        }

        if (aid == 'A017')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @SalterD);
        }

        if (aid == 'A016')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @SalterF);
        }

        if (aid == 'A015')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @SalterT);
        }

        if (aid == 'A014')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @SalterR);
        }

        if (aid == 'A013')
        {
            SoundStart("SalterE.mp3");
            hasBuff = GetUnitAbilityLevel(u, 'B006') > 0;
            if (!hasBuff)
            {
                buf = CreateBuff('B006');
                SetBuffRealField(buf, ABILITY_RLF_LIFE_REGEN_RATE, GetHeroStr(u, true) * 0.15);
                UnitAddBuff(u, buf);
            }
            else
            {
                buf = GetUnitBuff(u, 'B006');
                SetBuffRealField(buf, ABILITY_RLF_LIFE_REGEN_RATE, GetHeroStr(u, true) * 0.15);
            }
            SetBuffRemainingDuration(buf, 5 + 5 * GetUnitAbilityLevel(u, 'A013'));
        }

        if (aid == 'A012')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @SalterW);
        }

        if (aid == 'A011')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @SalterQ);
        }

        if (aid == 'A06N')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @FuxuanD);
        }

        if (aid == 'A06M')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @FuxuanF);
        }

        if (aid == 'A06L')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @FuxuanT);
        }

        if (aid == 'A06K')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @FuxuanR);
        }

        if (aid == 'A06J')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02f, true, @FuxuanE);
        }

        if (aid == 'A06I')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @FuxuanW);
        }

        if (aid == 'A06H')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @FuxuanQ2);
        }

        if (aid == 'A06G')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @FuxuanQ);
        }

        if (aid == 'A06F')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AceD);
        }

        if (aid == 'A06E')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @AceF);
        }

        if (aid == 'A06D')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @AceT);
        }

        if (aid == 'A06C')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02f, true, @AceR2);
        }

        if (aid == 'A06B')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AceR);
        }

        if (aid == 'A06A')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @AceE);
        }

        if (aid == 'A069')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AceW);
        }

        if (aid == 'A068')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @AceQ);
        }

        if (aid == 'A067')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MuramasaD);
        }

        if (aid == 'A066')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MuramasaF2);
        }

        if (aid == 'A065')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MuramasaF);
        }

        if (aid == 'A064')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @MuramasaT);
        }

        if (aid == 'A063')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MuramasaR);
        }

        if (aid == 'A062')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MuramasaE);
        }

        if (aid == 'A061')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MuramasaW);
        }

        if (aid == 'A060')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @MuramasaQ);
        }

        if (aid == 'A05Z')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @EsdeathD);
        }

        if (aid == 'A05Y')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @EsdeathF);
        }

        if (aid == 'A05X')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @EsdeathT);
        }

        if (aid == 'A05W')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @EsdeathR);
        }

        if (aid == 'A05V')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @EsdeathE);
        }

        if (aid == 'A05U')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @EsdeathW);
        }

        if (aid == 'A05T')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @EsdeathQ);
        }

        if (aid == 'A05S')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @SehaD);
        }

        if (aid == 'A05R')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @SehaF);
        }

        if (aid == 'A05Q')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @SehaT);
        }

        if (aid == 'A05P')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @SehaR);
        }

        if (aid == 'A05O')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @SehaE);
        }

        if (aid == 'A01X')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @SehaW);
        }

        if (aid == 'A00N')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02f, true, @SehaQ2);
        }

        if (aid == 'A00M')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @SehaQ);
        }

        if (aid == 'A010')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HydeD);
        }

        if (aid == 'A00Z')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @HydeF);
        }

        if (aid == 'A00Y')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HydeT);
        }

        if (aid == 'A00U')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HydeR);
        }

        if (aid == 'A00X' && HydeE_Target[uid] != nil && !IsUnitInvulnerable(HydeE_Target[uid]) && IsUnitAlive(HydeE_Target[uid]))
        {
            t = HydeE_Target[uid];
            HydeE_Target[uid] = nil;
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HydeE2);
        }

        if (aid == 'A00T')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HydeE);
        }

        if (aid == 'A00W')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HydeW2);
        }

        if (aid == 'A00S')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @HydeW);
        }

        if (aid == 'A00V')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @HydeQ2);
        }

        if (aid == 'A00R')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @HydeQ);
        }

        if (aid == 'A020')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);
            
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @BellD);
        }

        if (aid == 'A01Z')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);
            
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @BellF);
        }

        if (aid == 'A01Y')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @BellT);
        }

        if (aid == 'A01W')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            TimerStart(tmr, 0.02f, true, @BellR);
        }

        if (aid == 'A01U')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @BellW);
        }

        if (aid == 'A01T')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @BellQ);
        }

        if (aid == 'A05H')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MokuoD);
        }

        if (aid == 'A05G')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MokuoF);
        }

        if (aid == 'A05F')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MokuoT);
        }

        if (aid == 'A05E')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MokuoR);
        }

        if (aid == 'A05D')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MokuoE);
        }

        if (aid == 'A05C')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @MokuoW);
        }

        if (aid == 'A05B')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @MokuoQ);
        }

        if (aid == 'A00Q')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @JellalD);
        }

        if (aid == 'A00P')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @JellalF);
        }

        if (aid == 'A00O')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @JellalT);
        }

        if (aid == 'A00L')
        {
            SetInvulUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'impX', x);
            SaveReal(GameHT, hid, 'impY', y);
            TimerStart(tmr, 0.02f, true, @JellalR);
        }

        if (aid == 'A00K')
        {
            if (GetUnitAbilityLevel(u, 'B004') == 0)
            {
                buf = CreateBuff('B004');
                UnitAddBuff(u, buf);

                tmr = CreateTimer();
                hid = GetHandleId(tmr);
                SaveUnitHandle(GameHT, hid, 'cstr', u);
                TimerStart(tmr, 0.02f, true, @JellalE);
            }
            else
            {
                buf = GetUnitBuff(u, 'B004');
            }
            SetBuffRemainingDuration(buf, 10.f);
        }

        if (aid == 'A00J')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @JellalW);
        }

        if (aid == 'A00I')
        {
            SetPauseUnit(u, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'oriX', x);
            SaveReal(GameHT, hid, 'oriY', y);
            TimerStart(tmr, 0.02f, true, @JellalQ);
        }

        if (aid == 'A04K')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YugiD);
        }

        if (aid == 'A04J')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YugiF);
        }

        if (aid == 'A04I')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @YugiT);
        }

        if (aid == 'A04H')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'mahp', GetUnitCurrentLife(t));
            TimerStart(tmr, 0.02f, true, @YugiR);
        }

        if (aid == 'A04G')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YugiE);
        }

        if (aid == 'A04F')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @YugiW);
        }

        if (aid == 'A04E')
        {
            SetPauseUnit(u, true);
            
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @YugiQ);
        }

        if (aid == 'A007')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AlphaD);
        }

        if (aid == 'A006')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AlphaF);
        }

        if (aid == 'A005')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AlphaT);
        }

        if (aid == 'A004')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AlphaR);
        }

        if (aid == 'A003')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AlphaE);
        }

        if (aid == 'A002')
        {
            SetPauseUnit(u, true);
            SetInvulUnit(u, true);
            SetPauseUnit(t, true);
            SetInvulUnit(t, true);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            TimerStart(tmr, 0.02f, true, @AlphaW);
        }

        if (aid == 'A001')
        {
            SetPauseUnit(u, true);
            
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveReal(GameHT, hid, 'angl', a);
            TimerStart(tmr, 0.02f, true, @AlphaQ);
        }

        if (aid == 'A03O')
        {
            Effect("Stormsfx1.mdx", GetUnitX(u), GetUnitY(u), 50.f, GetUnitFacing(u), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
            Effect("Stormsfx2.mdx", GetUnitX(u), GetUnitY(u), 50.f, GetUnitFacing(u), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85f);
            Effect("Stormsfx3.mdx", GetUnitX(u), GetUnitY(u), 50.f, GetUnitFacing(u), .0f, .0f, 2.5f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectTimeScale(dummy_effect, 0.85f);
            if (UnitHasItemOfTypeBJ(u, 'I02N'))
            {
                dmg = 3000.f;
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01B'))
            {
                dmg = 2000.f;
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01T'))
            {
                dmg = 1300.f;
            }

            g1 = CreateGroup();
            GroupEnumUnitsInRange(g1, GetUnitX(u), GetUnitY(u), 650.f, nil);
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                d = GroupGetUnitByIndex(g1, i);
                if (FilterGeneric(u, d))
                {
                    UnitDamageTarget(u, d, dmg);
                }
            }
            DestroyGroup(g1);
        }

        if (aid == 'A03N')
        {
            if (GetUnitAbilityLevel(u, 'B00F') == 0)
            {
                buf = CreateBuff('B00F');
                UnitAddBuff(u, buf);

                if (UnitHasItemOfTypeBJ(u, 'I02L'))
                {
                    SaveReal(GameHT, uid, StringHash("CloudShield"), 10000.f);
                }
                else if (UnitHasItemOfTypeBJ(u, 'I00P'))
                {
                    SaveReal(GameHT, uid, StringHash("CloudShield"), 6000.f);
                }
                else if (UnitHasItemOfTypeBJ(u, 'I01N'))
                {
                    SaveReal(GameHT, uid, StringHash("CloudShield"), 3500.f);
                }
            }
            else
            {
                buf = GetUnitBuff(u, 'B00F');
                if (UnitHasItemOfTypeBJ(u, 'I02L'))
                {
                    SaveReal(GameHT, uid, StringHash("CloudShield"), 10000.f);
                }
                else if (UnitHasItemOfTypeBJ(u, 'I00P'))
                {
                    SaveReal(GameHT, uid, StringHash("CloudShield"), 6000.f);
                }
                else if (UnitHasItemOfTypeBJ(u, 'I01N'))
                {
                    SaveReal(GameHT, uid, StringHash("CloudShield"), 3500.f);
                }
            }
            SetBuffRemainingDuration(buf, 4.f);
        }
    });
}

void DropItemEvent()
{
    trigger t = CreateTrigger();
    for (int i = 0; i <= PLAYER_NEUTRAL_PASSIVE; i++)
    {
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_DROP_ITEM, nil);
    }
    TriggerAddAction(t, function()
    {
        unit u = GetManipulatingUnit();
        item it = GetManipulatedItem();
        int uid = GetUnitUserData(u);
        int utypeid = GetUnitTypeId(u);
        int itemtypeid = GetItemTypeId(it);

        if (itemtypeid == 'I00X')
        {
            UnitAddStat(u, -5, -3, -3);
        }

        if (itemtypeid == 'I00U')
        {
            UnitAddStat(u, -3, -5, -3);
        }

        if (itemtypeid == 'I00Z')
        {
            UnitAddStat(u, -3, -3, -5);
        }

        if (itemtypeid == 'I00R')
        {
            UnitAddStat(u, -3, 0, 0);
        }

        if (itemtypeid == 'I00S')
        {
            UnitAddStat(u, 0, -3, 0);
        }

        if (itemtypeid == 'I00T')
        {
            UnitAddStat(u, 0, 0, -3);
        }

        if (itemtypeid == 'I02C')
        {
            UnitAddStat(u, -20, -10, -10);
        }

        if (itemtypeid == 'I02J')
        {
            UnitAddStat(u, -20, -10, -10);
        }

        if (itemtypeid == 'I032')
        {
            UnitAddStat(u, -10, -10, -20);
        }

        if (itemtypeid == 'I02I')
        {
            UnitAddStat(u, -10, -10, -20);
        }

        if (itemtypeid == 'I02V')
        {
            UnitAddStat(u, -10, -20, -10);
        }

        if (itemtypeid == 'I02G')
        {
            UnitAddStat(u, -10, -20, -10);
        }

        if (itemtypeid == 'I01U')
        {
            UnitAddStat(u, -120, -50, -50);
        }

        if (itemtypeid == 'I02O')
        {
            UnitAddStat(u, -120, -50, -50);
        }

        if (itemtypeid == 'I031')
        {
            UnitAddStat(u, -50, -50, -120);
        }

        if (itemtypeid == 'I02N')
        {
            UnitAddStat(u, -50, -50, -120);
        }

        if (itemtypeid == 'I02S')
        {
            UnitAddStat(u, -50, -120, -50);
        }

        if (itemtypeid == 'I02L')
        {
            UnitAddStat(u, -50, -120, -50);
        }

        if (itemtypeid == 'I01S')
        {
            UnitAddStat(u, -80, -40, -40);
        }

        if (itemtypeid == 'I01F')
        {
            UnitAddStat(u, -80, -40, -40);
        }

        if (itemtypeid == 'I030')
        {
            UnitAddStat(u, -40, -40, -80);
        }

        if (itemtypeid == 'I01B')
        {
            UnitAddStat(u, -40, -40, -80);
        }

        if (itemtypeid == 'I02M')
        {
            UnitAddStat(u, -40, -80, -40);
        }

        if (itemtypeid == 'I00P')
        {
            UnitAddStat(u, -40, -80, -40);
        }

        if (itemtypeid == 'I01Q')
        {
            UnitAddStat(u, -60, -30, -30);
        }

        if (itemtypeid == 'I01R')
        {
            UnitAddStat(u, -60, -30, -30);
        }

        if (itemtypeid == 'I02Z')
        {
            UnitAddStat(u, -30, -30, -60);
        }

        if (itemtypeid == 'I01T')
        {
            UnitAddStat(u, -30, -30, -60);
        }

        if (itemtypeid == 'I02H')
        {
            UnitAddStat(u, -30, -60, -30);
        }

        if (itemtypeid == 'I01N')
        {
            UnitAddStat(u, -30, -60, -30);
        }

        if (itemtypeid == 'I01J')
        {
            UnitAddStat(u, -40, -20, -20);
        }

        if (itemtypeid == 'I01L')
        {
            UnitAddStat(u, -40, -20, -20);
        }

        if (itemtypeid == 'I02Y')
        {
            UnitAddStat(u, -20, -20, -40);
        }

        if (itemtypeid == 'I01K')
        {
            UnitAddStat(u, -20, -20, -40);
        }

        if (itemtypeid == 'I02F')
        {
            UnitAddStat(u, -20, -40, -20);
        }

        if (itemtypeid == 'I01G')
        {
            UnitAddStat(u, -20, -40, -20);
        }

        if (itemtypeid == 'I01C')
        {
            UnitAddStat(u, -30, -20, -20);
        }

        if (itemtypeid == 'I01E')
        {
            UnitAddStat(u, -30, -20, -20);
        }

        if (itemtypeid == 'I02X')
        {
            UnitAddStat(u, -20, -20, -30);
        }

        if (itemtypeid == 'I01D')
        {
            UnitAddStat(u, -20, -20, -30);
        }

        if (itemtypeid == 'I02E')
        {
            UnitAddStat(u, -20, -30, -20);
        }

        if (itemtypeid == 'I019')
        {
            UnitAddStat(u, -20, -30, -20);
        }

        if (itemtypeid == 'I018')
        {
            UnitAddStat(u, -20, -20, -20);
        }

        if (itemtypeid == 'I017')
        {
            UnitAddStat(u, -10, -10, -10);
        }

        if (itemtypeid == 'I00O')
        {
            HasBoot[uid]--;
            UnitAddStat(u, -5, -5, -5);
            UnitAddBonus(u, -100, "ms");
        }

        if (itemtypeid == 'I00L')
        {
            HasBoot[uid]--;
            UnitAddStat(u, -10, -10, -10);
            UnitAddBonus(u, -100, "ms");
        }

        if (itemtypeid == 'I00H')
        {
            HasBoot[uid]--;
            UnitAddBonus(u, -25, "ms");
        }

        if (itemtypeid == 'I00I')
        {
            HasBoot[uid]--;
            UnitAddBonus(u, -50, "ms");
        }

        if (itemtypeid == 'I00J')
        {
            HasBoot[uid]--;
            UnitAddBonus(u, -75, "ms");
        }

        EnumUnitAbilities(u, nil, function()
        {
            ability ab = GetEnumAbility();
            unit u = GetAbilityOwner(ab);
            int alvl = GetAbilityLevel(ab);
            float cd = .0f;
            float cur = .0f;

            if (GetAbilityTypeId(ab) != 'A03N' && GetAbilityTypeId(ab) != 'A03O' && GetAbilityTypeId(ab) != 'A043')
            {
                for (int i = 0; i < GetAbilityIntegerField(ab, ABILITY_IF_LEVELS); i++)
                {
                    cd = GetAbilityBaseRealLevelFieldById(GetAbilityTypeId(ab), ABILITY_RLF_COOLDOWN, i);
                    cur = cd * (1.f - LoadReal(GameHT, GetHandleId(u), StringHash("CDRUNIT")));
                    if (cd > .0f)
                    {
                        if (cd != cur && cur > .0f)
                        {
                            SetAbilityRealLevelField(ab, ABILITY_RLF_COOLDOWN, i, cur);
                        }
                    }
                }
            }
        });
    });
}

void PickupItemEvent()
{
    trigger t = CreateTrigger();
    for (int i = 0; i <= PLAYER_NEUTRAL_PASSIVE; i++)
    {
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_PICKUP_ITEM, nil);
    }
    TriggerAddAction(t, function()
    {
        unit u = GetManipulatingUnit();
        item it = GetManipulatedItem();
        int uid = GetUnitUserData(u);
        int utypeid = GetUnitTypeId(u);
        int itemtypeid = GetItemTypeId(it);
        int pid = GetPlayerId(GetOwningPlayer(u));
        timer tmr = nil;
        int hid = 0;

        if (itemtypeid == 'I00X')
        {
            UnitAddStat(u, 5, 3, 3);
        }

        if (itemtypeid == 'I00U')
        {
            UnitAddStat(u, 3, 5, 3);
        }

        if (itemtypeid == 'I00Z')
        {
            UnitAddStat(u, 3, 3, 5);
        }

        if (itemtypeid == 'I00V')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I00R'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I00R'));
                UnitAddItemByIdSwapped('I00X', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I00S'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I00S'));
                UnitAddItemByIdSwapped('I00U', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I00T'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I00T'));
                UnitAddItemByIdSwapped('I00Z', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 300);
            }
        }

        if (itemtypeid == 'I00R')
        {
            UnitAddStat(u, 3, 0, 0);
        }

        if (itemtypeid == 'I00S')
        {
            UnitAddStat(u, 0, 3, 0);
        }

        if (itemtypeid == 'I00T')
        {
            UnitAddStat(u, 0, 0, 3);
        }

        if (itemtypeid == 'I02C')
        {
            UnitAddStat(u, 20, 10, 10);
        }

        if (itemtypeid == 'I02J')
        {
            UnitAddStat(u, 20, 10, 10);
        }

        if (itemtypeid == 'I032')
        {
            UnitAddStat(u, 10, 10, 20);
        }

        if (itemtypeid == 'I02I')
        {
            UnitAddStat(u, 10, 10, 20);
        }

        if (itemtypeid == 'I02V')
        {
            UnitAddStat(u, 10, 20, 10);
        }

        if (itemtypeid == 'I02G')
        {
            UnitAddStat(u, 10, 20, 10);
        }

        if (itemtypeid == 'I01U')
        {
            UnitAddStat(u, 120, 50, 50);
        }

        if (itemtypeid == 'I02O')
        {
            SetAbilityIntegerLevelField(GetUnitAbility(u, 'A043'), ABILITY_ILF_HIT_POINTS_GAINED_IHPG, 0, 3700);
            UnitAddStat(u, 120, 50, 50);
        }

        if (itemtypeid == 'I031')
        {
            UnitAddStat(u, 50, 50, 120);
        }

        if (itemtypeid == 'I02N')
        {
            UnitAddStat(u, 50, 50, 120);
        }

        if (itemtypeid == 'I02S')
        {
            UnitAddStat(u, 50, 120, 50);
        }

        if (itemtypeid == 'I02L')
        {
            UnitAddStat(u, 50, 120, 50);
        }

        if (itemtypeid == 'I02K')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I01S') && UnitHasItemOfTypeBJ(u, 'I02C'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01S'));
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02C'));
                UnitAddItemByIdSwapped('I01U', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01F') && UnitHasItemOfTypeBJ(u, 'I02J'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01F'));
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02J'));
                UnitAddItemByIdSwapped('I02O', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I030') && UnitHasItemOfTypeBJ(u, 'I032'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I030'));
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I032'));
                UnitAddItemByIdSwapped('I031', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01B') && UnitHasItemOfTypeBJ(u, 'I02I'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01B'));
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02I'));
                UnitAddItemByIdSwapped('I02N', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I02M') && UnitHasItemOfTypeBJ(u, 'I02V'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02M'));
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02V'));
                UnitAddItemByIdSwapped('I02S', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I00P') && UnitHasItemOfTypeBJ(u, 'I02G'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I00P'));
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02G'));
                UnitAddItemByIdSwapped('I02L', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 2500);
            }
        }

        if (itemtypeid == 'I01S')
        {
            UnitAddStat(u, 80, 40, 40);
        }

        if (itemtypeid == 'I01F')
        {
            SetAbilityIntegerLevelField(GetUnitAbility(u, 'A043'), ABILITY_ILF_HIT_POINTS_GAINED_IHPG, 0, 2200);
            UnitAddStat(u, 80, 40, 40);
        }

        if (itemtypeid == 'I030')
        {
            UnitAddStat(u, 40, 40, 80);
        }

        if (itemtypeid == 'I01B')
        {
            UnitAddStat(u, 40, 40, 80);
        }

        if (itemtypeid == 'I02M')
        {
            UnitAddStat(u, 40, 80, 40);
        }

        if (itemtypeid == 'I00P')
        {
            UnitAddStat(u, 40, 80, 40);
        }

        if (itemtypeid == 'I01O')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I01Q'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01Q'));
                UnitAddItemByIdSwapped('I01S', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01R'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01R'));
                UnitAddItemByIdSwapped('I01F', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I02Z'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02Z'));
                UnitAddItemByIdSwapped('I030', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01T'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01T'));
                UnitAddItemByIdSwapped('I01B', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I02H'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02H'));
                UnitAddItemByIdSwapped('I02M', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01N'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01N'));
                UnitAddItemByIdSwapped('I00P', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 2800);
            }
        }

        if (itemtypeid == 'I01Q')
        {
            UnitAddStat(u, 60, 30, 30);
        }

        if (itemtypeid == 'I01R')
        {
            UnitAddStat(u, 60, 30, 30);
        }

        if (itemtypeid == 'I02Z')
        {
            UnitAddStat(u, 30, 30, 60);
        }

        if (itemtypeid == 'I01T')
        {
            UnitAddStat(u, 30, 30, 60);
        }

        if (itemtypeid == 'I02H')
        {
            UnitAddStat(u, 30, 60, 30);
        }

        if (itemtypeid == 'I01N')
        {
            UnitAddStat(u, 30, 60, 30);
        }

        if (itemtypeid == 'I01M')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I01J'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01J'));
                UnitAddItemByIdSwapped('I01Q', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01L'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01L'));
                UnitAddItemByIdSwapped('I01R', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I02Y'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02Y'));
                UnitAddItemByIdSwapped('I02Z', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01K'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01K'));
                UnitAddItemByIdSwapped('I01T', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I02F'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02F'));
                UnitAddItemByIdSwapped('I02H', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01G'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01G'));
                UnitAddItemByIdSwapped('I01N', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 2200);
            }
        }

        if (itemtypeid == 'I01J')
        {
            UnitAddStat(u, 40, 20, 20);
        }

        if (itemtypeid == 'I01L')
        {
            UnitAddStat(u, 40, 20, 20);
        }

        if (itemtypeid == 'I02Y')
        {
            UnitAddStat(u, 20, 20, 40);
        }

        if (itemtypeid == 'I01K')
        {
            UnitAddStat(u, 20, 20, 40);
        }

        if (itemtypeid == 'I02F')
        {
            UnitAddStat(u, 20, 40, 20);
        }

        if (itemtypeid == 'I01G')
        {
            UnitAddStat(u, 20, 40, 20);
        }

        if (itemtypeid == 'I01I')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I01C'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01C'));
                UnitAddItemByIdSwapped('I01J', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01E'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01E'));
                UnitAddItemByIdSwapped('I01L', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I02X'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02X'));
                UnitAddItemByIdSwapped('I02Y', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I01D'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I01D'));
                UnitAddItemByIdSwapped('I01K', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I02E'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I02E'));
                UnitAddItemByIdSwapped('I02F', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I019'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I019'));
                UnitAddItemByIdSwapped('I01G', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 1800);
            }
        }

        if (itemtypeid == 'I01C')
        {
            UnitAddStat(u, 30, 20, 20);
        }

        if (itemtypeid == 'I01A')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I018'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I018'));
                UnitAddItemByIdSwapped('I01C', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 1400);
            }
        }

        if (itemtypeid == 'I01E')
        {
            UnitAddStat(u, 30, 20, 20);
        }

        if (itemtypeid == 'I01W')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I018'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I018'));
                UnitAddItemByIdSwapped('I01E', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 1400);
            }
        }

        if (itemtypeid == 'I02X')
        {
            UnitAddStat(u, 20, 20, 30);
        }

        if (itemtypeid == 'I02W')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I018'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I018'));
                UnitAddItemByIdSwapped('I02X', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 1400);
            }
        }

        if (itemtypeid == 'I01D')
        {
            UnitAddStat(u, 20, 20, 30);
        }

        if (itemtypeid == 'I01V')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I018'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I018'));
                UnitAddItemByIdSwapped('I01D', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 1400);
            }
        }

        if (itemtypeid == 'I02E')
        {
            UnitAddStat(u, 20, 30, 20);
        }

        if (itemtypeid == 'I02D')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I018'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I018'));
                UnitAddItemByIdSwapped('I02E', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 1400);
            }
        }

        if (itemtypeid == 'I019')
        {
            UnitAddStat(u, 20, 30, 20);
        }

        if (itemtypeid == 'I01P')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I018'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I018'));
                UnitAddItemByIdSwapped('I019', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 1400);
            }
        }

        if (itemtypeid == 'I018')
        {
            UnitAddStat(u, 20, 20, 20);
        }

        if (itemtypeid == 'I01H')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I017'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I017'));
                UnitAddItemByIdSwapped('I018', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 1400);
            }
        }

        if (itemtypeid == 'I017')
        {
            UnitAddStat(u, 10, 10, 10);
        }

        if (itemtypeid == 'I00O')
        {
            HasBoot[uid]++;
            UnitAddStat(u, 5, 5, 5);
            UnitAddBonus(u, 100, "ms");
        }

        if (itemtypeid == 'I00N')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I00J'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I00J'));
                UnitAddItemByIdSwapped('I00O', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 1800);
            }
        }

        if (itemtypeid == 'I00L')
        {
            HasBoot[uid]++;
            UnitAddStat(u, 10, 10, 10);
            UnitAddBonus(u, 100, "ms");
        }

        if (itemtypeid == 'I00M')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I00J'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I00J'));
                UnitAddItemByIdSwapped('I00L', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 1300);
            }
        }

        if (itemtypeid == 'I00H')
        {
            HasBoot[uid]++;
            UnitAddBonus(u, 25, "ms");
        }

        if (itemtypeid == 'I00I')
        {
            HasBoot[uid]++;
            UnitAddBonus(u, 50, "ms");
        }

        if (itemtypeid == 'I00J')
        {
            HasBoot[uid]++;
            UnitAddBonus(u, 75, "ms");
        }

        if (HasBoot[uid] > 1 && (itemtypeid == 'I00H' || itemtypeid == 'I00I' || itemtypeid == 'I00J' || itemtypeid == 'I00L' || itemtypeid == 'I00O'))
        {
            UnitRemoveItem(u, it);
        }

        if (itemtypeid == 'I00K')
        {
            RemoveItem(it);
            if (UnitHasItemOfTypeBJ(u, 'I00I'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I00I'));
                UnitAddItemByIdSwapped('I00J', u);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I00H'))
            {
                Effect("Abilities\\Spells\\Items\\AIsm\\AIsmTarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 1.f, 255, 255, 255, 255);
                RemoveItem(GetItemOfTypeFromUnitBJ(u, 'I00H'));
                UnitAddItemByIdSwapped('I00I', u);
            }
            else
            {
                SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD) + 300);
            }
        }

        if (itemtypeid == 'I002')
        {
            RemoveItem(it);
            if (!HaveSavedInteger(GameHT, utypeid, StringHash("Item_Secret")))
            {
                SaveInteger(GameHT, utypeid, StringHash("Item_Secret"), 1);

                if (utypeid == 'H00L')
                {
                    UnitAddItemByIdSwapped('I020', u);
                }
                else if (utypeid == 'H002')
                {
                    UnitAddItemByIdSwapped('I001', u);
                }
                else if (utypeid == 'H004')
                {
                    UnitAddItemByIdSwapped('I004', u);
                }
                else if (utypeid == 'H00P')
                {
                    UnitAddItemByIdSwapped('I024', u);
                }
                else if (utypeid == 'H00A')
                {
                    UnitAddItemByIdSwapped('I009', u);
                }
                else if (utypeid == 'H005')
                {
                    UnitAddItemByIdSwapped('I005', u);
                }
                else if (utypeid == 'H00T')
                {
                    UnitAddItemByIdSwapped('I026', u);
                }
                else if (utypeid == 'H00U')
                {
                    UnitAddItemByIdSwapped('I027', u);
                }
                else if (utypeid == 'H00V')
                {
                    UnitAddItemByIdSwapped('I028', u);
                }
                else if (utypeid == 'H00W')
                {
                    UnitAddItemByIdSwapped('I029', u);
                }
                else if (utypeid == 'H00X')
                {
                    UnitAddItemByIdSwapped('I02A', u);
                }
                else if (utypeid == 'H006')
                {
                    UnitAddItemByIdSwapped('I006', u);
                }
                else if (utypeid == 'H007')
                {
                    UnitAddItemByIdSwapped('I007', u);
                }
                else if (utypeid == 'H00H')
                {
                    UnitAddItemByIdSwapped('I00G', u);
                }
                else if (utypeid == 'H00Y')
                {
                    UnitAddItemByIdSwapped('I02B', u);
                }
                else if (utypeid == 'H00N')
                {
                    UnitAddItemByIdSwapped('I022', u);
                }
                else if (utypeid == 'H008')
                {
                    UnitAddItemByIdSwapped('I008', u);
                }
                else if (utypeid == 'H00G')
                {
                    UnitAddItemByIdSwapped('I00F', u);
                }
                else if (utypeid == 'H00I')
                {
                    UnitAddItemByIdSwapped('I01X', u);
                }
                else if (utypeid == 'H00J')
                {
                    UnitAddItemByIdSwapped('I01Y', u);
                }
                else if (utypeid == 'H00C')
                {
                    UnitAddItemByIdSwapped('I00B', u);
                }
                else if (utypeid == 'H00M')
                {
                    UnitAddItemByIdSwapped('I021', u);
                }
                else if (utypeid == 'H00Z')
                {
                    UnitAddItemByIdSwapped('I02P', u);
                }
                else if (utypeid == 'H00D')
                {
                    UnitAddItemByIdSwapped('I00C', u);
                }
                else if (utypeid == 'H00F')
                {
                    UnitAddItemByIdSwapped('I00E', u);
                }
                else if (utypeid == 'H00K')
                {
                    UnitAddItemByIdSwapped('I01Z', u);
                }
                else if (utypeid == 'H00B')
                {
                    UnitAddItemByIdSwapped('I00A', u);
                }
                else if (utypeid == 'H003')
                {
                    UnitAddItemByIdSwapped('I003', u);
                }
                else if (utypeid == 'H00E')
                {
                    UnitAddItemByIdSwapped('I00D', u);
                }
                else if (utypeid == 'H010')
                {
                    UnitAddItemByIdSwapped('I02Q', u);
                }
                else if (utypeid == 'H011')
                {
                    UnitAddItemByIdSwapped('I02R', u);
                }
                else if (utypeid == 'H00O')
                {
                    UnitAddItemByIdSwapped('I023', u);
                }
                else if (utypeid == 'H00Q')
                {
                    UnitAddItemByIdSwapped('I025', u);
                }
                else if (utypeid == 'H012')
                {
                    UnitAddItemByIdSwapped('I02T', u);
                }
                else if (utypeid == 'H013')
                {
                    UnitAddItemByIdSwapped('I02U', u);
                }
                else if (utypeid == 'H014')
                {
                    UnitAddItemByIdSwapped('I043', u);
                }
                else if (utypeid == 'H015')
                {
                    UnitAddItemByIdSwapped('I044', u);
                }
                else if (utypeid == 'H016')
                {
                    UnitAddItemByIdSwapped('I00Q', u);
                }
                else if (utypeid == 'H017')
                {
                    UnitAddItemByIdSwapped('I00W', u);
                }
                else if (utypeid == 'H018')
                {
                    UnitAddItemByIdSwapped('I00Y', u);
                }
                else if (utypeid == 'H019')
                {
                    UnitAddItemByIdSwapped('I010', u);
                }
                else if (utypeid == 'H01A')
                {
                    UnitAddItemByIdSwapped('I011', u);
                }
            }
        }

        if (itemtypeid == 'I020')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 30, 70);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A04J'), true, true);
            EnableAbility(GetUnitAbility(u, 'A04K'), true, true);
        }
        else if (itemtypeid == 'I001')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A006'), true, true);
            EnableAbility(GetUnitAbility(u, 'A007'), true, true);
        }
        else if (itemtypeid == 'I004')
        {
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A00P'), true, true);
            EnableAbility(GetUnitAbility(u, 'A00Q'), true, true);
        }
        else if (itemtypeid == 'I024')
        {
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A05G'), true, true);
            EnableAbility(GetUnitAbility(u, 'A05H'), true, true);
        }
        else if (itemtypeid == 'I009')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 70, 30, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A01Z'), true, true);
            EnableAbility(GetUnitAbility(u, 'A020'), true, true);
        }
        else if (itemtypeid == 'I005')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A00Z'), true, true);
            EnableAbility(GetUnitAbility(u, 'A010'), true, true);
        }
        else if (itemtypeid == 'I026')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A05R'), true, true);
            EnableAbility(GetUnitAbility(u, 'A05S'), true, true);
        }
        else if (itemtypeid == 'I027')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A05Y'), true, true);
            EnableAbility(GetUnitAbility(u, 'A05Z'), true, true);
        }
        else if (itemtypeid == 'I028')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A065'), true, true);
            EnableAbility(GetUnitAbility(u, 'A067'), true, true);
        }
        else if (itemtypeid == 'I029')
        {
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 70, 30, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A06E'), true, true);
            EnableAbility(GetUnitAbility(u, 'A06F'), true, true);
        }
        else if (itemtypeid == 'I02A')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 30, 70);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A06M'), true, true);
            EnableAbility(GetUnitAbility(u, 'A06N'), true, true);
        }
        else if (itemtypeid == 'I006')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 70, 30, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A016'), true, true);
            EnableAbility(GetUnitAbility(u, 'A017'), true, true);
        }
        else if (itemtypeid == 'I007')
        {
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 70, 30, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A01D'), true, true);
            EnableAbility(GetUnitAbility(u, 'A01F'), true, true);
        }
        else if (itemtypeid == 'I00G')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 70, 30, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A03E'), true, true);
            EnableAbility(GetUnitAbility(u, 'A03F'), true, true);
        }
        else if (itemtypeid == 'I02B')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A06S'), true, true);
            EnableAbility(GetUnitAbility(u, 'A06T'), true, true);
        }
        else if (itemtypeid == 'I022')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A04X'), true, true);
            EnableAbility(GetUnitAbility(u, 'A052'), true, true);
        }
        else if (itemtypeid == 'I008')
        {
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A01L'), true, true);
            EnableAbility(GetUnitAbility(u, 'A01M'), true, true);
        }
        else if (itemtypeid == 'I00F')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A037'), true, true);
            EnableAbility(GetUnitAbility(u, 'A038'), true, true);
        }
        else if (itemtypeid == 'I01X')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 70, 30, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A03Y'), true, true);
            EnableAbility(GetUnitAbility(u, 'A03Z'), true, true);
        }
        else if (itemtypeid == 'I01Y')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 30, 70);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A045'), true, true);
            EnableAbility(GetUnitAbility(u, 'A046'), true, true);
        }
        else if (itemtypeid == 'I00B')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A02E'), true, true);
            EnableAbility(GetUnitAbility(u, 'A02F'), true, true);
        }
        else if (itemtypeid == 'I021')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 30, 70);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A04Q'), true, true);
            EnableAbility(GetUnitAbility(u, 'A04R'), true, true);
        }
        else if (itemtypeid == 'I02P')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 70, 30, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A07G'), true, true);
            EnableAbility(GetUnitAbility(u, 'A07H'), true, true);
        }
        else if (itemtypeid == 'I00C')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A02L'), true, true);
            EnableAbility(GetUnitAbility(u, 'A02M'), true, true);
        }
        else if (itemtypeid == 'I00E')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 30, 70);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A030'), true, true);
            EnableAbility(GetUnitAbility(u, 'A031'), true, true);
        }
        else if (itemtypeid == 'I01Z')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A04C'), true, true);
            EnableAbility(GetUnitAbility(u, 'A04D'), true, true);
        }
        else if (itemtypeid == 'I00A')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A027'), true, true);
            EnableAbility(GetUnitAbility(u, 'A028'), true, true);
        }
        else if (itemtypeid == 'I003')
        {
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 30, 70);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A00G'), true, true);
            EnableAbility(GetUnitAbility(u, 'A00H'), true, true);
        }
        else if (itemtypeid == 'I00D')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A02T'), true, true);
            EnableAbility(GetUnitAbility(u, 'A02U'), true, true);
        }
        else if (itemtypeid == 'I02Q')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 70, 30, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A074'), true, true);
            EnableAbility(GetUnitAbility(u, 'A075'), true, true);
        }
        else if (itemtypeid == 'I02R')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A07D'), true, true);
            EnableAbility(GetUnitAbility(u, 'A07E'), true, true);
        }
        else if (itemtypeid == 'I023')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A059'), true, true);
            EnableAbility(GetUnitAbility(u, 'A05A'), true, true);
        }
        else if (itemtypeid == 'I025')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A05N'), true, true);
            EnableAbility(GetUnitAbility(u, 'A07F'), true, true);
        }
        else if (itemtypeid == 'I02T')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A07O'), true, true);
            EnableAbility(GetUnitAbility(u, 'A07P'), true, true);
        }
        else if (itemtypeid == 'I02U')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A07Z'), true, true);
            EnableAbility(GetUnitAbility(u, 'A080'), true, true);
        }
        else if (itemtypeid == 'I043')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 30, 70);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A08D'), true, true);
            EnableAbility(GetUnitAbility(u, 'A08E'), true, true);
        }
        else if (itemtypeid == 'I044')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A08L'), true, true);
            EnableAbility(GetUnitAbility(u, 'A08M'), true, true);
        }
        else if (itemtypeid == 'I00Q')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A084'), true, true);
            EnableAbility(GetUnitAbility(u, 'A085'), true, true);
        }
        else if (itemtypeid == 'I00W')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 70, 30, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A08R'), true, true);
            EnableAbility(GetUnitAbility(u, 'A08S'), true, true);
        }
        else if (itemtypeid == 'I00Y')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 70, 30, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A08Y'), true, true);
            EnableAbility(GetUnitAbility(u, 'A08Z'), true, true);
        }
        else if (itemtypeid == 'I010')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 70, 30);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            //EnableAbility(GetUnitAbility(u, 'A08Y'), true, true);
            //EnableAbility(GetUnitAbility(u, 'A08Z'), true, true);
        }
        else if (itemtypeid == 'I011')
        {
            SoundStart(LoadStr(GameHT, utypeid, StringHash("10ksound")));
            Effect("Abilities\\Spells\\Human\\Resurrect\\Resurrecttarget.mdx", GetUnitX(u), GetUnitY(u), .0f, randomAngle(), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            UnitAddStat(u, 30, 30, 70);
            UnitAddBonus(u, 10.f, "hpr");
            UnitAddBonus(u, 5.f, "mpr");
            EnableAbility(GetUnitAbility(u, 'A097'), true, true);
            EnableAbility(GetUnitAbility(u, 'A098'), true, true);
        }

        EnumUnitAbilities(u, nil, function()
        {
            ability ab = GetEnumAbility();
            unit u = GetAbilityOwner(ab);
            int alvl = GetAbilityLevel(ab);
            float cd = .0f;
            float cur = .0f;

            if (GetAbilityTypeId(ab) != 'A03N' && GetAbilityTypeId(ab) != 'A03O' && GetAbilityTypeId(ab) != 'A043')
            {
                for (int i = 0; i < GetAbilityIntegerField(ab, ABILITY_IF_LEVELS); i++)
                {
                    cd = GetAbilityBaseRealLevelFieldById(GetAbilityTypeId(ab), ABILITY_RLF_COOLDOWN, i);
                    cur = cd * (1.f - LoadReal(GameHT, GetHandleId(u), StringHash("CDRUNIT")));
                    if (cd > .0f)
                    {
                        if (cd != cur && cur > .0f)
                        {
                            SetAbilityRealLevelField(ab, ABILITY_RLF_COOLDOWN, i, cur);
                        }
                    }
                }
            }
        });
    });
}

void UnitAddBonus(unit u, float val, string type)
{
    ability ab = nil;
    int int1 = 0;
    float float1 = .0f;

    type = StringCase(type, false);

    if (type == "hp")
    {
        float1 = GetUnitCurrentLife(u) / GetUnitMaxLife(u);
        SetUnitMaxLife(u, GetUnitMaxLife(u) + val);
        SetUnitCurrentLife(u, GetUnitMaxLife(u) * float1);
    }

    if (type == "hpr")
    {
        SetUnitLifeRegen(u, GetUnitLifeRegen(u) + val);
    }

    if (type == "mpr")
    {
        SetUnitManaRegen(u, GetUnitManaRegen(u) + val);
    }

    if (type == "atk")
    {
        if (GetUnitAbilityLevel(u, 'AItg') == 0)
        {
            UnitAddAbility(u, 'AItg');
            UnitMakeAbilityPermanent(u, true, 'AItg');
        }

        ab = GetUnitAbility(u, 'AItg');
        int1 = GetAbilityIntegerLevelField(ab, ABILITY_ILF_ATTACK_BONUS, 0);
        SetAbilityIntegerLevelField(ab, ABILITY_ILF_ATTACK_BONUS, 0, int1 + R2I(val));
    }

    if (type == "def")
    {
        if (GetUnitAbilityLevel(u, 'AId1') == 0)
        {
            UnitAddAbility(u, 'AId1');
            UnitMakeAbilityPermanent(u, true, 'AId1');
        }

        ab = GetUnitAbility(u, 'AId1');
        int1 = GetAbilityIntegerLevelField(ab, ABILITY_ILF_DEFENSE_BONUS_IDEF, 0);
        SetAbilityIntegerLevelField(ab, ABILITY_ILF_DEFENSE_BONUS_IDEF, 0, int1 + R2I(val));
    }

    if (type == "aspd")
    {
        if (GetUnitAbilityLevel(u, 'AIsx') == 0)
        {
            UnitAddAbility(u, 'AIsx');
            UnitMakeAbilityPermanent(u, true, 'AIsx');
        }

        ab = GetUnitAbility(u, 'AIsx');
        float1 = GetAbilityRealLevelField(ab, ABILITY_RLF_ATTACK_SPEED_INCREASE_ISX1, 0);
        SetAbilityRealLevelField(ab, ABILITY_RLF_ATTACK_SPEED_INCREASE_ISX1, 0, float1 + val);
    }

    if (type == "ms")
    {
        if (GetUnitAbilityLevel(u, 'AIms') == 0)
        {
            UnitAddAbility(u, 'AIms');
            UnitMakeAbilityPermanent(u, true, 'AIms');
        }

        ab = GetUnitAbility(u, 'AIms');
        int1 = GetAbilityIntegerLevelField(ab, ABILITY_ILF_MOVEMENT_SPEED_BONUS, 0);
        SetAbilityIntegerLevelField(ab, ABILITY_ILF_MOVEMENT_SPEED_BONUS, 0, int1 + R2I(val));
        IncUnitAbilityLevel(u, 'AIms');
        DecUnitAbilityLevel(u, 'AIms');
    }
}

void UnitAddStat(unit u, int str, int agi, int intl)
{
    ability ab = nil;
    int int1 = 0;
    float float1 = .0f;

    if (GetUnitAbilityLevel(u, 'AIx3') == 0)
    {
        UnitAddAbility(u, 'AIx3');
        UnitMakeAbilityPermanent(u, true, 'AIx3');
    }

    ab = GetUnitAbility(u, 'AIx3');
    int1 = GetAbilityIntegerLevelField(ab, ABILITY_ILF_STRENGTH_BONUS_ISTR, 0);
    SetAbilityIntegerLevelField(ab, ABILITY_ILF_STRENGTH_BONUS_ISTR, 0, int1 + str);

    int1 = GetAbilityIntegerLevelField(ab, ABILITY_ILF_AGILITY_BONUS, 0);
    SetAbilityIntegerLevelField(ab, ABILITY_ILF_AGILITY_BONUS, 0, int1 + agi);

    int1 = GetAbilityIntegerLevelField(ab, ABILITY_ILF_INTELLIGENCE_BONUS, 0);
    SetAbilityIntegerLevelField(ab, ABILITY_ILF_INTELLIGENCE_BONUS, 0, int1 + intl);
}

float GetUnitTotalDamage(unit u, int index)
{
    return GetRandomReal(GetUnitMinimumDamageByIndex(u, index), GetUnitMaximumDamageByIndex(u, index));
}

bool UnitDamageTarget(unit u, unit t, float dmg, int DPSCount = 1)
{
    if (!IsUnitInvulnerable(t))
    {
        CODE_DAMAGE[GetUnitUserData(u)] = true;
        
        UnitDamageTarget(u, t, dmg / DPSCount, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, nil);
        CODE_DAMAGE[GetUnitUserData(u)] = false;
        return true;
    }
    else
    {
        return false;
    }
}

void DamageEvent()
{
    trigger t = CreateTrigger();
    for (int i = 0; i <= PLAYER_NEUTRAL_PASSIVE; i++)
    {
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_DAMAGED, nil);
    }
    TriggerAddAction(t, function()
    {
        unit u = GetEventDamageSource();
        unit t = GetTriggerUnit();
        float dmg = GetEventDamage();
        int uid = GetUnitUserData(u);
        int tid = GetUnitUserData(t);
        player p1 = GetOwningPlayer(u);
        player p2 = GetOwningPlayer(t);
        int pid1 = GetPlayerId(p1);
        int pid2 = GetPlayerId(p2);
        float vdmg = dmg;
        float float1 = .0f;
        int hid = 0;
        timer tmr = nil;
        float res = .0f;
        float spdmg = .0f;
        ability ab = nil;
        texttag tt = nil;
        bool isAtk = GetEventIsAttack();
        bool isCode = CODE_DAMAGE[uid] && !CODE_DAMAGE_2[uid];
        buff buf = nil;

        if (vdmg > .0f && (IsUnitAlly(t, GetOwningPlayer(u)) || TOUR_BOSS))
        {
            vdmg = .0f;
            SetEventDamage(vdmg);
        }

        if (vdmg > GetUnitMaxLife(t) * 0.09 && isCode && (UnitHasItemOfTypeBJ(u, 'I02H') || UnitHasItemOfTypeBJ(u, 'I02M') || UnitHasItemOfTypeBJ(u, 'I02S')))
        {
            if (RainTimer[tid] == nil) { RainTimer[tid] = CreateTimer(); }
            tmr = RainTimer[tid];
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 0, u);
            if (UnitHasItemOfTypeBJ(u, 'I02S')) 
            {
                SaveReal(GameHT, hid, 0, 80);
            }
            else if (UnitHasItemOfTypeBJ(u, 'I02M'))
            {
                SaveReal(GameHT, hid, 0, 60);
            }
            else
            {
                SaveReal(GameHT, hid, 0, 40);
            }
            buf = GetUnitBuff(t, 'B00A');
            if (buf != nil)
            {
                if (LoadInteger(GameHT, hid, 0) < 8) { SaveInteger(GameHT, hid, 0, LoadInteger(GameHT, hid, 0) + 1); }
                SetBuffRemainingDuration(buf, 5);
            }
            if (!RainBool[tid])
            {
                RainBool[tid] = true;
                buf = CreateBuff('B00A');
                UnitAddBuff(t, buf);
                SetBuffRemainingDuration(buf, 5);
                SaveUnitHandle(GameHT, hid, 1, t);
                SaveInteger(GameHT, hid, 0, 1);
                TimerStart(tmr, 0.1, true, function()
                {
                    timer tmr = GetExpiredTimer();
                    int hid = GetHandleId(tmr);
                    unit u = LoadUnitHandle(GameHT, hid, 0);
                    unit t = LoadUnitHandle(GameHT, hid, 1);
                    int tid = GetUnitUserData(t);
                    buff buf = GetUnitBuff(t, 'B00A');

                    if (IsUnitAlive(t) && GetUnitAbilityLevel(t, 'B00A') > 0)
                    {
                        if (GetBuffLevel(buf) != LoadInteger(GameHT, hid, 0)) { SetBuffLevel(buf, LoadInteger(GameHT, hid, 0)); }
                        CODE_DAMAGE_2[GetUnitUserData(u)] = true;
                        UnitDamageTarget(u, t, LoadReal(GameHT, hid, 0) * LoadInteger(GameHT, hid, 0), 10);
                        CODE_DAMAGE_2[GetUnitUserData(u)] = false;
                    }
                    else
                    {
                        RainBool[tid] = false;
                        FlushChildHashtable(GameHT, hid);
                        PauseTimer(tmr);
                    }
                });
            }
        }

        if (vdmg > .0f && isCode && GetEventAttackType() == ATTACK_TYPE_NORMAL && p2 != Player(3) && p2 != Player(7) && p2 != Player(11))
        {
            res = LoadReal(GameHT, GetHandleId(t), StringHash("MAGRESUNIT"));
            spdmg = LoadReal(GameHT, GetHandleId(t), StringHash("SPDMGUNIT"));
            vdmg *= (1.f - BASE_RESIST - res) * (1.f + spdmg);
            SetEventDamage(vdmg);
        }

        if (vdmg > .0f && isCode && GetUnitAbilityLevel(t, 'A08V') > 0)
        {
            if (GetRandomInt(1, 100) <= 15 && !IsAbilityOnCooldown(GetUnitAbility(t, 'A08V')))
            {
                Effect("Esdeathsfx1.mdx", GetUnitX(t), GetUnitY(t), 50, randomAngle(), 0, 0, 2, 1.5, 255, 255, 255, 255);
                StartAbilityCooldown(GetUnitAbility(t, 'A08V'), 40);
                vdmg -= GetUnitAbilityLevel(t, 'A08V') * GetHeroStr(t, true);
                SetEventDamage(vdmg);
            }
        }

        if (vdmg > .0f && isCode && GetUnitAbilityLevel(t, 'B00F') > 0 && GetEventAttackType() == ATTACK_TYPE_NORMAL)
        {
            float1 = LoadReal(GameHT, tid, StringHash("CloudShield"));
            if (float1 > vdmg)
            {
                SaveReal(GameHT, tid, StringHash("CloudShield"), float1 - vdmg);
                vdmg = .0f;
                SetEventDamage(vdmg);
            }
            else 
            {
                vdmg -= float1;
                SetEventDamage(vdmg);
                SaveReal(GameHT, tid, StringHash("CloudShield"), .0f);
                UnitRemoveAbility(t, 'B00F');
            }
        }

        if (vdmg > GetUnitMaxLife(t) * 0.12 && isCode && !IsAbilityOnCooldown(GetUnitAbility(t, 'A096')) && (UnitHasItemOfTypeBJ(t, 'I01Q') || UnitHasItemOfTypeBJ(t, 'I01S') || UnitHasItemOfTypeBJ(t, 'I01U')))
        {
            StartAbilityCooldown(GetUnitAbility(t, 'A096'), 9);
            UnitAddAbility(t, 'A095');
            ab = GetUnitAbility(t, 'A095');
            if (UnitHasItemOfTypeBJ(t, 'I01U'))
            {
                SetAbilityRealLevelField(ab, ABILITY_RLF_DAMAGE_PER_TARGET_OCL1, 0, vdmg * 0.53);
            }
            else if (UnitHasItemOfTypeBJ(t, 'I01S'))
            {
                SetAbilityRealLevelField(ab, ABILITY_RLF_DAMAGE_PER_TARGET_OCL1, 0, vdmg * 0.45);
            }
            else
            {
                SetAbilityRealLevelField(ab, ABILITY_RLF_DAMAGE_PER_TARGET_OCL1, 0, vdmg * 0.37);
            }
            CastAbilityTarget(ab, u);
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 0, t);
            TimerStart(tmr, 6, false, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit t = LoadUnitHandle(GameHT, hid, 0);

                UnitRemoveAbility(t, 'A095');
                FlushChildHashtable(GameHT, hid);
                DestroyTimer(tmr);
            });
        }

        if (vdmg > .0f && isCode && (UnitHasItemOfTypeBJ(t, 'I02Z') || UnitHasItemOfTypeBJ(t, 'I030') || UnitHasItemOfTypeBJ(t, 'I031')))
        {
            if (UnitHasItemOfTypeBJ(t, 'I031') && GetUnitCurrentMana(t) > vdmg / 1.3)
            {
                SetUnitCurrentMana(t, GetUnitCurrentMana(t) - vdmg / 1.3);
                vdmg *= 0.79;
                SetEventDamage(vdmg);
            }
            else if (UnitHasItemOfTypeBJ(t, 'I030') && GetUnitCurrentMana(t) > vdmg)
            {
                SetUnitCurrentMana(t, GetUnitCurrentMana(t) - vdmg);
                vdmg *= 0.83;
                SetEventDamage(vdmg);
            }
            else if (UnitHasItemOfTypeBJ(t, 'I031') && GetUnitCurrentMana(t) > vdmg / 0.8)
            {
                SetUnitCurrentMana(t, GetUnitCurrentMana(t) - vdmg / 0.8);
                vdmg *= 0.87;
                SetEventDamage(vdmg);
            }
        }

        if (vdmg > .0f && IsUnitHero(t) && IsPlaying[pid1])
        {
            hid = GetHandleId(t);
            float1 = LoadReal(GameHT, hid, StringHash("Assist_" + I2S(pid1)));
            SaveReal(GameHT, hid, StringHash("Assist_" + I2S(pid1)), float1 + vdmg);
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'cdmg', vdmg);
            TimerStart(tmr, 12.f, false, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit u = LoadUnitHandle(GameHT, hid, 'cstr');
                unit t = LoadUnitHandle(GameHT, hid, 'trgt');
                player p1 = GetOwningPlayer(u);
                player p2 = GetOwningPlayer(t);
                int pid1 = GetPlayerId(p1);
                int pid2 = GetPlayerId(p2);
                float sdmg = .0f;
                float vdmg = LoadReal(GameHT, hid, 'cdmg');

                hid = GetHandleId(t);
                sdmg = LoadReal(GameHT, hid, StringHash("Assist_" + I2S(pid1)));
                SaveReal(GameHT, hid, StringHash("Assist_" + I2S(pid1)), sdmg - vdmg);
                hid = GetHandleId(tmr);
                FlushChildHashtable(GameHT, hid);
                DestroyTimer(tmr);
            });
        }

        if (vdmg > .0f && MyHero[pid1] != nil)
        {
            hid = GetHandleId(u);
            if (vdmg > GetUnitCurrentLife(t)) { vdmg = GetUnitCurrentLife(t); }
            SaveReal(GameHT, hid, StringHash("DamageDealt"), LoadReal(GameHT, hid, StringHash("DamageDealt")) + vdmg);
        }

        if (vdmg > .0f && vdmg < GetUnitCurrentLife(t) && IsPlaying[pid1] && DMGTEXT[pid1])
        {
            if (p1 == GetLocalPlayer() && !HaveSavedHandle(GameHT, pid1, StringHash("DMGTEXT_" + I2S(GetHandleId(t)))))
            {
                tt = CreateTextTag();
                SetTextTagPermanent(tt, false);
                SetTextTagText(tt, "|cffE62121" + I2S(R2I(vdmg)), 0.02f);
                SetTextTagPos(tt, GetUnitX(t), GetUnitY(t), GetUnitStatbarHeight(u) + 30);
                SaveTextTagHandle(GameHT, pid1, StringHash("DMGTEXT_" + I2S(GetHandleId(t))), tt);
            }
            tmr = LoadTimerHandle(GameHT, pid1, StringHash("DMGTIMERTEXT_" + I2S(GetHandleId(t))));
            if (tmr == nil) { tmr = CreateTimer(); }
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveReal(GameHT, hid, 'life', 3.f);
            SaveReal(GameHT, hid, 'dmg', LoadReal(GameHT, hid, 'dmg') + vdmg);
            if (!HaveSavedHandle(GameHT, pid1, StringHash("DMGTIMERTEXT_" + I2S(GetHandleId(t)))))
            {
                SaveTimerHandle(GameHT, pid1, StringHash("DMGTIMERTEXT_" + I2S(GetHandleId(t))), tmr);
                TimerStart(tmr, 0.05, true, @DamageTxt);
            }
        }
    });
}

void DamageTxt()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit u = LoadUnitHandle(GameHT, hid, 'cstr');
    unit t = LoadUnitHandle(GameHT, hid, 'trgt');
    int pid = GetPlayerId(GetOwningPlayer(u));
    texttag tt = LoadTextTagHandle(GameHT, pid, StringHash("DMGTEXT_" + I2S(GetHandleId(t))));
    float life = LoadReal(GameHT, hid, 'life');
    float dmg = LoadReal(GameHT, hid, 'dmg');

    life -= 0.05f;
    SaveReal(GameHT, hid, 'life', life);
    SetTextTagText(tt, "|cffE62121" + I2S(R2I(dmg)), 0.02f);
    SetTextTagPos(tt, GetUnitX(t), GetUnitY(t), GetUnitStatbarHeight(u) + 30);
    SetTextTagVisibility(tt, IsUnitVisible(t, GetLocalPlayer()));

    if (life <= .0f || !DMGTEXT[GetPlayerId(GetOwningPlayer(u))] || !IsUnitAlive(t))
    {
        if (tt != nil) 
        { 
            DestroyTextTag(tt); 
            RemoveSavedHandle(GameHT, pid, StringHash("DMGTEXT_" + I2S(GetHandleId(t)))); 
        }
        RemoveSavedHandle(GameHT, pid, StringHash("DMGTIMERTEXT_" + I2S(GetHandleId(t))));
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void CC_Unit(unit t, string type, float time)
{
    int buffId = 0;
    float remainTime = 0;
    bool hasBuff = false;
    int uid = GetUnitUserData(t);
    buff buf = nil;
    timer tmr = nil;
    int hid = 0;
    float float1 = .0f;

    type = StringCase(type, false);

    if (type == "stun") { buffId = 'BPSE'; }
    if (type == "silence") { buffId = 'B002'; }
    if (type == "slow") { buffId = 'B003'; }
    if (type == "disarm") { buffId = 'B00G'; }

    if (buffId == 0) { return; }

    hasBuff = GetUnitAbilityLevel(t, buffId) > 0;
    if (!hasBuff)
    {
        buf = CreateBuff(buffId);

        if (buffId == 'B002')
        {
            UnitApplySilence(t, true);
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveInteger(GameHT, hid, 'buf+', buffId);
            TimerStart(tmr, 0.1f, true, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit u = LoadUnitHandle(GameHT, hid, 'trgt');
                int buffId = LoadInteger(GameHT, hid, 'buf+');
                int uid = GetUnitUserData(u);

                if (GetUnitAbilityLevel(u, buffId) == 0)
                {
                    SetUnitMoveSpeed(u, GetUnitDefaultMoveSpeed(u));
                    UnitApplySilence(u, false);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
            });
        }

        if (buffId == 'B003')
        {
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'trgt', t);
            SaveInteger(GameHT, hid, 'buf+', buffId);
            TimerStart(tmr, 0.1f, true, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit u = LoadUnitHandle(GameHT, hid, 'trgt');
                int buffId = LoadInteger(GameHT, hid, 'buf+');
                int uid = GetUnitUserData(u);

                if (GetUnitAbilityLevel(u, buffId) == 0)
                {
                    SetUnitMoveSpeed(u, GetUnitDefaultMoveSpeed(u));
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
            });
        }

        if (buffId == 'B00G') { SetBuffIntegerField(buf, ABILITY_ILF_ATTACKS_PREVENTED, 3); }

        UnitAddBuff(t, buf);
    }

    buf = GetUnitBuff(t, buffId);
    remainTime = GetBuffRemainingDuration(buf);

    if ((buffId == 'B002' || buffId == 'B003') && CC_SLOW_EFFECT > 0)
    {
        float1 = GetUnitDefaultMoveSpeed(t) * (1 - CC_SLOW_EFFECT);
        if (float1 < GetUnitMoveSpeed(t)) { SetUnitMoveSpeed(t, float1); }
        CC_SLOW_EFFECT = .0f;
    }

    if (!hasBuff) { SetBuffRemainingDuration(buf, time); }
    else
    {
        if (remainTime >= time) { time = remainTime; }
        SetBuffRemainingDuration(buf, time);
    }
}

void SetPauseUnit(unit u, bool flag)
{
    if (IsUnitPaused(u) && !flag) { PauseUnit(u, false); }
    if (!IsUnitPaused(u) && flag) { PauseUnit(u, true); }
}

void SetInvulUnit(unit u, bool flag)
{
    if (IsUnitInvulnerable(u) && !flag) { SetUnitInvulnerable(u, false); }
    if (!IsUnitInvulnerable(u) && flag) { SetUnitInvulnerable(u, true); }
}

float FromPixelX(float px)
{
    return px*0.8f/1920.f;
}

float FromPixelY(float px)
{
    return px*0.6f/1080.f;
}

float Alpha(float x1, float y1, float z1, float x2, float y2, float z2)
{
    return Rad2Deg(Atan((z2 - z1) / MathDistanceBetweenPoints(x1, y1, x2, y2)));
}

float Arcing(float originDistance, float travel, float arcValue)
{
    return Rad2Deg(Atan(((4*arcValue)*(2*travel - originDistance))/(originDistance*originDistance)));
}

float Angle(float x1, float y1, float x2, float y2)
{
    return MathAngleBetweenPoints(x1, y1, x2, y2);
}

float Distance(float x1, float y1, float x2, float y2)
{
    return MathDistanceBetweenPoints(x1, y1, x2, y2);
}

float randomAngle()
{
    return GetRandomReal(1.f, 360.f);
}

float PolarX(float x, float dist, float angle)
{
    return MathPointProjectionX(x, angle, dist);
}

float PolarY(float y, float dist, float angle)
{
    return MathPointProjectionY(y, angle, dist);
}

float easeInSine(float num)
{
    return 1.f - Cos(num * (3.14159f / 2.f));
}

bool FilterGeneric(unit u, unit t)
{
    return IsUnitAlive(t) && !IsUnitTower(t) && IsUnitEnemy(t, GetOwningPlayer(u)) && !IsUnitInvulnerable(t);
}

void UnitHilang(unit u, bool flag, bool flag2 = false)
{
    if (flag)
    {
        if (!HaveSavedReal(GameHT, GetHandleId(u), StringHash("UnitHilang")))
        {
            SaveReal(GameHT, GetHandleId(u), StringHash("UnitHilang"), GetUnitStatbarHeight(u));
            SetUnitStatbarHeight(u, 9999);
            if (!flag2)
            {
                SetUnitVertexColor(u, 255, 255, 255, 0);
            }
        }
    }
    else
    {
        if (HaveSavedReal(GameHT, GetHandleId(u), StringHash("UnitHilang")))
        {
            SetUnitStatbarHeight(u, LoadReal(GameHT, GetHandleId(u), StringHash("UnitHilang")));
            RemoveSavedReal(GameHT, GetHandleId(u), StringHash("UnitHilang"));
            if (!flag2)
            {
                SetUnitVertexColor(u, 255, 255, 255, 255);
            }
        }
    }
}

void StopUnitTimed(unit u, float duration)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);

    IssueImmediateOrderById(u, 851972);

    SaveUnitHandle(GameHT, hid, 0, u);
    SaveReal(GameHT, hid, 0, duration);
    TimerStart(tmr, 0.02, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        unit u = LoadUnitHandle(GameHT, hid, 0);
        float duration = LoadReal(GameHT, hid, 0);

        duration -= 0.02;
        SaveReal(GameHT, hid, 0, duration);
        IssueImmediateOrderById(u, 851972);

        if (duration <= .0f || !IsUnitAlive(u))
        {
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    });
}

void Effect(string str, float x, float y, float h, float yaw, float pitch, float roll, float scale, float duration, int r, int g, int b, int a)
{
    timer tmr = nil;
    int hid = 0;

    dummy_effect = AddSpecialEffect(str, x, y);
    SetSpecialEffectHeight(dummy_effect, h);
    SetSpecialEffectOrientation(dummy_effect, yaw, pitch, roll);
    SetSpecialEffectScale(dummy_effect, scale);
    SetSpecialEffectVertexColour(dummy_effect, r, g, b, a);
    if (duration > 0)
    {
        tmr = CreateTimer();
        hid = GetHandleId(tmr);
        SaveEffectHandle(GameHT, hid, 0, dummy_effect);
        TimerStart(tmr, duration, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            effect e = LoadEffectHandle(GameHT, hid, 0);

            SetSpecialEffectVisible(e, false);
            DestroyEffect(e);
            FlushChildHashtable(GameHT, hid);
            DestroyTimer(tmr);
        });
    }
}

void SoundStart(string path)
{
    dummy_sound = CreateSound(path, false, false, false, 12700, 12700, "Default");
    SetSoundVolume(dummy_sound, 127);
    StartSound(dummy_sound);
}

bool IsPointReachable(float startX, float startY, float endX, float endY)
{
    if (ReachableUnit[0] == nil)
        ReachableUnit[0] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'h00S', .0f, .0f, 270.f);
    if (ReachableUnit[1] == nil)
        ReachableUnit[1] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'h00R', .0f, .0f, 270.f);
    
    SetUnitXY(ReachableUnit[0], startX, startY, 0);
    SetUnitXY(ReachableUnit[1], endX, endY, 0);
    IssueImmediateOrderById(ReachableUnit[0], 852072);
    if (GetUnitCurrentOrder(ReachableUnit[0]) == 852072)
    {
        DisableAbility(GetUnitAbility(ReachableUnit[0], 'Amov'), true, false);
        EnableAbility(GetUnitAbility(ReachableUnit[0], 'Amov'), true, false);
        return true;
    }
    else
    {
        return false;
    }
}

void PickItem()
{
    item it = GetEnumItem();

    if (IsItemVisible(it))
    {
        SetItemVisible(it, false);
        WalkableItemEx[WalkableItemCount] = it;
        WalkableItemCount++;
    }
}

bool IsPointWalkable(float x, float y)
{
    float x2 = .0f;
    float y2 = .0f;
    bool isWalkable = false;

    if (WalkableItem == nil)
    {
        WalkableItem = CreateItem('wtlg', .0f , .0f);
        SetItemVisible(WalkableItem, false);
    }
    MoveRectTo(WalkableRect, x, y);
    EnumItemsInRect(WalkableRect, nil, @PickItem);
    SetItemPosition(WalkableItem, x, y);
    x2 = GetItemX(WalkableItem);
    y2 = GetItemY(WalkableItem);
    SetItemVisible(WalkableItem, false);
    while (true)
    {
        if (WalkableItemCount == 0)
        {
            break;
        }
        WalkableItemCount--;
        SetItemVisible(WalkableItemEx[WalkableItemCount], true);
        WalkableItemEx[WalkableItemCount] = nil;
    }
    isWalkable = (x2 - x) * (x2 - x) + (y2 - y) * (y2 - y) <= 100;
    return isWalkable;
}

bool SetUnitXY(unit u, float x, float y, int path)
{
    if (path == 1)
    {
        if (!IsTerrainPathable(x, y, PATHING_TYPE_FLYABILITY))
        {
            SetUnitX(u, x); SetUnitY(u, y);
            return true;
        }
        return false;
    }
    if (path == 2)
    {
        if (IsPointWalkable(x, y))
        {
            SetUnitX(u, x); SetUnitY(u, y);
            return true;
        }
        return false;
    }
    SetUnitX(u, x); SetUnitY(u, y);
    return true;
}

void SetEffectXY(effect e, float x, float y, int path)
{
    if (path == 1)
    {
        if (!IsTerrainPathable(x, y, PATHING_TYPE_FLYABILITY))
        {
            SetSpecialEffectPosition(e, x, y);
        }
        return;
    }
    if (path == 2)
    {
        if (IsPointWalkable(x, y))
        {
            SetSpecialEffectPosition(e, x, y);
        }
        return;
    }
    SetSpecialEffectPosition(e, x, y);
}

void visionArea(player p, float radius, float duration, float x, float y)
{
    unit u = CreateUnit(p, 'h000', x, y, .0f);
    timer tmr = nil;
    int hid = 0;

    if (radius >= .0f && radius <= 2200.f)
    {
        SetUnitCurrentSight(u, radius);
    }
    if (duration > .0f)
    {
        tmr = CreateTimer();
        hid = GetHandleId(tmr);
        SaveUnitHandle(GameHT, hid, 0, u);
        TimerStart(tmr, duration, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            unit u = LoadUnitHandle(GameHT, hid, 0);

            RemoveUnit(u);
            FlushChildHashtable(GameHT, hid);
            DestroyTimer(tmr);
        });
    }
}

void CloneAnimate(unit u, int animId, float ts1, float ts2, float alpha, float dur1, float dur2, float interval, float offsetAnim = .0f)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);

    Effect(GetUnitModel(u), GetUnitX(u), GetUnitY(u), GetUnitFlyHeight(u), GetUnitFacing(u), GetUnitPitch(u), GetUnitRoll(u), GetUnitRealField(u, UNIT_RF_SCALING_VALUE), 0, 255, 255, 255, PercentTo255(alpha));
    SetSpecialEffectAnimationByIndex(dummy_effect, animId);
    SetSpecialEffectTimeScale(dummy_effect, ts1);
    SetSpecialEffectAnimationOffsetPercent(dummy_effect, offsetAnim);
    SaveEffectHandle(GameHT, hid, 0, dummy_effect);

    SaveReal(GameHT, hid, 1, ts2);
    SaveReal(GameHT, hid, 2, alpha);
    SaveReal(GameHT, hid, 3, dur1);
    SaveReal(GameHT, hid, 4, dur2);
    SaveReal(GameHT, hid, 5, interval);
    SaveReal(GameHT, hid, 6, alpha / (dur2 / interval));
    TimerStart(tmr, interval, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        effect e = LoadEffectHandle(GameHT, hid, 0);
        float ts = LoadReal(GameHT, hid, 1);
        float alpha = LoadReal(GameHT, hid, 2);
        float dur1 = LoadReal(GameHT, hid, 3);
        float dur2 = LoadReal(GameHT, hid, 4);
        float interval = LoadReal(GameHT, hid, 5);
        
        if (dur1 > .0f)
        {
            dur1 -= interval;
            SaveReal(GameHT, hid, 3, dur1);
        }
        else
        {
            if (!HaveSavedBoolean(GameHT, hid, 0))
            {
                SetSpecialEffectTimeScale(e, ts);
                SaveBoolean(GameHT, hid, 0, true);
            }
        }

        if (dur2 > .0f)
        {
            dur2 -= interval;
            SaveReal(GameHT, hid, 4, dur2);
            alpha -= LoadReal(GameHT, hid, 6);
            SaveReal(GameHT, hid, 2, alpha);
            SetSpecialEffectAlpha(e, PercentTo255(alpha));
        }
        else
        {
            if (!HaveSavedBoolean(GameHT, hid, 1))
            {
                SetSpecialEffectAlpha(e, 0);
                SaveBoolean(GameHT, hid, 1, true);
            }
        }

        if (dur1 <= .0f && dur2 <= .0f)
        {
            DestroyEffectTimed(e, .4f);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    });
}

void TransEffect(effect e, int alpha1, int alpha2, float duration, float interval)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);

    SaveEffectHandle(GameHT, hid, 0, e);
    SaveInteger(GameHT, hid, 0, alpha1);
    SaveInteger(GameHT, hid, 1, alpha2);
    SaveReal(GameHT, hid, 0, duration);
    SaveReal(GameHT, hid, 1, interval);
    TimerStart(tmr, interval, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        effect e = LoadEffectHandle(GameHT, hid, 0); 
        int alpha1 = LoadInteger(GameHT, hid, 0);
        int alpha2 = LoadInteger(GameHT, hid, 1);
        float dur = LoadReal(GameHT, hid, 0);
        float interval = LoadReal(GameHT, hid, 1);
        
        alpha1 -= alpha2;
        dur -= interval;
        SaveInteger(GameHT, hid, 0, alpha1);
        SaveReal(GameHT, hid, 0, dur);
        SetSpecialEffectAlpha(e, alpha1);

        if (dur <= .0f || e == nil)
        {
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    });
}

void AnimEffect(effect e, int anim, float duration)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);

    SaveEffectHandle(GameHT, hid, 0, e);
    SaveInteger(GameHT, hid, 0, anim);
    TimerStart(tmr, duration, false, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        effect e = LoadEffectHandle(GameHT, hid, 0);
        int anim = LoadInteger(GameHT, hid, 0);

        SetSpecialEffectAnimationByIndex(e, anim);
        FlushChildHashtable(GameHT, hid);
        DestroyTimer(tmr);
    });
}

void AnimEffect2(effect e, string anim, float duration)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);

    SaveEffectHandle(GameHT, hid, 0, e);
    SaveStr(GameHT, hid, 1, anim);
    TimerStart(tmr, duration, false, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        effect e = LoadEffectHandle(GameHT, hid, 0);
        string anim = LoadStr(GameHT, hid, 1);

        SetSpecialEffectAnimation(e, anim);
        FlushChildHashtable(GameHT, hid);
        DestroyTimer(tmr);
    });
}

void TimeScaleEffect(effect e, float timeScale, float duration)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);

    SaveEffectHandle(GameHT, hid, 0, e);
    SaveReal(GameHT, hid, 0, timeScale);
    TimerStart(tmr, duration, false, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        effect e = LoadEffectHandle(GameHT, hid, 0);
        float ts = LoadReal(GameHT, hid, 0);

        SetSpecialEffectTimeScale(e, ts);
        FlushChildHashtable(GameHT, hid);
        DestroyTimer(tmr);
    });
}

void DestroyEffectTimed(effect e, float duration)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);

    SaveEffectHandle(GameHT, hid, 0, e);
    TimerStart(tmr, duration, false, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        effect e = LoadEffectHandle(GameHT, hid, 0);

        if (e != nil)
        {
            SetSpecialEffectVisible(e, false);
            DestroyEffect(e);
        }
        FlushChildHashtable(GameHT, hid);
        DestroyTimer(tmr);
    });
}

void RushSlide(unit u, float angle, float dist, float time, float interval, bool path, bool ignorePath = false)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);

    SaveUnitHandle(GameHT, hid, 0, u);
    SaveReal(GameHT, hid, 'angl', angle);
    SaveReal(GameHT, hid, 'dist', dist);   
    SaveReal(GameHT, hid, 'val', interval);
    SaveReal(GameHT, hid, 'time', time);
    SaveBoolean(GameHT, hid, 'path', path);
    SaveBoolean(GameHT, hid, 'ipat', ignorePath);

    TimerStart(tmr, interval, true, function() 
    {

        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        unit u = LoadUnitHandle(GameHT, hid, 0);
        float angle = LoadReal(GameHT, hid, 'angl');
        float dist = LoadReal(GameHT, hid, 'dist');
        float interval = LoadReal(GameHT, hid, 'val');
        float time = LoadReal(GameHT, hid, 'time');
        float trvl = LoadReal(GameHT, hid, 'trvl');
        bool path = LoadBoolean(GameHT, hid, 'path');
        float easedTrvl = .0f;
        float easedTrvlPrev = LoadReal(GameHT, hid, 0);
        float currentDist = .0f;
        float x = .0f;
        float y = .0f;
        bool ignorePath = LoadBoolean(GameHT, hid, 'ipat');

        trvl = MathRealMin(trvl + (interval / time), 1.f);
        easedTrvl = easeInSine(trvl);
        currentDist = (easedTrvl - easedTrvlPrev) * dist;
        x = PolarX(GetUnitX(u), currentDist, angle);
        y = PolarY(GetUnitY(u), currentDist, angle);
        SaveReal(GameHT, hid, 'trvl', trvl);
        SaveReal(GameHT, hid, 0, easedTrvl);
        SaveReal(GameHT, hid, 1, LoadReal(GameHT, hid, 1) + currentDist);

        if (!ignorePath)
        {
            if (path) 
            {
                SetUnitXY(u, x, y, 2);
                IssueImmediateOrderById(u, 851972);
            } 
            else 
            {
                SetUnitXY(u, x, y, 1);
            }
        }
        else
        {
            SetUnitXY(u, x, y, 0);
        }

        if (trvl >= 1.f || !IsUnitAlive(u)) 
        {
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    });
}

void KnockupUnit(unit u, float airTime, float interval, float maxHeight)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);

    UnitAddAbility(u, 'Amrf');
    UnitRemoveAbility(u, 'Amrf');
    
    SaveUnitHandle(GameHT, hid, 'unit', u);
    SaveReal(GameHT, hid, 'air+', airTime);  
    SaveReal(GameHT, hid, 'int+', interval); 
    SaveReal(GameHT, hid, 'rate', maxHeight); 
    
    TimerStart(tmr, interval, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        unit u = LoadUnitHandle(GameHT, hid, 'unit');
        float totalAirTime = LoadReal(GameHT, hid, 'air+');
        float duration = LoadReal(GameHT, hid, 'dur+');
        float interval = LoadReal(GameHT, hid, 'int+');
        float maxHeight = LoadReal(GameHT, hid, 'rate');
        float flyHeight = .0f;
        float normalizedTime = .0f;
        float easedProgress = .0f;
        
        if (duration < totalAirTime && IsUnitAlive(u))
        {
            duration += interval; 
            SaveReal(GameHT, hid, 'dur+', duration); 
            IssueImmediateOrderById(u, 851972); 
            
            normalizedTime = MathRealMin(duration / totalAirTime, 1.f);
            if (normalizedTime < 0.5f) 
            {
                easedProgress = easeInSine(normalizedTime * 2.f); 
                flyHeight = maxHeight * (easedProgress - LoadReal(GameHT, hid, 0)); 
                SetUnitFlyHeight(u, GetUnitFlyHeight(u) + flyHeight, 0);
                SaveReal(GameHT, hid, 0, easedProgress);
            }
            else 
            {
                easedProgress = easeInSine((normalizedTime - 0.5f) * 2.f); 
                flyHeight = maxHeight * (easedProgress - LoadReal(GameHT, hid, 1)); 
                SetUnitFlyHeight(u, GetUnitFlyHeight(u) - flyHeight, 0);
                SaveReal(GameHT, hid, 1, easedProgress);
            }
        }
        else 
        {
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    });
}

void UnitUnStuck(unit u)
{
    float x = GetUnitX(u);
    float y = GetUnitY(u);
    float x2 = .0f;
    float y2 = .0f; 
    
    if (IsTerrainPathable(x, y, PATHING_TYPE_FLYABILITY) && !IsUnitInGroup(u, TOUR_GROUP))
    {
        for (int i = 1; i < 32; i++)
        {
            x2 = x - 64 * i;
            y2 = y;
            if (!IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) && x2 > 7168.f) { SetUnitXY(u, x2, y2, 2); break; }

            x2 = x;
            y2 = y + 64 * i;
            if (!IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) && y2 < -7168.f) { SetUnitXY(u, x2, y2, 2); break; }
            
            x2 = x - 64 * i;
            y2 = y + 64 * i;
            if (!IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) && x2 > 7168.f && y2 < -7168.f ) { SetUnitXY(u, x2, y2, 2); break; }

            x2 = x + 64 * i;
            y2 = y;
            if (!IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) && x2 < -9216.f) { SetUnitXY(u, x2, y2, 2); break; }

            x2 = x;
            y2 = y - 64 * i;
            if (!IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) && y2 > 9248.f) { SetUnitXY(u, x2, y2, 2); break; }

            x2 = x + 64 * i;
            y2 = y - 64 * i;
            if (!IsTerrainPathable(x2, y2, PATHING_TYPE_FLYABILITY) && x2 < -9216.f && y2 > 9248.f) { SetUnitXY(u, x2, y2, 2); break; }
        }
    }
}

bool BossFilter()
{
    return IsUnitEnemy(GetFilterUnit(), Player(12)) && IsUnitHero(GetFilterUnit()) && IsUnitAlive(GetFilterUnit()) && !IsUnitInvulnerable(GetFilterUnit());
}

void BossSkill1_1(unit t, float x, float y, float h)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);
    float a = Angle(x, y, GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float dist = .0f;
    float x2 = .0f;
    float y2 = .0f;

    SaveUnitHandle(GameHT, hid, 0, t);
    Effect("Gilcastersfx13.mdx", x, y, h + 50, a, .0f, .0f, 2.f, .0f, 255, 255, 255, 255);
    SaveEffectHandle(GameHT, hid, 'eff+', dummy_effect);
    a2 = randomAngle();
    x2 = PolarX(GetUnitX(t), GetRandomReal(100.f, 300.f), a2);
    y2 = PolarY(GetUnitY(t), GetRandomReal(100.f, 300.f), a2);
    dist = Distance(x, y, x2, y2);
    a2 = Angle(x, y, x2, y2);
    SaveReal(GameHT, hid, 'dist', dist);
    SaveReal(GameHT, hid, 'angl', a2);
    SaveReal(GameHT, hid, 'oriX', GetUnitX(t));
    SaveReal(GameHT, hid, 'oriY', GetUnitY(t));
    SaveReal(GameHT, hid, 'impX', x2);
    SaveReal(GameHT, hid, 'impY', y2);
    TimerStart(tmr, 0.02f, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        unit t = LoadUnitHandle(GameHT, hid, 0);
        effect e = LoadEffectHandle(GameHT, hid, 'eff+');
        float a = LoadReal(GameHT, hid, 'angl');
        float a2 = .0f;
        float dist = LoadReal(GameHT, hid, 'dist');
        float dist2 = .0f;
        float x = LoadReal(GameHT, hid, 'oriX');
        float y = LoadReal(GameHT, hid, 'oriY');
        float x2 = .0f;
        float y2 = .0f;
        unit d = nil;
        group g1 = nil;

        if (!IsUnitInRangeXY(t, x, y, 300))
        {
            a2 = randomAngle();
            x2 = PolarX(GetUnitX(t), GetRandomReal(100.f, 300.f), a2);
            y2 = PolarY(GetUnitY(t), GetRandomReal(100.f, 300.f), a2);
            dist = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), x2, y2);
            a2 = Angle(GetSpecialEffectX(e), GetSpecialEffectY(e), x2, y2);
            SaveReal(GameHT, hid, 'dist', dist);
            SaveReal(GameHT, hid, 'angl', a2);
            SaveReal(GameHT, hid, 'oriX', GetUnitX(t));
            SaveReal(GameHT, hid, 'oriY', GetUnitY(t));
            SaveReal(GameHT, hid, 'impX', x2);
            SaveReal(GameHT, hid, 'impY', y2);
        }

        x2 = LoadReal(GameHT, hid, 'impX');
        y2 = LoadReal(GameHT, hid, 'impY');
        dist2 = Distance(GetSpecialEffectX(e), GetSpecialEffectY(e), x2, y2);
        if (dist2 > 100.f && t != nil)
        {
            x2 = PolarX(GetSpecialEffectX(e), dist / 15.f, a);
            y2 = PolarY(GetSpecialEffectY(e), dist / 15.f, a);
            SetEffectXY(e, x2, y2, 0);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
        }
        else
        {
            DestroyEffectTimed(e, .01f);
            Effect("Gilcastersfx13.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectHeight(e), randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            g1 = CreateGroup();
            GroupEnumUnitsInRange(g1, GetUnitX(t), GetUnitY(t), 500.f, nil);
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                d = GroupGetUnitByIndex(g1, i);
                if (FilterGeneric(BOSS_GILGAMESH, d))
                {
                    UnitDamageTarget(BOSS_GILGAMESH, d, 1300, 9);
                }
            }
            DestroyGroup(g1);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    });
}

void BossSkill1()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit t = LoadUnitHandle(GameHT, hid, 0);
    int count = LoadInteger(GameHT, hid, 'coun');
    effect e = nil;
    float a = Angle(GetUnitX(BOSS_GILGAMESH), GetUnitY(BOSS_GILGAMESH), GetUnitX(t), GetUnitY(t));
    float a2 = .0f;
    float dist = .0f;
    float x = .0f; 
    float x2 = .0f;
    float y = .0f; 
    float y2 = .0f;
    int int1 = 0;
    float float1 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 170)
    {
        SetPauseUnit(BOSS_GILGAMESH, true);
        SetInvulUnit(BOSS_GILGAMESH, true);
    }

    if (count == 1)
    {
        SoundStart("boss1_q.mp3");
        SetUnitFacingEx(BOSS_GILGAMESH, a, true);
        SetUnitAnimationByIndex(BOSS_GILGAMESH, 6);
        SetUnitTimeScale(BOSS_GILGAMESH, 0.8f);
        x = GetUnitX(BOSS_GILGAMESH);
        y = GetUnitY(BOSS_GILGAMESH);
        Effect("Gilcastersfx3.mdx", x, y, 100.f, randomAngle(), .0f, .0f, 1.2f, 4.f, 255, 255, 255, 255);
        Effect("Gilcastersfx15.mdx", x, y, .0f, randomAngle(), .0f, .0f, 2.f, 4.f, 255, 255, 255, PercentTo255(40.f));
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 1.5f);
        x = PolarX(x, -100.f, a);
        y = PolarY(y, -100.f, a);
        for (int i = 0; i < 9; i++)
        {
            int1 = GetRandomInt(1, 2);
            float1 = GetRandomReal(100.f, 300.f);
            if (int1 == 1)
            {
                x2 = PolarX(x, float1, a + 90.f);
                y2 = PolarY(y, float1, a + 90.f);
            }
            else
            {
                x2 = PolarX(x, float1, a - 90.f);
                y2 = PolarY(y, float1, a - 90.f);
            }
            a2 = Angle(x2, y2, GetUnitX(t), GetUnitY(t));
            Effect("Gilcastersfx4.mdx", x2, y2, GetRandomReal(100.f, 200.f), a2, .0f, .0f, 0.6f, 4.f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            SaveEffectHandle(GameHT, hid, 100 + i, dummy_effect);
            hid = GetHandleId(dummy_effect);
            SaveReal(GameHT, hid, 'dist', float1);
            if (int1 == 1) { SaveReal(GameHT, hid, 'angl', 90.f); }
            else { SaveReal(GameHT, hid, 'angl', -90.f); }
        }
        Effect("AOEIndicator.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 4.f, 4.f, 255, 0, 0, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, .0f);
        hid = GetHandleId(tmr);
        SaveEffectHandle(GameHT, hid, 'indi', dummy_effect);
    }

    if (count >= 150 && count <= 168)
    {
        if (count % 2 == 0)
        {
            int1 = LoadInteger(GameHT, hid, 1000); 
            e = LoadEffectHandle(GameHT, hid, 100 + int1);
            BossSkill1_1(t, GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectHeight(e));
            SaveInteger(GameHT, hid, 1000, int1++);
        }
    }

    if (count <= 170)
    {
        SetUnitFacingEx(BOSS_GILGAMESH, a, true);
        hid = GetHandleId(tmr);
        e = LoadEffectHandle(GameHT, hid, 'indi');
        SetEffectXY(e, GetUnitX(t), GetUnitY(t), 0);
        SetSpecialEffectHeight(e, .0f);
        SetSpecialEffectAnimationOffsetPercent(e, count / 170.f);
        for (int i = 0; i < 9; i++)
        {
            e = LoadEffectHandle(GameHT, hid, 100 + i);
            hid = GetHandleId(e);
            dist = LoadReal(GameHT, hid, 'dist');
            a2 = a + LoadReal(GameHT, hid, 'angl');
            x = PolarX(GetUnitX(BOSS_GILGAMESH), -100.f, a);
            y = PolarY(GetUnitY(BOSS_GILGAMESH), -100.f, a);
            x2 = PolarX(x, dist, a2);
            y2 = PolarY(y, dist, a2);
            SetEffectXY(e, x2, y2, 0);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
            a2 = Angle(x2, y2, GetUnitX(t), GetUnitY(t));
            SetSpecialEffectYaw(e, a2);
        }
    }

    if (count == 170)
    {
        SetUnitTimeScale(BOSS_GILGAMESH, 1);
        SetPauseUnit(BOSS_GILGAMESH, false);
        SetInvulUnit(BOSS_GILGAMESH, false);
    }

    if (count == 320)
    {
        BOSS_CAN_SKILL = true;
        TimerStart(tmr, 40.f, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);

            BOSS_CAST_SKILL[0] = false;
            FlushChildHashtable(GameHT, hid);
            DestroyTimer(tmr);
        });
    }
}

void BossSkill2()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    unit t = LoadUnitHandle(GameHT, hid, 0);
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = .0f;
    float y = .0f;
    unit d = nil;
    group g1 = nil;
    effect e = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);

    if (count == 1)
    {
        SoundStart("boss1_w.mp3");
        SoundStart("boss1_w2.mp3");
        Effect("Gilcastersfx15.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, PercentTo255(40.f));
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 2.5f);
        Effect("AOEIndicator.mdx", GetUnitX(t), GetUnitY(t), .0f, randomAngle(), .0f, .0f, 4.f, 2.f, 255, 0, 0, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, .0f);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
        SaveReal(GameHT, hid, 'oriX', GetUnitX(t));
        SaveReal(GameHT, hid, 'oriY', GetUnitY(t));
    }

    if (count <= 80)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectAnimationOffsetPercent(e, count / 80.f);
    }

    if (count == 80)
    {
        x = LoadReal(GameHT, hid, 'oriX');
        y = LoadReal(GameHT, hid, 'oriY');
        Effect("Gilcastersfx7.mdx", x, y, .0f, randomAngle(), .0f, .0f, 4.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "birth");
        Effect("Gilcastersfx10.mdx", x, y, 50.f, randomAngle(), .0f, .0f, 1.5f, 2.f, 255, 255, 255, 255);
        Effect("Gilcastersfx16.mdx", x, y, 100.f, randomAngle(), .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Gilcastersfx9.mdx", x, y, .0f, randomAngle(), .0f, .0f, 2.f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Gilcastersfx11.mdx", x, y, .0f, randomAngle(), .0f, .0f, 2.5f, 3.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.5f);
        Effect("Gilcastersfx12.mdx", x, y, .0f, randomAngle(), .0f, .0f, 1.25f, 2.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 0.9f);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 500.f, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(BOSS_GILGAMESH, d))
            {
                UnitDamageTarget(BOSS_GILGAMESH, d, 700.f);
                CC_Unit(d, "stun", 1.f);
            }
        }
        DestroyGroup(g1);
        FlushChildHashtable(GameHT, hid);
        PauseTimer(tmr);
        DestroyTimer(tmr);
    }
}

void BossSkill3_1(float x, float y, float h, float x2, float y2)
{
    timer tmr = CreateTimer();
    int hid = GetHandleId(tmr);
    float a = .0f;
    float a2 = .0f;
    float dist = .0f;
    float x3 = .0f;
    float y3 = .0f;

    a2 = randomAngle();
    x3 = PolarX(x2, GetRandomReal(100.f, 600.f), a2);
    y3 = PolarY(y2, GetRandomReal(100.f, 600.f), a2);
    a = Angle(x, y, x3, y3);
    dist = Distance(x, y, x3, y3);
    Effect("ExplosiveBolt.mdx", x, y, h, a, .0f, .0f, 1.f, .0f, 255, 255, 255, 255);
    SetSpecialEffectVisible(dummy_effect, false);
    SaveEffectHandle(GameHT, hid, 'eff+', dummy_effect);
    SaveReal(GameHT, hid, 'dist', dist);
    SaveReal(GameHT, hid, 'impX', x2);
    SaveReal(GameHT, hid, 'impY', y2);
    TimerStart(tmr, 0.02f, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        effect e = LoadEffectHandle(GameHT, hid, 'eff+');
        int count = LoadInteger(GameHT, hid, 'coun');
        float a = GetSpecialEffectYaw(e);
        float dist = LoadReal(GameHT, hid, 'dist');
        float x = .0f;
        float y = .0f;
        unit d = nil;
        group g1 = nil;

        count++;
        SaveInteger(GameHT, hid, 'coun', count);

        if (count == 10)
        {
            SetSpecialEffectVisible(e, true);
        }

        if (count >= 10 && count <= 25)
        {
            x = PolarX(GetSpecialEffectX(e), dist / 15.f, a);
            y = PolarY(GetSpecialEffectY(e), dist / 15.f, a);
            SetEffectXY(e, x, y, 0);
            SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
        }

        if (count == 25)
        {
            DestroyEffectTimed(e, .01f);
            Effect("ExplosiveBolt.mdx", GetSpecialEffectX(e), GetSpecialEffectY(e), GetSpecialEffectHeight(e), GetSpecialEffectYaw(e), .0f, .0f, 1.f, 2.f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "death");
            x = LoadReal(GameHT, hid, 'impX');
            y = LoadReal(GameHT, hid, 'impY');
            g1 = CreateGroup();
            GroupEnumUnitsInRange(g1, x, y, 700, nil);
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                d = GroupGetUnitByIndex(g1, i);
                if (FilterGeneric(BOSS_GILGAMESH, d))
                {
                    UnitDamageTarget(BOSS_GILGAMESH, d, 1400, 25);
                    CC_Unit(d, "stun", 0.1f);
                }
            }
            DestroyGroup(g1);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    });
}

void BossSkill3()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(BOSS_GILGAMESH), GetUnitY(BOSS_GILGAMESH), x, y);
    float a2 = .0f;
    effect e = nil;
    float float1 = .0f;
    float x2 = .0f;
    float y2 = .0f;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 100)
    {
        SetPauseUnit(BOSS_GILGAMESH, true);
        SetInvulUnit(BOSS_GILGAMESH, true);
    }

    if (count == 1)
    {
        SoundStart("boss1_e.mp3");
        SetUnitFacingEx(BOSS_GILGAMESH, a, true);
        SetUnitAnimationByIndex(BOSS_GILGAMESH, 6);
        Effect("Gilcastersfx3.mdx", GetUnitX(BOSS_GILGAMESH), GetUnitY(BOSS_GILGAMESH), 100.f, randomAngle(), .0f, .0f, 1.2f, 2.f, 255, 255, 255, 255);
        Effect("Gilcastersfx15.mdx", GetUnitX(BOSS_GILGAMESH), GetUnitY(BOSS_GILGAMESH), .0f, randomAngle(), .0f, .0f, 2.f, 2.f, 255, 255, 255, PercentTo255(40.f));
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 1.5f);
        Effect("AOEIndicator.mdx", x, y, .0f, randomAngle(), .0f, .0f, 6.f, 2.5f, 255, 0, 0, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, .0f);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
    }

    if (count <= 100)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectAnimationOffsetPercent(e, count / 100.f);

        if (count % 4 == 0)
        {
            x2 = PolarX(GetUnitX(BOSS_GILGAMESH), -100.f, a);
            y2 = PolarY(GetUnitY(BOSS_GILGAMESH), -100.f, a);
            float1 = GetRandomReal(100.f, 300.f);
            if (GetRandomInt(1, 2) == 1)
            {
                x2 = PolarX(x2, float1, a + 90.f);
                y2 = PolarY(y2, float1, a + 90.f);
            } 
            else
            {
                x2 = PolarX(x2, float1, a - 90.f);
                y2 = PolarY(y2, float1, a - 90.f);
            }
            a2 = Angle(x2, y2, x, y);
            Effect("Gilcastersfx4.mdx", x2, y2, GetRandomReal(100.f, 200.f), a2, .0f, .0f, 0.6f, 2.5f - count * 0.02f, 255, 255, 255, 255);
            SetSpecialEffectAnimation(dummy_effect, "birth");
            BossSkill3_1(GetSpecialEffectX(dummy_effect), GetSpecialEffectY(dummy_effect), GetSpecialEffectHeight(dummy_effect), x, y);
        }
    }

    if (count == 100)
    {
        SetUnitTimeScale(BOSS_GILGAMESH, 1.f);
        SetPauseUnit(BOSS_GILGAMESH, false);
        SetInvulUnit(BOSS_GILGAMESH, false);
    }

    if (count == 250)
    {
        BOSS_CAN_SKILL = true;
        TimerStart(tmr, 50.f, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            
            BOSS_CAST_SKILL[2] = false;
            FlushChildHashtable(GameHT, hid);
            DestroyTimer(tmr);
        });
    }
}

void BossSkill4()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    int count = LoadInteger(GameHT, hid, 'coun');
    float x = LoadReal(GameHT, hid, 'impX');
    float y = LoadReal(GameHT, hid, 'impY');
    float a = Angle(GetUnitX(BOSS_GILGAMESH), GetUnitY(BOSS_GILGAMESH), x, y);
    float a2 = .0f;
    effect e = nil;
    float float1 = .0f;
    float x2 = .0f;
    float y2 = .0f;
    unit d = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);
    if (count <= 130)
    {
        SetPauseUnit(BOSS_GILGAMESH, true);
        SetInvulUnit(BOSS_GILGAMESH, true);
    }

    if (count == 1)
    {
        SoundStart("boss1_r.mp3");
        SetUnitFacingEx(BOSS_GILGAMESH, a, true);
        SetUnitAnimationByIndex(BOSS_GILGAMESH, 3);
        Effect("Gilcastersfx3.mdx", GetUnitX(BOSS_GILGAMESH), GetUnitY(BOSS_GILGAMESH), 100.f, randomAngle(), .0f, .0f, 1.2f, 3.f, 255, 255, 255, 255);
        Effect("Gilcastersfx15.mdx", GetUnitX(BOSS_GILGAMESH), GetUnitY(BOSS_GILGAMESH), .0f, randomAngle(), .0f, .0f, 2.f, 3.f, 255, 255, 255, PercentTo255(40.f));
        SetSpecialEffectAnimation(dummy_effect, "birth");
        SetSpecialEffectTimeScale(dummy_effect, 3.f);
        Effect("Gilcastersfx18.mdx", x, y, 1200, randomAngle(), -90.f, .0f, 1.f, 5.f, 255, 255, 255, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
        Effect("Black.mdx", x, y, 10.f, randomAngle(), .0f, .0f, 1.f, 5.f, 255, 255, 255, PercentTo255(60.f));
        TimeScaleEffect(dummy_effect, .0f, 0.4f);
        SaveEffectHandle(GameHT, hid, 101, dummy_effect);

        Effect("AOEIndicator.mdx", x, y, .0f, randomAngle(), .0f, .0f, 6.f, 5.f, 255, 0, 0, 255);
        SetSpecialEffectAnimation(dummy_effect, "stand");
        SetSpecialEffectTimeScale(dummy_effect, .0f);
        SaveEffectHandle(GameHT, hid, 102, dummy_effect);
    }

    if (count <= 100)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.115f);
        e = LoadEffectHandle(GameHT, hid, 101);
        SetSpecialEffectScale(e, GetSpecialEffectScale(e) + 0.012f);
    }

    if (count <= 130)
    {
        e = LoadEffectHandle(GameHT, hid, 102);
        SetSpecialEffectAnimationOffsetPercent(e, count / 130.f);
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 750, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(BOSS_GILGAMESH, d))
            {
                CC_SLOW_EFFECT = 0.5f;
                CC_Unit(d, "slow", 0.1f);
            }
        }
        DestroyGroup(g1);
    }

    if (count == 130)
    {
        SoundStart("Boss1SE1.mp3");
        SetUnitTimeScale(BOSS_GILGAMESH, 1);
        SetPauseUnit(BOSS_GILGAMESH, false);
        SetInvulUnit(BOSS_GILGAMESH, false);
        Effect("Gilcastersfx2.mdx", x, y, .0f, randomAngle(), .0f, .0f, 5.5f, 2.5f, 255, 255, 255, 255);
        Effect("Gilcastersfx1.mdx", x, y, .0f, randomAngle(), .0f, .0f, 1.2f, 2.5f, 255, 255, 255, 255);
    }

    if (count >= 130 && count <= 230)
    {
        g1 = CreateGroup();
        GroupEnumUnitsInRange(g1, x, y, 750, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(BOSS_GILGAMESH, d))
            {
                UnitDamageTarget(BOSS_GILGAMESH, d, 1700, 100);
                CC_Unit(d, "stun", 0.1f);
            }
        }
        DestroyGroup(g1);
    }

    if (count == 380)
    {
        BOSS_CAN_SKILL = true;
        TimerStart(tmr, 50.f, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);

            BOSS_CAST_SKILL[3] = false;
            FlushChildHashtable(GameHT, hid);
            DestroyTimer(tmr);
        });
    }
}

void BossSkill5()
{
    timer tmr = GetExpiredTimer();
    int hid = GetHandleId(tmr);
    int count = LoadInteger(GameHT, hid, 'coun');
    float a = .0f;
    float x = .0f;
    float y = .0f;
    unit d = nil;
    effect e = nil;
    group g1 = nil;

    count++;
    SaveInteger(GameHT, hid, 'coun', count);

    if (count == 1)
    {
        SoundStart("boss1_t.mp3");
        Effect("Gilcastersfx3.mdx", GetUnitX(BOSS_GILGAMESH), GetUnitY(BOSS_GILGAMESH), 100.f, randomAngle(), .0f, .0f, 1.f, 8.f, 255, 255, 255, 255);
        SetSpecialEffectTimeScale(dummy_effect, 5.f);
        SaveEffectHandle(GameHT, hid, 100, dummy_effect);
    }

    if (count == 150)
    {
        BOSS_CAN_SKILL = true;
    }

    if (count <= 400)
    {
        e = LoadEffectHandle(GameHT, hid, 100);
        SetEffectXY(e, GetUnitX(BOSS_GILGAMESH), GetUnitY(BOSS_GILGAMESH), 0);
        SetSpecialEffectHeight(e, GetSpecialEffectHeight(e));
        g1 = CreateGroup();
        GroupEnumUnitsInRect(g1, area_boss, nil);
        for (int i = 0; i < GroupGetCount(g1); i++)
        {
            d = GroupGetUnitByIndex(g1, i);
            if (FilterGeneric(BOSS_GILGAMESH, d))
            {
                UnitDamageTarget(BOSS_GILGAMESH, d, 2500, 400);
            }
        }
        DestroyGroup(g1);

        if (count % 4 == 0)
        {
            x = GetRandomReal(GetRectMinX(area_boss), GetRectMaxX(area_boss));
            y = GetRandomReal(GetRectMinY(area_boss), GetRectMaxY(area_boss));
            Effect("Gilcastersfx8.mdx", x, y, .0f, randomAngle(), .0f, .0f, 1.f, 1.5f, 255, 255, 255, 255);
        }
    }

    if (count == 400)
    {
        TimerStart(tmr, 50.f, false, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);

            BOSS_CAST_SKILL[4] = false;
            FlushChildHashtable(GameHT, hid);
            DestroyTimer(tmr);
        });
    }
}

void SummonBoss()
{
    BOSS_GILGAMESH = CreateUnit(Player(12), 'H001', GetRectCenterX(spawn_boss), GetRectCenterY(spawn_boss), 270.f);
    SetHeroLevel(BOSS_GILGAMESH, 50, false);
    ShowFrame(myframe[171], true);
    TimerStart(CreateTimer(), 0.1f, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        unit u = nil;
        group g1 = CreateGroup();
        timer newtmr = nil;
        int int1 = 0;
        float hp = .0f;

        if (IsUnitAlive(BOSS_GILGAMESH))
        {
            hp = 100 * GetUnitCurrentLife(BOSS_GILGAMESH) / GetUnitMaxLife(BOSS_GILGAMESH);
            SetFrameValue(myframe[172], hp);
            SetFrameText(myframe[174], I2S(R2I(GetUnitCurrentLife(BOSS_GILGAMESH))) + " (" + R2SW(hp, 0, 1) + "%)");

            if (GetUnitCurrentOrder(BOSS_GILGAMESH) == 0 || GetUnitTargetUnit(BOSS_GILGAMESH) == nil)
            {
                GroupEnumUnitsInRect(g1, area_boss, Filter(@BossFilter));
                if (GroupGetCount(g1) > 0)
                {
                    u = FirstOfGroup(g1);
                    IssueTargetOrderById(BOSS_GILGAMESH, 851983, u);
                }
            }

            if (BOSS_CAN_SKILL && !IsUnitInvulnerable(BOSS_GILGAMESH) && !IsUnitPaused(BOSS_GILGAMESH) && !IsUnitStunned(BOSS_GILGAMESH))
            {
                GroupEnumUnitsInRect(g1, area_boss, Filter(@BossFilter));
                if (GroupGetCount(g1) > 0)
                {
                    if (!BOSS_CAST_SKILL[0])
                    {
                        BOSS_CAN_SKILL = false;
                        BOSS_CAST_SKILL[0] = true;
                        newtmr = CreateTimer();
                        hid = GetHandleId(newtmr);
                        SetPauseUnit(BOSS_GILGAMESH, true);
                        SetInvulUnit(BOSS_GILGAMESH, true);
                        SaveUnitHandle(GameHT, hid, 0, FirstOfGroup(g1));
                        TimerStart(newtmr, 0.02f, true, @BossSkill1);
                    }
                    else if (!BOSS_CAST_SKILL[1])
                    {
                        BOSS_CAN_SKILL = false;
                        BOSS_CAST_SKILL[1] = true;
                        TimerStart(CreateTimer(), 40.f, false, function()
                        {
                            timer tmr = GetExpiredTimer();

                            BOSS_CAST_SKILL[1] = false;
                            DestroyTimer(tmr);
                        });
                        TimerStart(CreateTimer(), 3.f, false, function()
                        {
                            timer tmr = GetExpiredTimer();

                            BOSS_CAN_SKILL = true;
                            DestroyTimer(tmr);
                        });
                        int1 = 0;
                        for (int i = 0; i < GroupGetCount(g1); i++)
                        {
                            int1++;
                            if (int1 > 5) { break; }
                            newtmr = CreateTimer();
                            hid = GetHandleId(newtmr);
                            u = GroupGetUnitByIndex(g1, i);
                            SaveUnitHandle(GameHT, hid, 0, u);
                            TimerStart(newtmr, 0.02f, true, @BossSkill2);
                        }
                    }
                    else if (!BOSS_CAST_SKILL[2])
                    {
                        BOSS_CAN_SKILL = false;
                        BOSS_CAST_SKILL[2] = true;
                        newtmr = CreateTimer();
                        hid = GetHandleId(newtmr);
                        SetPauseUnit(BOSS_GILGAMESH, true);
                        SetInvulUnit(BOSS_GILGAMESH, true);
                        u = FirstOfGroup(g1);
                        SaveReal(GameHT, hid, 'impX', GetUnitX(u));
                        SaveReal(GameHT, hid, 'impY', GetUnitY(u));
                        TimerStart(newtmr, 0.02f, true, @BossSkill3);
                    }
                    else if (!BOSS_CAST_SKILL[3])
                    {
                        BOSS_CAN_SKILL = false;
                        BOSS_CAST_SKILL[3] = true;
                        newtmr = CreateTimer();
                        hid = GetHandleId(newtmr);
                        SetPauseUnit(BOSS_GILGAMESH, true);
                        SetInvulUnit(BOSS_GILGAMESH, true);
                        u = FirstOfGroup(g1);
                        SaveReal(GameHT, hid, 'impX', GetUnitX(u));
                        SaveReal(GameHT, hid, 'impY', GetUnitY(u));
                        TimerStart(newtmr, 0.02f, true, @BossSkill4);
                    }
                    else if (!BOSS_CAST_SKILL[4])
                    {
                        BOSS_CAN_SKILL = false;
                        BOSS_CAST_SKILL[4] = true;
                        newtmr = CreateTimer();
                        hid = GetHandleId(newtmr);
                        TimerStart(newtmr, 0.02f, true, @BossSkill5);
                    }
                }
            }
            DestroyGroup(g1);
        }
        else
        {
            ShowFrame(myframe[171], false);
            BOSS_CAN_SKILL = true;
            BOSS_CAST_SKILL[0] = false;
            BOSS_CAST_SKILL[1] = false;
            BOSS_CAST_SKILL[2] = false;
            BOSS_CAST_SKILL[3] = false;
            BOSS_CAST_SKILL[4] = false;
            DestroyGroup(g1);
            FlushChildHashtable(GameHT, hid);
            PauseTimer(tmr);
            DestroyTimer(tmr);
        }
    });
}

bool FilterTeam1()
{
    return MyHero[GetPlayerId(GetOwningPlayer(GetFilterUnit()))] == GetFilterUnit() && IsUnitAlly(GetFilterUnit(), Player(3)) && IsUnitAlive(GetFilterUnit());
}

bool FilterTeam2()
{
    return MyHero[GetPlayerId(GetOwningPlayer(GetFilterUnit()))] == GetFilterUnit() && IsUnitAlly(GetFilterUnit(), Player(7)) && IsUnitAlive(GetFilterUnit());
}

bool FilterTeam3()
{
    return MyHero[GetPlayerId(GetOwningPlayer(GetFilterUnit()))] == GetFilterUnit() && IsUnitAlly(GetFilterUnit(), Player(11)) && IsUnitAlive(GetFilterUnit());
}

void TourBoss()
{
    TimerStart(CreateTimer(), 0.02f, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        int count = LoadInteger(GameHT, hid, 'coun');
        group g1 = nil;
        group g2 = nil;
        unit u = nil;
        int pid = 0;
        float x = .0f;
        float y = .0f;

        count++;
        SaveInteger(GameHT, hid, 'coun', count);

        if (count == 1)
        {
            TOUR_BOSS = true;
            DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Tournament Boss!");
            for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
            {
                if (reviveCD[i] > 3)
                {
                    reviveCD[i] = 3;
                }
            }
            SaveGroupHandle(GameHT, hid, 'grp1', CreateGroup());
            SaveGroupHandle(GameHT, hid, 'grp2', CreateGroup());
        }

        if (count == 200)
        {
            SummonBoss();

            for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
            {
                if (MyHero[i] != nil)
                {
                    while (true)
                    {
                        x = GetRandomReal(GetRectMinX(area_boss), GetRectMaxX(area_boss));
                        y = GetRandomReal(GetRectMinY(area_boss), GetRectMaxY(area_boss));
                        if (GetTerrainCliffLevel(x, y) == 2) { break; }
                    }
                    SetUnitCurrentLife(MyHero[i], GetUnitMaxLife(MyHero[i]));
                    SetUnitCurrentMana(MyHero[i], GetUnitMaxMana(MyHero[i]));
                    SetUnitPosition(MyHero[i], x, y);
                    GroupAddUnit(TOUR_GROUP, MyHero[i]);
                }
            }
            SetPlayerAllianceStateBJ(Player(0), Player(4), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(0), Player(5), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(0), Player(6), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(0), Player(8), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(0), Player(9), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(0), Player(10), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(1), Player(4), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(1), Player(5), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(1), Player(6), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(1), Player(8), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(1), Player(9), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(1), Player(10), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(2), Player(4), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(2), Player(5), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(2), Player(6), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(2), Player(8), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(2), Player(9), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(2), Player(10), bj_ALLIANCE_ALLIED_VISION);

            SetPlayerAllianceStateBJ(Player(4), Player(0), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(4), Player(1), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(4), Player(2), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(4), Player(8), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(4), Player(9), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(4), Player(10), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(5), Player(0), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(5), Player(1), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(5), Player(2), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(5), Player(8), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(5), Player(9), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(5), Player(10), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(6), Player(0), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(6), Player(1), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(6), Player(2), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(6), Player(8), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(6), Player(9), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(6), Player(10), bj_ALLIANCE_ALLIED_VISION);

            SetPlayerAllianceStateBJ(Player(8), Player(0), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(8), Player(1), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(8), Player(2), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(8), Player(4), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(8), Player(5), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(8), Player(6), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(9), Player(0), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(9), Player(1), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(9), Player(2), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(9), Player(4), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(9), Player(5), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(9), Player(6), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(10), Player(0), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(10), Player(1), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(10), Player(2), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(10), Player(4), bj_ALLIANCE_ALLIED_VISION);
            SetPlayerAllianceStateBJ(Player(10), Player(5), bj_ALLIANCE_ALLIED_VISION);SetPlayerAllianceStateBJ(Player(10), Player(6), bj_ALLIANCE_ALLIED_VISION);
        }

        if (count < 400)
        {
            g1 = LoadGroupHandle(GameHT, hid, 'grp1');
            g2 = LoadGroupHandle(GameHT, hid, 'grp2');
            GroupEnumUnitsInRect(g1, GetWorldBounds(), nil);
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                u = GroupGetUnitByIndex(g1, i);
                pid = GetPlayerId(GetOwningPlayer(u));
                if (IsUnitAlive(u) && u == MyHero[pid])
                {
                    SetPauseUnit(u, true);
                    SetInvulUnit(u, true);
                    if (!IsUnitInGroup(u, g2)) { GroupAddUnit(g2, u); }
                }
            }
        }

        if (count == 400)
        {
            TOUR_BOSS = false;
            g1 = LoadGroupHandle(GameHT, hid, 'grp1');
            g2 = LoadGroupHandle(GameHT, hid, 'grp2');
            for (int i = 0; i < GroupGetCount(g2); i++)
            {
                u = GroupGetUnitByIndex(g2, i);
                SetPauseUnit(u, false);
                SetInvulUnit(u, false);
            }
            DestroyGroup(g1);
            DestroyGroup(g2);
        }

        if (count > 400)
        {
            for (int i = 0; i < GroupGetCount(TOUR_GROUP); i++)
            {
                u = GroupGetUnitByIndex(TOUR_GROUP, i);
                if (!IsUnitAlive(u))
                {
                    if (GetOwningPlayer(u) == GetLocalPlayer())
                    {
                        ShowFrame(myframe[171], false);
                    }
                    if (IsUnitAlly(u, Player(3)))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(4), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(5), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(6), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(8), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(9), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(10), bj_ALLIANCE_UNALLIED);
                    } else if (IsUnitAlly(u, Player(7)))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(0), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(1), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(2), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(8), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(9), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(10), bj_ALLIANCE_UNALLIED);
                    } else if (IsUnitAlly(u, Player(11)))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(0), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(1), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(2), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(4), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(5), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(6), bj_ALLIANCE_UNALLIED);
                    }
                    if (IsUnitInGroup(u, TOUR_GROUP)) { GroupRemoveUnit(TOUR_GROUP, u); }
                    i = 0;
                } else {
                    if (!IsUnitPaused(u) && !IsUnitInvulnerable(u))
                    {
                        x = GetUnitX(u);
                        y = GetUnitY(u);
                        if (!RectContainsCoords(area_boss, x, y))
                        {
                            if (x > GetRectMaxX(area_boss)) { x = GetRectMaxX(area_boss) - 64; }
                            else if (x < GetRectMinX(area_boss)) { x = GetRectMinX(area_boss) + 64; }
                            if (y > GetRectMaxY(area_boss)) { y = GetRectMaxY(area_boss) - 64; }
                            else if (y < GetRectMinY(area_boss)) { y = GetRectMinY(area_boss) + 64; }
                            SetUnitPosition(u, x, y);
                        }
                    }
                }
            }

            x = GetUnitX(BOSS_GILGAMESH);
            y = GetUnitY(BOSS_GILGAMESH);
            if (!RectContainsCoords(area_boss, x, y))
            {
                if (x > GetRectMaxX(area_boss)) { x = GetRectMaxX(area_boss) - 64; }
                else if (x < GetRectMinX(area_boss)) { x = GetRectMinX(area_boss) + 64; }
                if (y > GetRectMaxY(area_boss)) { y = GetRectMaxY(area_boss) - 64; }
                else if (y < GetRectMinY(area_boss)) { y = GetRectMinY(area_boss) + 64; }
                SetUnitPosition(BOSS_GILGAMESH, x, y);
            }

            if (!IsUnitAlive(BOSS_GILGAMESH))
            {
                DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are Allied Team!");
                for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                {
                    u = MyHero[i];
                    if (IsUnitInGroup(u, TOUR_GROUP))
                    {
                        SetUnitCurrentLife(u, GetUnitMaxLife(u));
                        SetUnitCurrentMana(u, GetUnitMaxMana(u));
                        if (IsUnitAlly(u, Player(3)))
                        {
                            SetUnitPosition(u, GetRectCenterX(revive_team1), GetRectCenterY(revive_team1));
                        } 
                        else if (IsUnitAlly(u, Player(7)))
                        {
                            SetUnitPosition(u, GetRectCenterX(revive_team2), GetRectCenterY(revive_team2));
                        }
                        else if (IsUnitAlly(u, Player(11)))
                        {
                            SetUnitPosition(u, GetRectCenterX(revive_team3), GetRectCenterY(revive_team3));
                        }
                        SetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD) + 8000);
                        UnitAddItemByIdSwapped('I000', u);
                    } else {
                        SetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD) + 3000);
                    }
                    if (IsUnitAlly(u, Player(3)))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(4), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(5), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(6), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(8), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(9), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(10), bj_ALLIANCE_UNALLIED);
                    } else if (IsUnitAlly(u, Player(7)))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(0), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(1), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(2), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(8), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(9), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(10), bj_ALLIANCE_UNALLIED);
                    } else if (IsUnitAlly(u, Player(11)))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(0), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(1), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(2), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(4), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(5), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(6), bj_ALLIANCE_UNALLIED);
                    }
                }
                GroupClear(TOUR_GROUP);
                TOUR_CD = 300;
                TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                FlushChildHashtable(GameHT, hid);
                PauseTimer(tmr);
                DestroyTimer(tmr);
            } 
            else if (GroupGetCount(TOUR_GROUP) == 0)
            {
                DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Tournament boss fail!");
                for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                {
                    u = MyHero[i];
                    if (IsUnitAlly(u, Player(3)))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(4), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(5), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(6), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(8), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(9), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(10), bj_ALLIANCE_UNALLIED);
                    } else if (IsUnitAlly(u, Player(7)))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(0), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(1), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(2), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(8), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(9), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(10), bj_ALLIANCE_UNALLIED);
                    } else if (IsUnitAlly(u, Player(11)))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(0), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(1), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(2), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(4), bj_ALLIANCE_UNALLIED);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(5), bj_ALLIANCE_UNALLIED);SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(6), bj_ALLIANCE_UNALLIED);
                    }
                    SetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD) + 4000);
                }
                KillUnit(BOSS_GILGAMESH);
                GroupClear(TOUR_GROUP);
                TOUR_CD = 300;
                TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                FlushChildHashtable(GameHT, hid);
                PauseTimer(tmr);
                DestroyTimer(tmr);
            }
        }
    });
}

void TourDM()
{
    TimerStart(CreateTimer(), 0.02f, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        int count = LoadInteger(GameHT, hid, 'coun');
        group g1 = nil;
        group g2 = nil;
        unit u = nil;
        int pid = 0;
        float x = .0f;
        float y = .0f;

        count++;
        SaveInteger(GameHT, hid, 'coun', count);

        if (count == 1)
        {
            DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Tournament Deathmatch!");
            for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
            {
                if (reviveCD[i] > 3)
                {
                    reviveCD[i] = 3;
                }
            }
            SaveGroupHandle(GameHT, hid, 'grp1', CreateGroup());
            SaveGroupHandle(GameHT, hid, 'grp2', CreateGroup());
        }

        if (count == 200)
        {
            for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
            {
                if (MyHero[i] != nil)
                {
                    SetUnitCurrentLife(MyHero[i], GetUnitMaxLife(MyHero[i]));
                    SetUnitCurrentMana(MyHero[i], GetUnitMaxMana(MyHero[i]));
                    x = GetRandomReal(GetRectMinX(TourDM_Area), GetRectMaxX(TourDM_Area));
                    y = GetRandomReal(GetRectMinY(TourDM_Area), GetRectMaxY(TourDM_Area));
                    SetUnitPosition(MyHero[i], x, y);
                    GroupAddUnit(TOUR_GROUP, MyHero[i]);
                }
            }
            SetPlayerAllianceStateBJ(Player(0), Player(1), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(0), Player(2), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(1), Player(0), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(1), Player(2), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(2), Player(0), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(2), Player(1), bj_ALLIANCE_UNALLIED);

            SetPlayerAllianceStateBJ(Player(4), Player(5), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(4), Player(6), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(5), Player(4), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(5), Player(6), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(6), Player(4), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(6), Player(5), bj_ALLIANCE_UNALLIED);

            SetPlayerAllianceStateBJ(Player(8), Player(9), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(8), Player(10), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(9), Player(8), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(9), Player(10), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(10), Player(8), bj_ALLIANCE_UNALLIED);
            SetPlayerAllianceStateBJ(Player(10), Player(9), bj_ALLIANCE_UNALLIED);
        }

        if (count < 400)
        {
            g1 = LoadGroupHandle(GameHT, hid, 'grp1');
            g2 = LoadGroupHandle(GameHT, hid, 'grp2');
            GroupEnumUnitsInRect(g1, GetWorldBounds(), nil);
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                u = GroupGetUnitByIndex(g1, i);
                pid = GetPlayerId(GetOwningPlayer(u));
                if (IsUnitAlive(u) && u == MyHero[pid])
                {
                    SetPauseUnit(u, true);
                    SetInvulUnit(u, true);
                    if (!IsUnitInGroup(u, g2)) { GroupAddUnit(g2, u); }
                }
            }
        }

        if (count == 400)
        {
            g1 = LoadGroupHandle(GameHT, hid, 'grp1');
            g2 = LoadGroupHandle(GameHT, hid, 'grp2');
            for (int i = 0; i < GroupGetCount(g2); i++)
            {
                u = GroupGetUnitByIndex(g2, i);
                SetPauseUnit(u, false);
                SetInvulUnit(u, false);
            }
            DestroyGroup(g1);
            DestroyGroup(g2);
        }

        if (count > 400)
        {
            for (int i = 0; i < GroupGetCount(TOUR_GROUP); i++)
            {
                u = GroupGetUnitByIndex(TOUR_GROUP, i);
                if (!IsUnitAlive(u))
                {
                    if (GetOwningPlayer(u) == Player(0))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(1), bj_ALLIANCE_ALLIED_VISION);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(2), bj_ALLIANCE_ALLIED_VISION);
                    } else if (GetOwningPlayer(u) == Player(1))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(0), bj_ALLIANCE_ALLIED_VISION);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(2), bj_ALLIANCE_ALLIED_VISION);
                    } else if (GetOwningPlayer(u) == Player(2))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(0), bj_ALLIANCE_ALLIED_VISION);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(1), bj_ALLIANCE_ALLIED_VISION);
                    } else if (GetOwningPlayer(u) == Player(4))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(5), bj_ALLIANCE_ALLIED_VISION);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(6), bj_ALLIANCE_ALLIED_VISION);
                    } else if (GetOwningPlayer(u) == Player(5))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(4), bj_ALLIANCE_ALLIED_VISION);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(6), bj_ALLIANCE_ALLIED_VISION);
                    } else if (GetOwningPlayer(u) == Player(6))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(4), bj_ALLIANCE_ALLIED_VISION);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(5), bj_ALLIANCE_ALLIED_VISION);
                    } else if (GetOwningPlayer(u) == Player(8))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(9), bj_ALLIANCE_ALLIED_VISION);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(10), bj_ALLIANCE_ALLIED_VISION);
                    } else if (GetOwningPlayer(u) == Player(9))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(8), bj_ALLIANCE_ALLIED_VISION);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(10), bj_ALLIANCE_ALLIED_VISION);
                    } else if (GetOwningPlayer(u) == Player(10))
                    {
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(8), bj_ALLIANCE_ALLIED_VISION);
                        SetPlayerAllianceStateBJ(GetOwningPlayer(u), Player(9), bj_ALLIANCE_ALLIED_VISION);
                    }
                    if (IsUnitInGroup(u, TOUR_GROUP))
                    {
                        GroupRemoveUnit(TOUR_GROUP, u);
                    }
                    i = 0;
                }
                else
                {
                    if (!IsUnitPaused(u) && !IsUnitInvulnerable(u) && !IsUnitInGroup(u, HibariR_Group))
                    {
                        x = GetUnitX(u);
                        y = GetUnitY(u);
                        if (!RectContainsCoords(TourDM_Area, x, y))
                        {
                            if (x > GetRectMaxX(TourDM_Area)) { x = GetRectMaxX(TourDM_Area) - 64; }
                            else if (x < GetRectMinX(TourDM_Area)) { x = GetRectMinX(TourDM_Area) + 64; }
                            if (y > GetRectMaxY(TourDM_Area)) { y = GetRectMaxY(TourDM_Area) - 64; }
                            else if (y < GetRectMinY(TourDM_Area)) { y = GetRectMinY(TourDM_Area) + 64; }
                            SetUnitPosition(u, x, y);
                        }
                    }
                }
            }

            if (count % 5 == 0)
            {
                if (GroupGetCount(TOUR_GROUP) == 1)
                {
                    u = FirstOfGroup(TOUR_GROUP);
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are " + GetPlayerName(GetOwningPlayer(u)) + "!");
                    SetUnitCurrentLife(u, GetUnitMaxLife(u));
                    SetUnitCurrentMana(u, GetUnitMaxMana(u));
                    if (IsUnitAlly(u, Player(3))) { SetUnitPosition(u, GetRectCenterX(revive_team1), GetRectCenterY(revive_team1)); }
                    else if (IsUnitAlly(u, Player(7))) { SetUnitPosition(u, GetRectCenterX(revive_team2), GetRectCenterY(revive_team2)); }
                    else if (IsUnitAlly(u, Player(11))) { SetUnitPosition(u, GetRectCenterX(revive_team3), GetRectCenterY(revive_team3)); }
                    SetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD) + 800);
                    SetPlayerAllianceStateBJ(Player(0), Player(1), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(0), Player(2), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(1), Player(0), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(1), Player(2), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(2), Player(0), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(2), Player(1), bj_ALLIANCE_ALLIED_VISION);

                    SetPlayerAllianceStateBJ(Player(4), Player(5), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(4), Player(6), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(5), Player(4), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(5), Player(6), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(6), Player(4), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(6), Player(5), bj_ALLIANCE_ALLIED_VISION);

                    SetPlayerAllianceStateBJ(Player(8), Player(9), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(8), Player(10), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(9), Player(8), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(9), Player(10), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(10), Player(8), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(10), Player(9), bj_ALLIANCE_ALLIED_VISION);
                    GroupClear(TOUR_GROUP);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                } 
                else if (GroupGetCount(TOUR_GROUP) == 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Tournament deathmatch draw!");
                    SetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerAllianceStateBJ(Player(0), Player(1), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(0), Player(2), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(1), Player(0), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(1), Player(2), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(2), Player(0), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(2), Player(1), bj_ALLIANCE_ALLIED_VISION);

                    SetPlayerAllianceStateBJ(Player(4), Player(5), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(4), Player(6), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(5), Player(4), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(5), Player(6), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(6), Player(4), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(6), Player(5), bj_ALLIANCE_ALLIED_VISION);

                    SetPlayerAllianceStateBJ(Player(8), Player(9), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(8), Player(10), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(9), Player(8), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(9), Player(10), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(10), Player(8), bj_ALLIANCE_ALLIED_VISION);
                    SetPlayerAllianceStateBJ(Player(10), Player(9), bj_ALLIANCE_ALLIED_VISION);
                    GroupClear(TOUR_GROUP);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
            }
        }
    });
}

void TourSolo()
{
    TimerStart(CreateTimer(), 0.02f, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        int count = LoadInteger(GameHT, hid, 'coun');
        group g1 = nil;
        group g2 = nil;
        group g3 = nil;
        unit u = nil;
        int pid = 0;
        float x = .0f;
        float y = .0f;

        count++;
        SaveInteger(GameHT, hid, 'coun', count);

        if (count == 1)
        {
            DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Tournament Solo!");
            for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
            {
                if (reviveCD[i] > 3)
                {
                    reviveCD[i] = 3;
                }
            }
            SaveGroupHandle(GameHT, hid, 'grp1', CreateGroup());
            SaveGroupHandle(GameHT, hid, 'grp2', CreateGroup());
        }

        if (count == 200)
        {
            g1 = CreateGroup();
            g2 = CreateGroup();
            g3 = CreateGroup();
            GroupEnumUnitsInRect(g1, GetWorldBounds(), Filter(@FilterTeam1));
            GroupEnumUnitsInRect(g2, GetWorldBounds(), Filter(@FilterTeam2));
            GroupEnumUnitsInRect(g3, GetWorldBounds(), Filter(@FilterTeam3));

            u = FirstOfGroup(g1);
            x = GetRandomReal(GetRectMinX(TourSolo_Area), GetRectMaxX(TourSolo_Area));
            y = GetRandomReal(GetRectMinY(TourSolo_Area), GetRectMaxY(TourSolo_Area));
            if (u != nil)
            {
                SetUnitCurrentLife(u, GetUnitMaxLife(u));
                SetUnitCurrentMana(u, GetUnitMaxMana(u));
                SetUnitPosition(u, x, y);
                GroupAddUnit(TOUR_GROUP, u);
                GroupAddUnit(TOUR_GROUP_1, u);
                GroupRemoveUnit(g1, u);
            }

            u = FirstOfGroup(g2);
            x = GetRandomReal(GetRectMinX(TourSolo_Area), GetRectMaxX(TourSolo_Area));
            y = GetRandomReal(GetRectMinY(TourSolo_Area), GetRectMaxY(TourSolo_Area));
            if (u != nil)
            {
                SetUnitCurrentLife(u, GetUnitMaxLife(u));
                SetUnitCurrentMana(u, GetUnitMaxMana(u));
                SetUnitPosition(u, x, y);
                GroupAddUnit(TOUR_GROUP, u);
                GroupAddUnit(TOUR_GROUP_2, u);
                GroupRemoveUnit(g2, u);
            }

            u = FirstOfGroup(g3);
            x = GetRandomReal(GetRectMinX(TourSolo_Area), GetRectMaxX(TourSolo_Area));
            y = GetRandomReal(GetRectMinY(TourSolo_Area), GetRectMaxY(TourSolo_Area));
            if (u != nil)
            {
                SetUnitCurrentLife(u, GetUnitMaxLife(u));
                SetUnitCurrentMana(u, GetUnitMaxMana(u));
                SetUnitPosition(u, x, y);
                GroupAddUnit(TOUR_GROUP, u);
                GroupAddUnit(TOUR_GROUP_3, u);
                GroupRemoveUnit(g3, u);
            }

            DestroyGroup(g1);
            DestroyGroup(g2);
            DestroyGroup(g3);
        }

        if (count < 400)
        {
            g1 = LoadGroupHandle(GameHT, hid, 'grp1');
            g2 = LoadGroupHandle(GameHT, hid, 'grp2');
            GroupEnumUnitsInRect(g1, GetWorldBounds(), nil);
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                u = GroupGetUnitByIndex(g1, i);
                pid = GetPlayerId(GetOwningPlayer(u));
                if (IsUnitAlive(u) && u == MyHero[pid])
                {
                    SetPauseUnit(u, true);
                    SetInvulUnit(u, true);
                    if (!IsUnitInGroup(u, g2)) { GroupAddUnit(g2, u); }
                }
            }
        }

        if (count == 400)
        {
            g1 = LoadGroupHandle(GameHT, hid, 'grp1');
            g2 = LoadGroupHandle(GameHT, hid, 'grp2');
            for (int i = 0; i < GroupGetCount(g2); i++)
            {
                u = GroupGetUnitByIndex(g2, i);
                SetPauseUnit(u, false);
                SetInvulUnit(u, false);
            }
            DestroyGroup(g1);
            DestroyGroup(g2);
        }

        if (count > 400)
        {
            for (int i = 0; i < GroupGetCount(TOUR_GROUP); i++)
            {
                u = GroupGetUnitByIndex(TOUR_GROUP, i);
                if (!IsUnitAlive(u))
                {
                    if (IsUnitInGroup(u, TOUR_GROUP))
                    {
                        GroupRemoveUnit(TOUR_GROUP, u);
                    }
                    if (IsUnitAlly(u, Player(3)) && IsUnitInGroup(u, TOUR_GROUP_1)) { GroupRemoveUnit(TOUR_GROUP_1, u); }
                    else if (IsUnitAlly(u, Player(7)) && IsUnitInGroup(u, TOUR_GROUP_2)) { GroupRemoveUnit(TOUR_GROUP_2, u); }
                    else if (IsUnitAlly(u, Player(11)) && IsUnitInGroup(u, TOUR_GROUP_3)) { GroupRemoveUnit(TOUR_GROUP_3, u); }
                    i = 0;
                }
                else
                {
                    if (!IsUnitPaused(u) && !IsUnitInvulnerable(u) && !IsUnitInGroup(u, HibariR_Group))
                    {
                        x = GetUnitX(u);
                        y = GetUnitY(u);
                        if (!RectContainsCoords(TourSolo_Area, x, y))
                        {
                            if (x > GetRectMaxX(TourSolo_Area)) { x = GetRectMaxX(TourSolo_Area) - 64; }
                            else if (x < GetRectMinX(TourSolo_Area)) { x = GetRectMinX(TourSolo_Area) + 64; }
                            if (y > GetRectMaxY(TourSolo_Area)) { y = GetRectMaxY(TourSolo_Area) - 64; }
                            else if (y < GetRectMinY(TourSolo_Area)) { y = GetRectMinY(TourSolo_Area) + 64; }
                            SetUnitPosition(u, x, y);
                        }
                    }
                }
            }

            if (count % 5 == 0)
            {
                if (GroupGetCount(TOUR_GROUP_1) > 0 && GroupGetCount(TOUR_GROUP_2) == 0 && GroupGetCount(TOUR_GROUP_3) == 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are Team 1!");
                    for (int i = 0; i < GroupGetCount(TOUR_GROUP_1); i++)
                    {
                        u = GroupGetUnitByIndex(TOUR_GROUP_1, i);
                        SetUnitCurrentLife(u, GetUnitMaxLife(u));
                        SetUnitCurrentMana(u, GetUnitMaxMana(u));
                        SetUnitPosition(u, GetRectCenterX(revive_team1), GetRectCenterY(revive_team1));
                    }
                    SetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                } 
                else if (GroupGetCount(TOUR_GROUP_1) == 0 && GroupGetCount(TOUR_GROUP_2) > 0 && GroupGetCount(TOUR_GROUP_3) == 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are Team 2!");
                    for (int i = 0; i < GroupGetCount(TOUR_GROUP_2); i++)
                    {
                        u = GroupGetUnitByIndex(TOUR_GROUP_2, i);
                        SetUnitCurrentLife(u, GetUnitMaxLife(u));
                        SetUnitCurrentMana(u, GetUnitMaxMana(u));
                        SetUnitPosition(u, GetRectCenterX(revive_team2), GetRectCenterY(revive_team2));
                    }
                    SetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
                else if (GroupGetCount(TOUR_GROUP_1) == 0 && GroupGetCount(TOUR_GROUP_2) == 0 && GroupGetCount(TOUR_GROUP_3) > 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are Team 3!");
                    for (int i = 0; i < GroupGetCount(TOUR_GROUP_3); i++)
                    {
                        u = GroupGetUnitByIndex(TOUR_GROUP_3, i);
                        SetUnitCurrentLife(u, GetUnitMaxLife(u));
                        SetUnitCurrentMana(u, GetUnitMaxMana(u));
                        SetUnitPosition(u, GetRectCenterX(revive_team3), GetRectCenterY(revive_team3));
                    }
                    SetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
                else if (GroupGetCount(TOUR_GROUP_1) == 0 && GroupGetCount(TOUR_GROUP_2) == 0 && GroupGetCount(TOUR_GROUP_3) == 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Tournament Solo Draw!");
                    SetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
            }
        }
    });
}

void TourDuo()
{
    TimerStart(CreateTimer(), 0.02f, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        int count = LoadInteger(GameHT, hid, 'coun');
        group g1 = nil;
        group g2 = nil;
        group g3 = nil;
        unit u = nil;
        int pid = 0;
        float x = .0f;
        float y = .0f;

        count++;
        SaveInteger(GameHT, hid, 'coun', count);

        if (count == 1)
        {
            DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Tournament Duo!");
            for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
            {
                if (reviveCD[i] > 3)
                {
                    reviveCD[i] = 3;
                }
            }
            SaveGroupHandle(GameHT, hid, 'grp1', CreateGroup());
            SaveGroupHandle(GameHT, hid, 'grp2', CreateGroup());
        }

        if (count == 200)
        {
            g1 = CreateGroup();
            g2 = CreateGroup();
            g3 = CreateGroup();
            GroupEnumUnitsInRect(g1, GetWorldBounds(), Filter(@FilterTeam1));
            GroupEnumUnitsInRect(g2, GetWorldBounds(), Filter(@FilterTeam2));
            GroupEnumUnitsInRect(g3, GetWorldBounds(), Filter(@FilterTeam3));

            u = FirstOfGroup(g1);
            if (u != nil)
            {
                SetUnitCurrentLife(u, GetUnitMaxLife(u));
                SetUnitCurrentMana(u, GetUnitMaxMana(u));
                SetUnitPosition(u, GetRectCenterX(TourDuo_1), GetRectCenterY(TourDuo_1));
                GroupAddUnit(TOUR_GROUP, u);
                GroupAddUnit(TOUR_GROUP_1, u);
                GroupRemoveUnit(g1, u);
            }
            u = FirstOfGroup(g1);
            if (u != nil)
            {
                SetUnitCurrentLife(u, GetUnitMaxLife(u));
                SetUnitCurrentMana(u, GetUnitMaxMana(u));
                SetUnitPosition(u, GetRectCenterX(TourDuo_1), GetRectCenterY(TourDuo_1));
                GroupAddUnit(TOUR_GROUP, u);
                GroupAddUnit(TOUR_GROUP_1, u);
                GroupRemoveUnit(g1, u);
            }

            u = FirstOfGroup(g2);
            if (u != nil)
            {
                SetUnitCurrentLife(u, GetUnitMaxLife(u));
                SetUnitCurrentMana(u, GetUnitMaxMana(u));
                SetUnitPosition(u, GetRectCenterX(TourDuo_2), GetRectCenterY(TourDuo_2));
                GroupAddUnit(TOUR_GROUP, u);
                GroupAddUnit(TOUR_GROUP_2, u);
                GroupRemoveUnit(g2, u);
            }
            u = FirstOfGroup(g2);
            if (u != nil)
            {
                SetUnitCurrentLife(u, GetUnitMaxLife(u));
                SetUnitCurrentMana(u, GetUnitMaxMana(u));
                SetUnitPosition(u, GetRectCenterX(TourDuo_2), GetRectCenterY(TourDuo_2));
                GroupAddUnit(TOUR_GROUP, u);
                GroupAddUnit(TOUR_GROUP_2, u);
                GroupRemoveUnit(g2, u);
            }

            u = FirstOfGroup(g3);
            if (u != nil)
            {
                SetUnitCurrentLife(u, GetUnitMaxLife(u));
                SetUnitCurrentMana(u, GetUnitMaxMana(u));
                SetUnitPosition(u, GetRectCenterX(TourDuo_3), GetRectCenterY(TourDuo_3));
                GroupAddUnit(TOUR_GROUP, u);
                GroupAddUnit(TOUR_GROUP_3, u);
                GroupRemoveUnit(g3, u);
            }
            u = FirstOfGroup(g3);
            if (u != nil)
            {
                SetUnitCurrentLife(u, GetUnitMaxLife(u));
                SetUnitCurrentMana(u, GetUnitMaxMana(u));
                SetUnitPosition(u, GetRectCenterX(TourDuo_3), GetRectCenterY(TourDuo_3));
                GroupAddUnit(TOUR_GROUP, u);
                GroupAddUnit(TOUR_GROUP_3, u);
                GroupRemoveUnit(g3, u);
            }

            DestroyGroup(g1);
            DestroyGroup(g2);
            DestroyGroup(g3);
        }

        if (count < 400)
        {
            g1 = LoadGroupHandle(GameHT, hid, 'grp1');
            g2 = LoadGroupHandle(GameHT, hid, 'grp2');
            GroupEnumUnitsInRect(g1, GetWorldBounds(), nil);
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                u = GroupGetUnitByIndex(g1, i);
                pid = GetPlayerId(GetOwningPlayer(u));
                if (IsUnitAlive(u) && u == MyHero[pid])
                {
                    SetPauseUnit(u, true);
                    SetInvulUnit(u, true);
                    if (!IsUnitInGroup(u, g2)) { GroupAddUnit(g2, u); }
                }
            }
        }

        if (count == 400)
        {
            g1 = LoadGroupHandle(GameHT, hid, 'grp1');
            g2 = LoadGroupHandle(GameHT, hid, 'grp2');
            for (int i = 0; i < GroupGetCount(g2); i++)
            {
                u = GroupGetUnitByIndex(g2, i);
                SetPauseUnit(u, false);
                SetInvulUnit(u, false);
            }
            DestroyGroup(g1);
            DestroyGroup(g2);
        }

        if (count > 400)
        {
            for (int i = 0; i < GroupGetCount(TOUR_GROUP); i++)
            {
                u = GroupGetUnitByIndex(TOUR_GROUP, i);
                if (!IsUnitAlive(u))
                {
                    if (IsUnitInGroup(u, TOUR_GROUP))
                    {
                        GroupRemoveUnit(TOUR_GROUP, u);
                    }
                    if (IsUnitAlly(u, Player(3)) && IsUnitInGroup(u, TOUR_GROUP_1)) { GroupRemoveUnit(TOUR_GROUP_1, u); }
                    else if (IsUnitAlly(u, Player(7)) && IsUnitInGroup(u, TOUR_GROUP_2)) { GroupRemoveUnit(TOUR_GROUP_2, u); }
                    else if (IsUnitAlly(u, Player(11)) && IsUnitInGroup(u, TOUR_GROUP_3)) { GroupRemoveUnit(TOUR_GROUP_3, u); }
                    i = 0;
                }
                else
                {
                    if (!IsUnitPaused(u) && !IsUnitInvulnerable(u) && !IsUnitInGroup(u, HibariR_Group))
                    {
                        x = GetUnitX(u);
                        y = GetUnitY(u);
                        if (!RectContainsCoords(TourDuo_Area, x, y))
                        {
                            if (x > GetRectMaxX(TourDuo_Area)) { x = GetRectMaxX(TourDuo_Area) - 64; }
                            else if (x < GetRectMinX(TourDuo_Area)) { x = GetRectMinX(TourDuo_Area) + 64; }
                            if (y > GetRectMaxY(TourDuo_Area)) { y = GetRectMaxY(TourDuo_Area) - 64; }
                            else if (y < GetRectMinY(TourDuo_Area)) { y = GetRectMinY(TourDuo_Area) + 64; }
                            SetUnitPosition(u, x, y);
                        }
                    }
                }
            }

            if (count % 5 == 0)
            {
                if (GroupGetCount(TOUR_GROUP_1) > 0 && GroupGetCount(TOUR_GROUP_2) == 0 && GroupGetCount(TOUR_GROUP_3) == 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are Team 1!");
                    for (int i = 0; i < GroupGetCount(TOUR_GROUP_1); i++)
                    {
                        u = GroupGetUnitByIndex(TOUR_GROUP_1, i);
                        SetUnitCurrentLife(u, GetUnitMaxLife(u));
                        SetUnitCurrentMana(u, GetUnitMaxMana(u));
                        SetUnitPosition(u, GetRectCenterX(revive_team1), GetRectCenterY(revive_team1));
                    }
                    SetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                } 
                else if (GroupGetCount(TOUR_GROUP_1) == 0 && GroupGetCount(TOUR_GROUP_2) > 0 && GroupGetCount(TOUR_GROUP_3) == 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are Team 2!");
                    for (int i = 0; i < GroupGetCount(TOUR_GROUP_2); i++)
                    {
                        u = GroupGetUnitByIndex(TOUR_GROUP_2, i);
                        SetUnitCurrentLife(u, GetUnitMaxLife(u));
                        SetUnitCurrentMana(u, GetUnitMaxMana(u));
                        SetUnitPosition(u, GetRectCenterX(revive_team2), GetRectCenterY(revive_team2));
                    }
                    SetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
                else if (GroupGetCount(TOUR_GROUP_1) == 0 && GroupGetCount(TOUR_GROUP_2) == 0 && GroupGetCount(TOUR_GROUP_3) > 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are Team 3!");
                    for (int i = 0; i < GroupGetCount(TOUR_GROUP_3); i++)
                    {
                        u = GroupGetUnitByIndex(TOUR_GROUP_3, i);
                        SetUnitCurrentLife(u, GetUnitMaxLife(u));
                        SetUnitCurrentMana(u, GetUnitMaxMana(u));
                        SetUnitPosition(u, GetRectCenterX(revive_team3), GetRectCenterY(revive_team3));
                    }
                    SetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
                else if (GroupGetCount(TOUR_GROUP_1) == 0 && GroupGetCount(TOUR_GROUP_2) == 0 && GroupGetCount(TOUR_GROUP_3) == 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Tournament Duo Draw!");
                    SetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
            }
        }
    });
}

void TourTeam()
{
    TimerStart(CreateTimer(), 0.02f, true, function()
    {
        timer tmr = GetExpiredTimer();
        int hid = GetHandleId(tmr);
        int count = LoadInteger(GameHT, hid, 'coun');
        group g1 = nil;
        group g2 = nil;
        unit u = nil;
        int pid = 0;
        float x = .0f;
        float y = .0f;

        count++;
        SaveInteger(GameHT, hid, 'coun', count);

        if (count == 1)
        {
            DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Tournament Team!");
            for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
            {
                if (reviveCD[i] > 3)
                {
                    reviveCD[i] = 3;
                }
            }
            SaveGroupHandle(GameHT, hid, 'grp1', CreateGroup());
            SaveGroupHandle(GameHT, hid, 'grp2', CreateGroup());
        }

        if (count == 200)
        {
            for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
            {
                if (MyHero[i] != nil)
                {
                    if (IsUnitAlly(MyHero[i], Player(3)))
                    {
                        SetUnitPosition(MyHero[i], GetRectCenterX(TourTeam_1), GetRectCenterY(TourTeam_1));
                        GroupAddUnit(TOUR_GROUP_1, MyHero[i]);
                    } 
                    else if (IsUnitAlly(MyHero[i], Player(7)))
                    {
                        SetUnitPosition(MyHero[i], GetRectCenterX(TourTeam_2), GetRectCenterY(TourTeam_2));
                        GroupAddUnit(TOUR_GROUP_2, MyHero[i]);
                    } 
                    else if (IsUnitAlly(MyHero[i], Player(11)))
                    {
                        SetUnitPosition(MyHero[i], GetRectCenterX(TourTeam_3), GetRectCenterY(TourTeam_3));
                        GroupAddUnit(TOUR_GROUP_3, MyHero[i]);
                    }
                    SetUnitCurrentLife(MyHero[i], GetUnitMaxLife(MyHero[i]));
                    SetUnitCurrentMana(MyHero[i], GetUnitMaxMana(MyHero[i]));
                    GroupAddUnit(TOUR_GROUP, MyHero[i]);
                }
            }
        }

        if (count < 400)
        {
            g1 = LoadGroupHandle(GameHT, hid, 'grp1');
            g2 = LoadGroupHandle(GameHT, hid, 'grp2');
            GroupEnumUnitsInRect(g1, GetWorldBounds(), nil);
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                u = GroupGetUnitByIndex(g1, i);
                pid = GetPlayerId(GetOwningPlayer(u));
                if (IsUnitAlive(u) && u == MyHero[pid])
                {
                    SetPauseUnit(u, true);
                    SetInvulUnit(u, true);
                    if (!IsUnitInGroup(u, g2)) { GroupAddUnit(g2, u); }
                }
            }
        }

        if (count == 400)
        {
            g1 = LoadGroupHandle(GameHT, hid, 'grp1');
            g2 = LoadGroupHandle(GameHT, hid, 'grp2');
            for (int i = 0; i < GroupGetCount(g2); i++)
            {
                u = GroupGetUnitByIndex(g2, i);
                SetPauseUnit(u, false);
                SetInvulUnit(u, false);
            }
            DestroyGroup(g1);
            DestroyGroup(g2);
        }

        if (count > 400)
        {
            for (int i = 0; i < GroupGetCount(TOUR_GROUP); i++)
            {
                u = GroupGetUnitByIndex(TOUR_GROUP, i);
                if (!IsUnitAlive(u))
                {
                    if (IsUnitInGroup(u, TOUR_GROUP))
                    {
                        GroupRemoveUnit(TOUR_GROUP, u);
                    }
                    if (IsUnitAlly(u, Player(3)) && IsUnitInGroup(u, TOUR_GROUP_1)) { GroupRemoveUnit(TOUR_GROUP_1, u); }
                    else if (IsUnitAlly(u, Player(7)) && IsUnitInGroup(u, TOUR_GROUP_2)) { GroupRemoveUnit(TOUR_GROUP_2, u); }
                    else if (IsUnitAlly(u, Player(11)) && IsUnitInGroup(u, TOUR_GROUP_3)) { GroupRemoveUnit(TOUR_GROUP_3, u); }
                    i = 0;
                }
                else
                {
                    if (!IsUnitPaused(u) && !IsUnitInvulnerable(u) && !IsUnitInGroup(u, HibariR_Group))
                    {
                        x = GetUnitX(u);
                        y = GetUnitY(u);
                        if (!RectContainsCoords(TourTeam_Area, x, y))
                        {
                            if (x > GetRectMaxX(TourTeam_Area)) { x = GetRectMaxX(TourTeam_Area) - 64; }
                            else if (x < GetRectMinX(TourTeam_Area)) { x = GetRectMinX(TourTeam_Area) + 64; }
                            if (y > GetRectMaxY(TourTeam_Area)) { y = GetRectMaxY(TourTeam_Area) - 64; }
                            else if (y < GetRectMinY(TourTeam_Area)) { y = GetRectMinY(TourTeam_Area) + 64; }
                            SetUnitPosition(u, x, y);
                        }
                    }
                }
            }

            if (count % 5 == 0)
            {
                if (GroupGetCount(TOUR_GROUP_1) > 0 && GroupGetCount(TOUR_GROUP_2) == 0 && GroupGetCount(TOUR_GROUP_3) == 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are Team 1!");
                    for (int i = 0; i < GroupGetCount(TOUR_GROUP_1); i++)
                    {
                        u = GroupGetUnitByIndex(TOUR_GROUP_1, i);
                        SetUnitCurrentLife(u, GetUnitMaxLife(u));
                        SetUnitCurrentMana(u, GetUnitMaxMana(u));
                        SetUnitPosition(u, GetRectCenterX(revive_team1), GetRectCenterY(revive_team1));
                    }
                    SetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                } 
                else if (GroupGetCount(TOUR_GROUP_1) == 0 && GroupGetCount(TOUR_GROUP_2) > 0 && GroupGetCount(TOUR_GROUP_3) == 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are Team 2!");
                    for (int i = 0; i < GroupGetCount(TOUR_GROUP_2); i++)
                    {
                        u = GroupGetUnitByIndex(TOUR_GROUP_2, i);
                        SetUnitCurrentLife(u, GetUnitMaxLife(u));
                        SetUnitCurrentMana(u, GetUnitMaxMana(u));
                        SetUnitPosition(u, GetRectCenterX(revive_team2), GetRectCenterY(revive_team2));
                    }
                    SetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
                else if (GroupGetCount(TOUR_GROUP_1) == 0 && GroupGetCount(TOUR_GROUP_2) == 0 && GroupGetCount(TOUR_GROUP_3) > 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Winner are Team 3!");
                    for (int i = 0; i < GroupGetCount(TOUR_GROUP_3); i++)
                    {
                        u = GroupGetUnitByIndex(TOUR_GROUP_3, i);
                        SetUnitCurrentLife(u, GetUnitMaxLife(u));
                        SetUnitCurrentMana(u, GetUnitMaxMana(u));
                        SetUnitPosition(u, GetRectCenterX(revive_team3), GetRectCenterY(revive_team3));
                    }
                    SetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    SetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD) + 500);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
                else if (GroupGetCount(TOUR_GROUP_1) == 0 && GroupGetCount(TOUR_GROUP_2) == 0 && GroupGetCount(TOUR_GROUP_3) == 0)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Tournament Team Draw!");
                    SetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    SetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD) + 300);
                    GroupClear(TOUR_GROUP);
                    GroupClear(TOUR_GROUP_1);
                    GroupClear(TOUR_GROUP_2);
                    GroupClear(TOUR_GROUP_3);
                    TOUR_CD = 300;
                    TimerStart(TOUR_TMR, 1.f, true, @TourStart);
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
            }
        }
    });
}

bool CreepPlayer()
{
    return GetOwningPlayer(GetFilterUnit()) == Player(3) || GetOwningPlayer(GetFilterUnit()) == Player(7) || GetOwningPlayer(GetFilterUnit()) == Player(11);
}

bool TelePlayer()
{
    return GetFilterUnit() == MyHero[GetPlayerId(GetOwningPlayer(GetFilterUnit()))] && !IsUnitPaused(GetFilterUnit()) && !IsUnitInvulnerable(GetFilterUnit());
}

void TourStart()
{
    TOUR_CD--;
    SetFrameText(myframe[170], I2S(TOUR_CD));
    if (TOUR_CD <= 0)
    {
        SetFrameText(myframe[170], "");
        TOUR_COUNT++;
        if (TOUR_COUNT == 1 || TOUR_COUNT == 2 || TOUR_COUNT == 7 || TOUR_COUNT == 14 || TOUR_COUNT == 15)
        {
            TourTeam();
        }
        else if (TOUR_COUNT == 3 || TOUR_COUNT == 9 || TOUR_COUNT == 13 || TOUR_COUNT == 17 || TOUR_COUNT == 19)
        {
            TourDuo();
        }
        else if (TOUR_COUNT == 4 || TOUR_COUNT == 10 || TOUR_COUNT == 12 || TOUR_COUNT == 18 || TOUR_COUNT == 20)
        {
            TourSolo();
        }
        else if (TOUR_COUNT == 5 || TOUR_COUNT == 8 || TOUR_COUNT == 11 || TOUR_COUNT == 16 || TOUR_COUNT >= 21)
        {
            TourDM();
        } else if (TOUR_COUNT == 6)
        {
            TourBoss();
        }
        PauseTimer(GetExpiredTimer());
    }
}

void GenericSystem()
{
    trigger t = nil;

    TimerStart(TOUR_TMR, 1.f, true, @TourStart);

    TimerStart(CreateTimer(), 1.f, true, function()
    {
        string s = "";
        GAME_SECOND++;
        if (GAME_SECOND >= 60)
        {
            GAME_SECOND = 0;
            GAME_MINUTE++;
        }
        if (GAME_MINUTE >= 60)
        {
            GAME_MINUTE = 0;
            GAME_HOUR++;
        }
        s = I2S(GAME_HOUR) + " : " + I2S(GAME_MINUTE) + " : " + I2S(GAME_SECOND);
        for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
        {
            if (GetFrameText(myframe[29]) != s && Player(i) == GetLocalPlayer())
            {
                SetFrameText(myframe[29], s);
            }
        }
    });

    TimerStart(CreateTimer(), 0.6f, true, function()
    {
        for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
        {
            if (i == 3 || i == 7 || i == 11)
            {
                continue;
            }
            SetPlayerState(Player(i), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(i), PLAYER_STATE_RESOURCE_GOLD) + 1);
        }
    });

    TimerStart(CreateTimer(), 30.f, true, function()
    {
        unit u = nil;

        CREEP_PATH_TEAM_1 = GetRandomInt(1, 2);
        CREEP_PATH_TEAM_2 = GetRandomInt(1, 2);
        CREEP_PATH_TEAM_3 = GetRandomInt(1, 2);
        CREEP_SPAWN++;
        for (int i = 0; i < 3; i++)
        {
            u = CreateUnit(Player(3), 'hfoo', GetRectCenterX(Bot_Team1), GetRectCenterY(Bot_Team1), .0f);
            u = CreateUnit(Player(3), 'hfoo', GetRectCenterX(Mid_Team1), GetRectCenterY(Mid_Team1), .0f);
            u = CreateUnit(Player(3), 'hfoo', GetRectCenterX(Top_Team1), GetRectCenterY(Top_Team1), .0f);
            u = CreateUnit(Player(7), 'hfoo', GetRectCenterX(Bot_Team2), GetRectCenterY(Bot_Team2), .0f);
            u = CreateUnit(Player(7), 'hfoo', GetRectCenterX(Mid_Team2), GetRectCenterY(Mid_Team2), .0f);
            u = CreateUnit(Player(7), 'hfoo', GetRectCenterX(Top_Team2), GetRectCenterY(Top_Team2), .0f);
            u = CreateUnit(Player(11), 'hfoo', GetRectCenterX(Left_Team3), GetRectCenterY(Left_Team3), .0f);
            u = CreateUnit(Player(11), 'hfoo', GetRectCenterX(Mid_Team3), GetRectCenterY(Mid_Team3), .0f);
            u = CreateUnit(Player(11), 'hfoo', GetRectCenterX(Right_Team3), GetRectCenterY(Right_Team3), .0f);
        }   

        for (int i = 0; i < 2; i++)
        {
            u = CreateUnit(Player(3), 'hrif', GetRectCenterX(Bot_Team1), GetRectCenterY(Bot_Team1), .0f);
            u = CreateUnit(Player(3), 'hrif', GetRectCenterX(Mid_Team1), GetRectCenterY(Mid_Team1), .0f);
            u = CreateUnit(Player(3), 'hrif', GetRectCenterX(Top_Team1), GetRectCenterY(Top_Team1), .0f);
            u = CreateUnit(Player(7), 'hrif', GetRectCenterX(Bot_Team2), GetRectCenterY(Bot_Team2), .0f);
            u = CreateUnit(Player(7), 'hrif', GetRectCenterX(Mid_Team2), GetRectCenterY(Mid_Team2), .0f);
            u = CreateUnit(Player(7), 'hrif', GetRectCenterX(Top_Team2), GetRectCenterY(Top_Team2), .0f);
            u = CreateUnit(Player(11), 'hrif', GetRectCenterX(Left_Team3), GetRectCenterY(Left_Team3), .0f);
            u = CreateUnit(Player(11), 'hrif', GetRectCenterX(Mid_Team3), GetRectCenterY(Mid_Team3), .0f);
            u = CreateUnit(Player(11), 'hrif', GetRectCenterX(Right_Team3), GetRectCenterY(Right_Team3), .0f);
        }

        if (CREEP_SPAWN == 2)
        {
            CREEP_SPAWN = 0;
            u = CreateUnit(Player(3), 'hmtt', GetRectCenterX(Bot_Team1), GetRectCenterY(Bot_Team1), .0f);
            u = CreateUnit(Player(3), 'hmtt', GetRectCenterX(Mid_Team1), GetRectCenterY(Mid_Team1), .0f);
            u = CreateUnit(Player(3), 'hmtt', GetRectCenterX(Top_Team1), GetRectCenterY(Top_Team1), .0f);
            u = CreateUnit(Player(7), 'hmtt', GetRectCenterX(Bot_Team2), GetRectCenterY(Bot_Team2), .0f);
            u = CreateUnit(Player(7), 'hmtt', GetRectCenterX(Mid_Team2), GetRectCenterY(Mid_Team2), .0f);
            u = CreateUnit(Player(7), 'hmtt', GetRectCenterX(Top_Team2), GetRectCenterY(Top_Team2), .0f);
            u = CreateUnit(Player(11), 'hmtt', GetRectCenterX(Left_Team3), GetRectCenterY(Left_Team3), .0f);
            u = CreateUnit(Player(11), 'hmtt', GetRectCenterX(Mid_Team3), GetRectCenterY(Mid_Team3), .0f);
            u = CreateUnit(Player(11), 'hmtt', GetRectCenterX(Right_Team3), GetRectCenterY(Right_Team3), .0f);
        }
    });

    t = CreateTrigger();
    TELE_REGION[0] = CreateRegion(); RegionAddRect(TELE_REGION[0], Top1_Tele); TriggerRegisterEnterRegion(t, TELE_REGION[0], Filter(@TelePlayer));
    TELE_REGION[1] = CreateRegion(); RegionAddRect(TELE_REGION[1], Mid1_Tele); TriggerRegisterEnterRegion(t, TELE_REGION[1], Filter(@TelePlayer));
    TELE_REGION[2] = CreateRegion(); RegionAddRect(TELE_REGION[2], Bot1_Tele); TriggerRegisterEnterRegion(t, TELE_REGION[2], Filter(@TelePlayer));
    TELE_REGION[3] = CreateRegion(); RegionAddRect(TELE_REGION[3], Top2_Tele); TriggerRegisterEnterRegion(t, TELE_REGION[3], Filter(@TelePlayer));
    TELE_REGION[4] = CreateRegion(); RegionAddRect(TELE_REGION[4], Mid2_Tele); TriggerRegisterEnterRegion(t, TELE_REGION[4], Filter(@TelePlayer));
    TELE_REGION[5] = CreateRegion(); RegionAddRect(TELE_REGION[5], Bot2_Tele); TriggerRegisterEnterRegion(t, TELE_REGION[5], Filter(@TelePlayer));
    TELE_REGION[6] = CreateRegion(); RegionAddRect(TELE_REGION[6], Left_Tele); TriggerRegisterEnterRegion(t, TELE_REGION[6], Filter(@TelePlayer));
    TELE_REGION[7] = CreateRegion(); RegionAddRect(TELE_REGION[7], Mid3_Tele); TriggerRegisterEnterRegion(t, TELE_REGION[7], Filter(@TelePlayer));
    TELE_REGION[8] = CreateRegion(); RegionAddRect(TELE_REGION[8], Right_Tele); TriggerRegisterEnterRegion(t, TELE_REGION[8], Filter(@TelePlayer));
    TriggerAddAction(t, function()
    {
        unit u = GetTriggerUnit();
        region reg = GetTriggeringRegion();
        int hid = 0;
        timer tmr = nil;
        int rid = -1;
        int pid = GetPlayerId(GetOwningPlayer(u));

        if (reg == TELE_REGION[0] && IsUnitAlive(PreUnit[6]))
        {
            rid = 0;
        }
        else if (reg == TELE_REGION[1] && IsUnitAlive(PreUnit[4]))
        {
            rid = 1;
        }
        else if (reg == TELE_REGION[2] && IsUnitAlive(PreUnit[5]))
        {
            rid = 2;
        }
        else if (reg == TELE_REGION[3] && IsUnitAlive(PreUnit[17]))
        {
            rid = 3;
        }
        else if (reg == TELE_REGION[4] && IsUnitAlive(PreUnit[16]))
        {
            rid = 4;
        }
        else if (reg == TELE_REGION[5] && IsUnitAlive(PreUnit[18]))
        {
            rid = 5;
        }
        else if (reg == TELE_REGION[6] && IsUnitAlive(PreUnit[33]))
        {
            rid = 6;
        }
        else if (reg == TELE_REGION[7] && IsUnitAlive(PreUnit[34]))
        {
            rid = 7;
        }
        else if (reg == TELE_REGION[8] && IsUnitAlive(PreUnit[35]))
        {
            rid = 8;
        }

        if (rid != -1)
        {
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 'cstr', u);
            SaveInteger(GameHT, hid, 'regi', rid);
            TimerStart(tmr, 0.02, true, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit u = LoadUnitHandle(GameHT, hid, 'cstr');
                int regi = LoadInteger(GameHT, hid, 'regi');
                int count = LoadInteger(GameHT, hid, 'coun');
                int pid = GetPlayerId(GetOwningPlayer(u));
                effect e = nil;

                if ((regi == 0 && Distance(GetUnitX(u), GetUnitY(u), GetRectCenterX(Top1_Tele), GetRectCenterY(Top1_Tele)) > 300) || (regi == 1 && Distance(GetUnitX(u), GetUnitY(u), GetRectCenterX(Mid1_Tele), GetRectCenterY(Mid1_Tele)) > 300)
                || (regi == 2 && Distance(GetUnitX(u), GetUnitY(u), GetRectCenterX(Bot1_Tele), GetRectCenterY(Bot1_Tele)) > 300) || (regi == 3 && Distance(GetUnitX(u), GetUnitY(u), GetRectCenterX(Top2_Tele), GetRectCenterY(Top2_Tele)) > 300)
                || (regi == 4 && Distance(GetUnitX(u), GetUnitY(u), GetRectCenterX(Mid2_Tele), GetRectCenterY(Mid2_Tele)) > 300) || (regi == 5 && Distance(GetUnitX(u), GetUnitY(u), GetRectCenterX(Bot2_Tele), GetRectCenterY(Bot2_Tele)) > 300)
                || (regi == 6 && Distance(GetUnitX(u), GetUnitY(u), GetRectCenterX(Left_Tele), GetRectCenterY(Left_Tele)) > 300) || (regi == 7 && Distance(GetUnitX(u), GetUnitY(u), GetRectCenterX(Mid3_Tele), GetRectCenterY(Mid3_Tele)) > 300)
                || (regi == 8 && Distance(GetUnitX(u), GetUnitY(u), GetRectCenterX(Right_Tele), GetRectCenterY(Right_Tele)) > 300) || !IsUnitAlive(u) || IsUnitInvulnerable(u) || IsUnitPaused(u))
                {
                    e = LoadEffectHandle(GameHT, hid, 0);
                    if (e != nil)
                    {
                        DestroyEffectTimed(e, .01f);
                    }
                    e = LoadEffectHandle(GameHT, hid, 1);
                    if (e != nil)
                    {
                        DestroyEffectTimed(e, .01f);
                    }
                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                    return;
                }

                count++;
                SaveInteger(GameHT, hid, 'coun', count);

                if (count == 1)
                {
                    e = AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdx", u, "origin");
                    SaveEffectHandle(GameHT, hid, 0, e);
                    DestroyEffectTimed(e, 3);
                    switch (regi)
                    {
                        case 0:
                        e = AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdx", PreUnit[6], "origin");
                        SaveEffectHandle(GameHT, hid, 1, e);
                        DestroyEffectTimed(e, 3);
                        break;

                        case 1:
                        e = AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdx", PreUnit[4], "origin");
                        SaveEffectHandle(GameHT, hid, 1, e);
                        DestroyEffectTimed(e, 3);
                        break;

                        case 2:
                        e = AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdx", PreUnit[5], "origin");
                        SaveEffectHandle(GameHT, hid, 1, e);
                        DestroyEffectTimed(e, 3);
                        break;

                        case 3:
                        e = AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdx", PreUnit[17], "origin");
                        SaveEffectHandle(GameHT, hid, 1, e);
                        DestroyEffectTimed(e, 3);
                        break;

                        case 4:
                        e = AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdx", PreUnit[16], "origin");
                        SaveEffectHandle(GameHT, hid, 1, e);
                        DestroyEffectTimed(e, 3);
                        break;

                        case 5:
                        e = AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdx", PreUnit[18], "origin");
                        SaveEffectHandle(GameHT, hid, 1, e);
                        DestroyEffectTimed(e, 3);
                        break;

                        case 6:
                        e = AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdx", PreUnit[33], "origin");
                        SaveEffectHandle(GameHT, hid, 1, e);
                        DestroyEffectTimed(e, 3);
                        break;

                        case 7:
                        e = AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdx", PreUnit[34], "origin");
                        SaveEffectHandle(GameHT, hid, 1, e);
                        DestroyEffectTimed(e, 3);
                        break;

                        case 8:
                        e = AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTo.mdx", PreUnit[35], "origin");
                        SaveEffectHandle(GameHT, hid, 1, e);
                        DestroyEffectTimed(e, 3);
                        break;
                    }
                }

                if (count == 150)
                {
                    DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportCaster.mdx", u, "origin"), 1);
                    switch (regi)
                    {
                        case 0:
                        SetUnitPosition(u, GetUnitX(PreUnit[6]), GetUnitY(PreUnit[6]));
                        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdx", PreUnit[6], "origin"), 1);
                        break;

                        case 1:
                        SetUnitPosition(u, GetUnitX(PreUnit[4]), GetUnitY(PreUnit[4]));
                        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdx", PreUnit[4], "origin"), 1);
                        break;

                        case 2:
                        SetUnitPosition(u, GetUnitX(PreUnit[5]), GetUnitY(PreUnit[5]));
                        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdx", PreUnit[5], "origin"), 1);
                        break;

                        case 3:
                        SetUnitPosition(u, GetUnitX(PreUnit[17]), GetUnitY(PreUnit[17]));
                        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdx", PreUnit[17], "origin"), 1);
                        break;

                        case 4:
                        SetUnitPosition(u, GetUnitX(PreUnit[16]), GetUnitY(PreUnit[16]));
                        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdx", PreUnit[16], "origin"), 1);
                        break;

                        case 5:
                        SetUnitPosition(u, GetUnitX(PreUnit[18]), GetUnitY(PreUnit[18]));
                        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdx", PreUnit[18], "origin"), 1);
                        break;

                        case 6:
                        SetUnitPosition(u, GetUnitX(PreUnit[33]), GetUnitY(PreUnit[33]));
                        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdx", PreUnit[33], "origin"), 1);
                        break;

                        case 7:
                        SetUnitPosition(u, GetUnitX(PreUnit[34]), GetUnitY(PreUnit[34]));
                        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdx", PreUnit[34], "origin"), 1);
                        break;

                        case 8:
                        SetUnitPosition(u, GetUnitX(PreUnit[35]), GetUnitY(PreUnit[35]));
                        DestroyEffectTimed(AddSpecialEffectTarget("Abilities\\Spells\\Human\\MassTeleport\\MassTeleportTarget.mdx", PreUnit[35], "origin"), 1);
                        break;
                    }
                    PanCameraToTimedForPlayer(GetOwningPlayer(u), GetUnitX(u), GetUnitY(u), .0f);

                    FlushChildHashtable(GameHT, hid);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
            });
        }
    });

    t = CreateTrigger();
    CREEP_REGION[0] = CreateRegion(); RegionAddRect(CREEP_REGION[0], Bot_Team1); TriggerRegisterEnterRegion(t, CREEP_REGION[0], Filter(@CreepPlayer));
    CREEP_REGION[1] = CreateRegion(); RegionAddRect(CREEP_REGION[1], Mid_Team1); TriggerRegisterEnterRegion(t, CREEP_REGION[1], Filter(@CreepPlayer));
    CREEP_REGION[2] = CreateRegion(); RegionAddRect(CREEP_REGION[2], Top_Team1); TriggerRegisterEnterRegion(t, CREEP_REGION[2], Filter(@CreepPlayer));
    CREEP_REGION[3] = CreateRegion(); RegionAddRect(CREEP_REGION[3], Bot_Team2); TriggerRegisterEnterRegion(t, CREEP_REGION[3], Filter(@CreepPlayer));
    CREEP_REGION[4] = CreateRegion(); RegionAddRect(CREEP_REGION[4], Mid_Team2); TriggerRegisterEnterRegion(t, CREEP_REGION[4], Filter(@CreepPlayer));
    CREEP_REGION[5] = CreateRegion(); RegionAddRect(CREEP_REGION[5], Top_Team2); TriggerRegisterEnterRegion(t, CREEP_REGION[5], Filter(@CreepPlayer));
    CREEP_REGION[6] = CreateRegion(); RegionAddRect(CREEP_REGION[6], Left_Team3); TriggerRegisterEnterRegion(t, CREEP_REGION[6], Filter(@CreepPlayer));
    CREEP_REGION[7] = CreateRegion(); RegionAddRect(CREEP_REGION[7], Mid_Team3); TriggerRegisterEnterRegion(t, CREEP_REGION[7], Filter(@CreepPlayer));
    CREEP_REGION[8] = CreateRegion(); RegionAddRect(CREEP_REGION[8], Right_Team3); TriggerRegisterEnterRegion(t, CREEP_REGION[8], Filter(@CreepPlayer));
    CREEP_REGION[9] = CreateRegion(); RegionAddRect(CREEP_REGION[9], Map_Left); TriggerRegisterEnterRegion(t, CREEP_REGION[9], Filter(@CreepPlayer));
    CREEP_REGION[10] = CreateRegion(); RegionAddRect(CREEP_REGION[10], Map_Right); TriggerRegisterEnterRegion(t, CREEP_REGION[10], Filter(@CreepPlayer));
    CREEP_REGION[11] = CreateRegion(); RegionAddRect(CREEP_REGION[11], Map_Center); TriggerRegisterEnterRegion(t, CREEP_REGION[11], Filter(@CreepPlayer));
    CREEP_REGION[12] = CreateRegion(); RegionAddRect(CREEP_REGION[12], Map_Top); TriggerRegisterEnterRegion(t, CREEP_REGION[12], Filter(@CreepPlayer));
    TriggerAddAction(t, function()
    {
        unit u = GetTriggerUnit();
        region reg = GetTriggeringRegion();
        int hid = GetHandleId(u);

        if (reg == CREEP_REGION[0] && GetOwningPlayer(u) == Player(3))
        {
            IssuePointOrderById(u, 851983, GetRectCenterX(Map_Left), GetRectCenterY(Map_Left));
        } 

        else if (reg == CREEP_REGION[6] && GetOwningPlayer(u) == Player(11))
        {
            IssuePointOrderById(u, 851983, GetRectCenterX(Map_Left), GetRectCenterY(Map_Left));
        }

        else if (reg == CREEP_REGION[3] && GetOwningPlayer(u) == Player(7))
        {
            IssuePointOrderById(u, 851983, GetRectCenterX(Map_Right), GetRectCenterY(Map_Right));
        } 

        else if (reg == CREEP_REGION[8] && GetOwningPlayer(u) == Player(11))
        {
            IssuePointOrderById(u, 851983, GetRectCenterX(Map_Right), GetRectCenterY(Map_Right));
        }

        else if (reg == CREEP_REGION[1] && GetOwningPlayer(u) == Player(3))
        {
            IssuePointOrderById(u, 851983, GetRectCenterX(Map_Center), GetRectCenterY(Map_Center));
            SaveInteger(GameHT, hid, 'crep', CREEP_PATH_TEAM_1);
        } 

        else if (reg == CREEP_REGION[4] && GetOwningPlayer(u) == Player(7))
        {
            IssuePointOrderById(u, 851983, GetRectCenterX(Map_Center), GetRectCenterY(Map_Center));
            SaveInteger(GameHT, hid, 'crep', CREEP_PATH_TEAM_2);
        }

        else if (reg == CREEP_REGION[7] && GetOwningPlayer(u) == Player(11))
        {
            IssuePointOrderById(u, 851983, GetRectCenterX(Map_Center), GetRectCenterY(Map_Center));
            SaveInteger(GameHT, hid, 'crep', CREEP_PATH_TEAM_3);
        }

        else if (reg == CREEP_REGION[2] && GetOwningPlayer(u) == Player(3))
        {
            IssuePointOrderById(u, 851983, GetRectCenterX(Map_Top), GetRectCenterY(Map_Top));
        } 

        else if (reg == CREEP_REGION[5] && GetOwningPlayer(u) == Player(7))
        {
            IssuePointOrderById(u, 851983, GetRectCenterX(Map_Top), GetRectCenterY(Map_Top));
        }

        else if (reg == CREEP_REGION[9])
        {
            if (GetOwningPlayer(u) == Player(3))
            {
                IssuePointOrderById(u, 851983, GetRectCenterX(Left_Team3), GetRectCenterY(Left_Team3));
            }
            else if (GetOwningPlayer(u) == Player(11))
            {
                IssuePointOrderById(u, 851983, GetRectCenterX(Bot_Team1), GetRectCenterY(Bot_Team1));
            }
        }

        else if (reg == CREEP_REGION[10])
        {
            if (GetOwningPlayer(u) == Player(7))
            {
                IssuePointOrderById(u, 851983, GetRectCenterX(Right_Team3), GetRectCenterY(Right_Team3));
            }
            else if (GetOwningPlayer(u) == Player(11))
            {
                IssuePointOrderById(u, 851983, GetRectCenterX(Bot_Team2), GetRectCenterY(Bot_Team2));
            }
        }

        else if (reg == CREEP_REGION[11])
        {
            if (GetOwningPlayer(u) == Player(3))
            {
                if (LoadInteger(GameHT, hid, 'crep') == 1)
                {
                    IssuePointOrderById(u, 851983, GetRectCenterX(Mid_Team2), GetRectCenterY(Mid_Team2));
                }
                else
                {
                    IssuePointOrderById(u, 851983, GetRectCenterX(Mid_Team3), GetRectCenterY(Mid_Team3));
                }
            }
            else if (GetOwningPlayer(u) == Player(7))
            {
                if (LoadInteger(GameHT, hid, 'crep') == 1)
                {
                    IssuePointOrderById(u, 851983, GetRectCenterX(Mid_Team3), GetRectCenterY(Mid_Team3));
                }
                else
                {
                    IssuePointOrderById(u, 851983, GetRectCenterX(Mid_Team1), GetRectCenterY(Mid_Team1));
                }
            }
            else if (GetOwningPlayer(u) == Player(11))
            {
                if (LoadInteger(GameHT, hid, 'crep') == 1)
                {
                    IssuePointOrderById(u, 851983, GetRectCenterX(Mid_Team1), GetRectCenterY(Mid_Team1));
                }
                else
                {
                    IssuePointOrderById(u, 851983, GetRectCenterX(Mid_Team2), GetRectCenterY(Mid_Team2));
                }
            }
        }

        else if (reg == CREEP_REGION[12])
        {
            if (GetOwningPlayer(u) == Player(3))
            {
                IssuePointOrderById(u, 851983, GetRectCenterX(Top_Team2), GetRectCenterY(Top_Team2));
            }
            else if (GetOwningPlayer(u) == Player(7))
            {
                IssuePointOrderById(u, 851983, GetRectCenterX(Top_Team1), GetRectCenterY(Top_Team1));
            }
        }
    });
}

void GoldBountyText(unit u, player p, int gold)
{
    string s = "";
    texttag tt = nil;

    SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) + gold);
    if (gold < 0)
    {
        s = I2S(gold);
    }
    else
    {
        s = "+" + I2S(gold);
    }

    if (p == GetLocalPlayer())
    {
        tt = CreateTextTag();
        SetTextTagText(tt, s, 0.0253f);
        SetTextTagPos(tt, GetUnitX(u), GetUnitY(u), .0f);
        SetTextTagColor(tt, 255, 220, 0, 255);
        SetTextTagVelocity(tt, 0, 0.03);
        SetTextTagLifespan(tt, 1);
        SetTextTagPermanent(tt, false);
    }
}

void DeathEvent()
{
    for (int i = 0; i <= PLAYER_NEUTRAL_PASSIVE; i++)
    {
        TriggerRegisterPlayerUnitEvent(deathTrig, Player(i), EVENT_PLAYER_UNIT_DEATH, nil);
    }
    TriggerAddAction(deathTrig, function()
    {
        unit u = GetKillingUnit();
        unit t = GetTriggerUnit();
        int pid1 = GetPlayerId(GetOwningPlayer(u));
        int pid2 = GetPlayerId(GetOwningPlayer(t));
        timer tmr = nil;
        int hid = 0;
        int utypeid = GetUnitTypeId(t);
        string str = "";
        string str2 = "";
        int bt1 = 0;
        int bt2 = 0;
        int gold = 0;
        unit d = nil;
        group g1 = nil;
        group g2 = nil;
        int xpc = 0;
        int xpamount = 0;

        if (utypeid == 'hfoo' || utypeid == 'hrif' || utypeid == 'hmtt')
        {
            bt1 = GetUnitIntegerField(t, UNIT_IF_GOLD_BOUNTY_AWARDED_BASE) + GetUnitIntegerField(t, UNIT_IF_GOLD_BOUNTY_AWARDED_NUMBER_OF_DICE);
            bt2 = bt1 + GetUnitIntegerField(t, UNIT_IF_GOLD_BOUNTY_AWARDED_NUMBER_OF_DICE) * GetUnitIntegerField(t, UNIT_IF_GOLD_BOUNTY_AWARDED_SIDES_PER_DIE);
            gold = GetRandomInt(bt1, bt2);
            xpamount = 80;

            g1 = CreateGroup();
            g2 = CreateGroup();
            if (GetOwningPlayer(u) == Player(3) || GetOwningPlayer(u) == Player(7) || GetOwningPlayer(u) == Player(11))
            {
                GroupEnumUnitsInRect(g1, GetWorldBounds(), nil);
            }
            else
            {
                GoldBountyText(t, GetOwningPlayer(u), gold);
                GroupEnumUnitsInRange(g1, GetUnitX(t), GetUnitY(t), 1500, nil);
            }
            for (int i = 0; i < GroupGetCount(g1); i++)
            {
                d = GroupGetUnitByIndex(g1, i);
                if (IsUnitAlly(u, GetOwningPlayer(d)) && MyHero[GetPlayerId(GetOwningPlayer(d))] == d && !IsUnitInGroup(d, g2))
                {
                    xpc++;
                    GroupAddUnit(g2, d);
                }
            }
            for (int i = 0; i < GroupGetCount(g2); i++)
            {
                d = GroupGetUnitByIndex(g2, i);
                if (GetHeroLevel(d) != 50)
                {
                    AddHeroXP(d, xpamount/xpc, true);
                }
            }
            DestroyGroup(g1);
            DestroyGroup(g2);

            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 0, t);
            TimerStart(tmr, 3.f, false, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit t = LoadUnitHandle(GameHT, hid, 0);

                RemoveSavedInteger(GameHT, GetHandleId(t), 'crep');
                RemoveUnit(t);
                FlushChildHashtable(GameHT, hid);
                DestroyTimer(tmr);
            });
        }

        if (utypeid == 'o001' || utypeid == 'o000')
        {
            for (int i = 0; i < 12; i++)
            {
                if (i == 3 || i == 7 || i == 11) { continue; }
                if (IsPlayerAlly(Player(i), GetOwningPlayer(u)))
                {
                    GoldBountyText(MyHero[i], Player(i), utypeid == 'o001' ? 500 : 800);
                }
            }
            
            if (t == PreUnit[4])
            {
                SetInvulUnit(PreUnit[8], false);
            }
            else if (t == PreUnit[5])
            {
                SetInvulUnit(PreUnit[7], false);
            }
            else if (t == PreUnit[6])
            {
                SetInvulUnit(PreUnit[9], false);
            }
            else if (t == PreUnit[16])
            {
                SetInvulUnit(PreUnit[19], false);
            }
            else if (t == PreUnit[17])
            {
                SetInvulUnit(PreUnit[22], false);
                SetInvulUnit(PreUnit[23], false);
            }
            else if (t == PreUnit[18])
            {
                SetInvulUnit(PreUnit[20], false);
                SetInvulUnit(PreUnit[21], false);
            }
            else if (t == PreUnit[33])
            {
                SetInvulUnit(PreUnit[32], false);
                SetInvulUnit(PreUnit[37], false);
            }
            else if (t == PreUnit[34])
            {
                SetInvulUnit(PreUnit[31], false);
            }
            else if (t == PreUnit[35])
            {
                SetInvulUnit(PreUnit[30], false);
                SetInvulUnit(PreUnit[36], false);
            }

            if (!IsUnitAlive(PreUnit[7]) && !IsUnitAlive(PreUnit[8]) && !IsUnitAlive(PreUnit[9]))
            {
                SetInvulUnit(PreUnit[10], false);
            }

            if (!IsUnitAlive(PreUnit[19]) && !IsUnitAlive(PreUnit[20]) && !IsUnitAlive(PreUnit[21]) && !IsUnitAlive(PreUnit[22]) && !IsUnitAlive(PreUnit[23]))
            {
                SetInvulUnit(PreUnit[24], false);
            }

            if (!IsUnitAlive(PreUnit[30]) && !IsUnitAlive(PreUnit[31]) && !IsUnitAlive(PreUnit[32]) && !IsUnitAlive(PreUnit[36]) && !IsUnitAlive(PreUnit[37]))
            {
                SetInvulUnit(PreUnit[38], false);
            }

            if (t == PreUnit[10] || t == PreUnit[24] || t == PreUnit[38])
            {
                if (IsUnitAlly(u, Player(3)) && t != PreUnit[10])
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Team1 WIN");
                    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                    {
                        if (i == 3 || i == 7 || i == 11) { continue; }
                        MMD::updateValue("Kill", Player(i), "=", I2S(HERO_KILL[i]));
                        MMD::updateValue("Death", Player(i), "=", I2S(HERO_DEATH[i]));
                        MMD::updateValue("Assist", Player(i), "=", I2S(HERO_ASSIST[i]));
                        MMD::updateValue("Damage", Player(i), "=", I2S(R2I(LoadReal(GameHT, GetHandleId(MyHero[i]), StringHash("DamageDealt")))));
                        if (i >= 4 && i <= 10)
                        {
                            MMD::setPlayerFlag(Player(i), "loser");
                        }
                        else
                        {
                            MMD::setPlayerFlag(Player(i), "winner");
                        }
                    }
                    TimerStart(CreateTimer(), 3.f, false, function()
                    {
                        DestroyTimer(GetExpiredTimer());
                        for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                        {
                            if (i == 3 || i == 7 || i == 11) { continue; }
                            if (i >= 4 && i <= 10)
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_DEFEAT);
                            }
                            else
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_VICTORY);
                            }
                        }
                        EndGame(true);
                    });
                }

                if (IsUnitAlly(u, Player(7)) && t != PreUnit[24])
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Team2 WIN");
                    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                    {
                        if (i == 3 || i == 7 || i == 11) { continue; }
                        MMD::updateValue("Kill", Player(i), "=", I2S(HERO_KILL[i]));
                        MMD::updateValue("Death", Player(i), "=", I2S(HERO_DEATH[i]));
                        MMD::updateValue("Assist", Player(i), "=", I2S(HERO_ASSIST[i]));
                        MMD::updateValue("Damage", Player(i), "=", I2S(R2I(LoadReal(GameHT, GetHandleId(MyHero[i]), StringHash("DamageDealt")))));
                        if (i >= 0 && i <= 2 || i >= 8 && i <= 10)
                        {
                            MMD::setPlayerFlag(Player(i), "loser");
                        }
                        else
                        {
                            MMD::setPlayerFlag(Player(i), "winner");
                        }
                    }
                    TimerStart(CreateTimer(), 3.f, false, function()
                    {
                        DestroyTimer(GetExpiredTimer());
                        for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                        {
                            if (i == 3 || i == 7 || i == 11) { continue; }
                            if (i >= 0 && i <= 2 || i >= 8 && i <= 10)
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_DEFEAT);
                            }
                            else
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_VICTORY);
                            }
                        }
                        EndGame(true);
                    });
                }

                if (IsUnitAlly(u, Player(11)) && t != PreUnit[38])
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Team3 WIN");
                    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                    {
                        if (i == 3 || i == 7 || i == 11) { continue; }
                        MMD::updateValue("Kill", Player(i), "=", I2S(HERO_KILL[i]));
                        MMD::updateValue("Death", Player(i), "=", I2S(HERO_DEATH[i]));
                        MMD::updateValue("Assist", Player(i), "=", I2S(HERO_ASSIST[i]));
                        MMD::updateValue("Damage", Player(i), "=", I2S(R2I(LoadReal(GameHT, GetHandleId(MyHero[i]), StringHash("DamageDealt")))));
                        if (i >= 0 && i <= 6)
                        {
                            MMD::setPlayerFlag(Player(i), "loser");
                        }
                        else
                        {
                            MMD::setPlayerFlag(Player(i), "winner");
                        }
                    }
                    TimerStart(CreateTimer(), 3.f, false, function()
                    {
                        DestroyTimer(GetExpiredTimer());
                        for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                        {
                            if (i == 3 || i == 7 || i == 11) { continue; }
                            if (i >= 0 && i <= 6)
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_DEFEAT);
                            }
                            else
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_VICTORY);
                            }
                        }
                        EndGame(true);
                    });
                }
            }
        }
        
        if (t == MyHero[pid2])
        {
            if (IsUnitAlly(u, Player(3)))
            {
                SCORE_KILL[0]++;
                SetFrameText(myframe[167], I2S(SCORE_KILL[0]));
                if (SCORE_KILL[0] == MAX_POIN_KILL)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Team1 WIN");
                    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                    {
                        if (i == 3 || i == 7 || i == 11) { continue; }
                        MMD::updateValue("Kill", Player(i), "=", I2S(HERO_KILL[i]));
                        MMD::updateValue("Death", Player(i), "=", I2S(HERO_DEATH[i]));
                        MMD::updateValue("Assist", Player(i), "=", I2S(HERO_ASSIST[i]));
                        MMD::updateValue("Damage", Player(i), "=", I2S(R2I(LoadReal(GameHT, GetHandleId(MyHero[i]), StringHash("DamageDealt")))));
                        if (i >= 4 && i <= 10)
                        {
                            MMD::setPlayerFlag(Player(i), "loser");
                        }
                        else
                        {
                            MMD::setPlayerFlag(Player(i), "winner");
                        }
                    }
                    TimerStart(CreateTimer(), 3.f, false, function()
                    {
                        DestroyTimer(GetExpiredTimer());
                        for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                        {
                            if (i == 3 || i == 7 || i == 11) { continue; }
                            if (i >= 4 && i <= 10)
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_DEFEAT);
                            }
                            else
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_VICTORY);
                            }
                        }
                        EndGame(true);
                    });
                }
            } 
            else if (IsUnitAlly(u, Player(7)))
            {
                SCORE_KILL[1]++;
                SetFrameText(myframe[168], I2S(SCORE_KILL[1]));
                if (SCORE_KILL[1] == MAX_POIN_KILL)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Team2 WIN");
                    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                    {
                        if (i == 3 || i == 7 || i == 11) { continue; }
                        MMD::updateValue("Kill", Player(i), "=", I2S(HERO_KILL[i]));
                        MMD::updateValue("Death", Player(i), "=", I2S(HERO_DEATH[i]));
                        MMD::updateValue("Assist", Player(i), "=", I2S(HERO_ASSIST[i]));
                        MMD::updateValue("Damage", Player(i), "=", I2S(R2I(LoadReal(GameHT, GetHandleId(MyHero[i]), StringHash("DamageDealt")))));
                        if (i >= 0 && i <= 2 || i >= 8 && i <= 10)
                        {
                            MMD::setPlayerFlag(Player(i), "loser");
                        }
                        else
                        {
                            MMD::setPlayerFlag(Player(i), "winner");
                        }
                    }
                    TimerStart(CreateTimer(), 3.f, false, function()
                    {
                        DestroyTimer(GetExpiredTimer());
                        for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                        {
                            if (i == 3 || i == 7 || i == 11) { continue; }
                            if (i >= 0 && i <= 2 || i >= 8 && i <= 10)
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_DEFEAT);
                            }
                            else
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_VICTORY);
                            }
                        }
                        EndGame(true);
                    });
                }
            }
            else if (IsUnitAlly(u, Player(11)))
            {
                SCORE_KILL[2]++;
                SetFrameText(myframe[169], I2S(SCORE_KILL[2]));
                if (SCORE_KILL[2] == MAX_POIN_KILL)
                {
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "Team3 WIN");
                    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                    {
                        if (i == 3 || i == 7 || i == 11) { continue; }
                        MMD::updateValue("Kill", Player(i), "=", I2S(HERO_KILL[i]));
                        MMD::updateValue("Death", Player(i), "=", I2S(HERO_DEATH[i]));
                        MMD::updateValue("Assist", Player(i), "=", I2S(HERO_ASSIST[i]));
                        MMD::updateValue("Damage", Player(i), "=", I2S(R2I(LoadReal(GameHT, GetHandleId(MyHero[i]), StringHash("DamageDealt")))));
                        if (i >= 0 && i <= 6)
                        {
                            MMD::setPlayerFlag(Player(i), "loser");
                        }
                        else
                        {
                            MMD::setPlayerFlag(Player(i), "winner");
                        }
                    }
                    TimerStart(CreateTimer(), 3.f, false, function()
                    {
                        DestroyTimer(GetExpiredTimer());
                        for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                        {
                            if (i == 3 || i == 7 || i == 11) { continue; }
                            if (i >= 0 && i <= 6)
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_DEFEAT);
                            }
                            else
                            {
                                RemovePlayer(Player(i), PLAYER_GAME_RESULT_VICTORY);
                            }
                        }
                        EndGame(true);
                    });
                }
            }
            reviveCD[pid2] = 12;
            tmr = CreateTimer();
            hid = GetHandleId(tmr);
            SaveUnitHandle(GameHT, hid, 0, t);
            switch (pid2)
            {
                case 0:
                SetFrameTexture(myframe[30], StringReplace(GetUnitStringField(t, UNIT_SF_ICON_NORMAL), "buttons\\", "buttonsdisabled\\dis", false), 0, false);
                SetFrameText(myframe[31], I2S(reviveCD[pid2]));
                break;
                case 1: 
                SetFrameTexture(myframe[32], StringReplace(GetUnitStringField(t, UNIT_SF_ICON_NORMAL), "buttons\\", "buttonsdisabled\\dis", false), 0, false); 
                SetFrameText(myframe[33], I2S(reviveCD[pid2]));
                break;
                case 2: 
                SetFrameTexture(myframe[34], StringReplace(GetUnitStringField(t, UNIT_SF_ICON_NORMAL), "buttons\\", "buttonsdisabled\\dis", false), 0, false);
                SetFrameText(myframe[35], I2S(reviveCD[pid2]));
                break;
                case 4: 
                SetFrameTexture(myframe[36], StringReplace(GetUnitStringField(t, UNIT_SF_ICON_NORMAL), "buttons\\", "buttonsdisabled\\dis", false), 0, false);
                SetFrameText(myframe[37], I2S(reviveCD[pid2]));
                break;
                case 5: 
                SetFrameTexture(myframe[38], StringReplace(GetUnitStringField(t, UNIT_SF_ICON_NORMAL), "buttons\\", "buttonsdisabled\\dis", false), 0, false);
                SetFrameText(myframe[39], I2S(reviveCD[pid2]));
                break;
                case 6: 
                SetFrameTexture(myframe[40], StringReplace(GetUnitStringField(t, UNIT_SF_ICON_NORMAL), "buttons\\", "buttonsdisabled\\dis", false), 0, false); 
                SetFrameText(myframe[41], I2S(reviveCD[pid2]));
                break;
                case 8: 
                SetFrameTexture(myframe[42], StringReplace(GetUnitStringField(t, UNIT_SF_ICON_NORMAL), "buttons\\", "buttonsdisabled\\dis", false), 0, false); 
                SetFrameText(myframe[43], I2S(reviveCD[pid2]));
                break;
                case 9: 
                SetFrameTexture(myframe[44], StringReplace(GetUnitStringField(t, UNIT_SF_ICON_NORMAL), "buttons\\", "buttonsdisabled\\dis", false), 0, false); 
                SetFrameText(myframe[45], I2S(reviveCD[pid2]));
                break;
                case 10: 
                SetFrameTexture(myframe[46], StringReplace(GetUnitStringField(t, UNIT_SF_ICON_NORMAL), "buttons\\", "buttonsdisabled\\dis", false), 0, false);
                SetFrameText(myframe[47], I2S(reviveCD[pid2]));
                break;
            }
            TimerStart(tmr, 1.f, true, function()
            {
                timer tmr = GetExpiredTimer();
                int hid = GetHandleId(tmr);
                unit t = LoadUnitHandle(GameHT, hid, 0);
                int pid2 = GetPlayerId(GetOwningPlayer(t));

                reviveCD[pid2]--;
                switch (pid2)
                {
                    case 0: SetFrameText(myframe[31], I2S(reviveCD[pid2])); break;
                    case 1: SetFrameText(myframe[33], I2S(reviveCD[pid2])); break;
                    case 2: SetFrameText(myframe[35], I2S(reviveCD[pid2])); break;
                    case 4: SetFrameText(myframe[37], I2S(reviveCD[pid2])); break;
                    case 5: SetFrameText(myframe[39], I2S(reviveCD[pid2])); break;
                    case 6: SetFrameText(myframe[41], I2S(reviveCD[pid2])); break;
                    case 8: SetFrameText(myframe[43], I2S(reviveCD[pid2])); break;
                    case 9: SetFrameText(myframe[45], I2S(reviveCD[pid2])); break;
                    case 10: SetFrameText(myframe[47], I2S(reviveCD[pid2])); break;
                }
                if (reviveCD[pid2] <= 0)
                {
                    switch (pid2)
                    {
                        case 0: 
                        SetFrameTexture(myframe[30], GetUnitStringField(t, UNIT_SF_ICON_NORMAL), 0, false);
                        SetFrameText(myframe[31], ""); 
                        break;
                        case 1: 
                        SetFrameTexture(myframe[32], GetUnitStringField(t, UNIT_SF_ICON_NORMAL), 0, false);
                        SetFrameText(myframe[33], ""); 
                        break;
                        case 2:
                        SetFrameTexture(myframe[34], GetUnitStringField(t, UNIT_SF_ICON_NORMAL), 0, false);
                        SetFrameText(myframe[35], ""); 
                        break;
                        case 4: 
                        SetFrameTexture(myframe[36], GetUnitStringField(t, UNIT_SF_ICON_NORMAL), 0, false);
                        SetFrameText(myframe[37], ""); 
                        break;
                        case 5: 
                        SetFrameTexture(myframe[38], GetUnitStringField(t, UNIT_SF_ICON_NORMAL), 0, false);
                        SetFrameText(myframe[39], "");
                        break;
                        case 6: 
                        SetFrameTexture(myframe[40], GetUnitStringField(t, UNIT_SF_ICON_NORMAL), 0, false);
                        SetFrameText(myframe[41], ""); 
                        break;
                        case 8: 
                        SetFrameTexture(myframe[42], GetUnitStringField(t, UNIT_SF_ICON_NORMAL), 0, false);
                        SetFrameText(myframe[43], ""); 
                        break;
                        case 9: 
                        SetFrameTexture(myframe[44], GetUnitStringField(t, UNIT_SF_ICON_NORMAL), 0, false);
                        SetFrameText(myframe[45], ""); 
                        break;
                        case 10: 
                        SetFrameTexture(myframe[46], GetUnitStringField(t, UNIT_SF_ICON_NORMAL), 0, false);
                        SetFrameText(myframe[47], ""); 
                        break;
                    }
                    if (IsUnitAlly(t, Player(3)))
                    {
                        ReviveHero(t, GetRectCenterX(revive_team1), GetRectCenterY(revive_team1), false);
                    }
                    else if (IsUnitAlly(t, Player(7)))
                    {
                        ReviveHero(t, GetRectCenterX(revive_team2), GetRectCenterY(revive_team2), false);
                    }
                    else
                    {
                        ReviveHero(t, GetRectCenterX(revive_team3), GetRectCenterY(revive_team3), false);
                    }
                    UnitAddAbility(t, 'Amrf');
                    UnitRemoveAbility(t, 'Amrf');
                    SetUnitFlyHeight(t, .0f, .0f);
                    SetUnitMoveSpeed(t, GetUnitDefaultMoveSpeed(t));
                    PanCameraToTimedForPlayer(GetOwningPlayer(t), GetUnitX(t), GetUnitY(t), .0f);
                    PauseTimer(tmr);
                    DestroyTimer(tmr);
                }
            });
            HERO_DEATH[pid2]++;
            if (u != nil)
            {
                if (IsPlaying[pid1]) { HERO_KILL[pid1]++; }
                hid = GetHandleId(t);
                str = "";
                for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
                {
                    if (i == 3 || i == 7 || i == 11)
                    {
                        continue;
                    }
                    if (IsUnitAlly(u, Player(i)) && LoadReal(GameHT, hid, StringHash("Assist_" + I2S(i))) > GetUnitMaxLife(t) * 0.09f && GetOwningPlayer(u) != Player(i))
                    {
                        HERO_ASSIST[i]++;
                        str = str + PLAYER_COLOR[i] + GetPlayerName(Player(i)) + "|r ";
                        AddHeroXP(MyHero[i], 50 * GetHeroLevel(t), true);
                        SetPlayerState(Player(i), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(Player(i), PLAYER_STATE_RESOURCE_GOLD) + 130);
                        RemoveSavedReal(GameHT, hid, StringHash("Assist_" + I2S(i)));
                    }
                }

                AddHeroXP(MyHero[pid1], 75 * GetHeroLevel(t), true);

                str2 = PLAYER_COLOR[pid1] + GetPlayerName(GetOwningPlayer(u)) + "|r has killed " + PLAYER_COLOR[pid2] + GetPlayerName(GetOwningPlayer(t));
                DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, str2);

                if (FIRST_BLOOD[pid1])
                {
                    str2 = "SoundKill (" + I2S(GetRandomInt(1, 19)) + ").mp3";
                    SoundStart(str2);
                    SetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD) + 260);
                    str2 = PLAYER_COLOR[pid1] + GetPlayerName(GetOwningPlayer(u)) + "|r pwned " + PLAYER_COLOR[pid2] + GetPlayerName(GetOwningPlayer(t)) + "|r head for |cffffcc00260|r gold\nAssisted by " + str;
                    DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, str2);
                }
                else
                {
                    if (IsPlaying[pid1])
                    {
                        FIRST_BLOOD[pid1] = true;
                        SoundStart("firstblood.mp3");
                        SetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(GetOwningPlayer(u), PLAYER_STATE_RESOURCE_GOLD) + 320);
                        str2 = PLAYER_COLOR[pid1] + GetPlayerName(GetOwningPlayer(u)) + "|r pwned " + PLAYER_COLOR[pid2] + GetPlayerName(GetOwningPlayer(t)) + "|r head for |cffffcc00320|r gold\nAssisted by " + str; 
                        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, str2);
                    }
                }
            }
            else
            {
                str2 = PLAYER_COLOR[pid2] + GetPlayerName(GetOwningPlayer(t)) + "|r has just killed himself";
                DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, str2);
            }
        }
    });
}

void UIBehavior()
{
    framehandle f = nil;
    string s = "";
    unit u = nil;
    ability ab = nil;
    int pid = 0;
    float xp = .0f;
    float shp = .0f;
    float hp = .0f;
    float mp = .0f;

    if (AntiHek) 
    {
        f = GetFrameByName("WFEHPTextFrame", 0);
        if (f != nil)
        {
            RemovePlayer(GetLocalPlayer(), PLAYER_GAME_RESULT_DEFEAT);
            EndGame(true);
        }
    }

    s = I2S(GetPlayerState(GetLocalPlayer(), PLAYER_STATE_RESOURCE_GOLD));
    if (GetFrameText(myframe[28]) != s)
    {
        SetFrameText(myframe[28], s);
    }

    u = SelectedUnit[GetPlayerId(GetLocalPlayer())];
    pid = GetPlayerId(GetOwningPlayer(u));
    if (u != nil && IsUnitAlive(u))
    {
        xp = 100 * GetHeroXP(u) / GetHeroExperienceRequiredAt(u, GetHeroLevel(u));
        if (GetFrameValue(myframe[20]) != xp)
        {
            SetFrameValue(myframe[20], xp);
        }

        s = "Level " + I2S(GetHeroLevel(u)) + " " + GetUnitStringField(u, UNIT_SF_NAME);
        if (GetFrameText(myframe[21]) != s)
        {
            SetFrameText(myframe[21], s);
        }

        shp = GetUnitAbilityLevel(u, 'B00F') > 0 ? 100 * LoadReal(GameHT, GetUnitUserData(u), StringHash("CloudShield")) / GetUnitMaxLife(u) : 0;
        if (GetFrameValue(myframe[22]) != shp)
        {
            SetFrameValue(myframe[22], shp);
        }

        s = GetUnitAbilityLevel(u, 'B00F') > 0 ? I2S(R2I(LoadReal(GameHT, GetUnitUserData(u), StringHash("CloudShield")))) : "0";
        if (GetFrameText(myframe[23]) != s)
        {
            SetFrameText(myframe[23], s);
        }

        hp = 100 * GetUnitCurrentLife(u) / GetUnitMaxLife(u);
        if (GetFrameValue(myframe[24]) != hp)
        {
            SetFrameValue(myframe[24], hp);
        }

        s = I2S(R2I(GetUnitCurrentLife(u))) + " +(" + R2SW(GetUnitLifeRegen(u), 0, 1) + ")";
        if (GetFrameText(myframe[25]) != s)
        {
            SetFrameText(myframe[25], s);
        }

        mp = 100 * GetUnitCurrentMana(u) / GetUnitMaxMana(u);
        if (GetFrameValue(myframe[26]) != mp)
        {
            SetFrameValue(myframe[26], mp);
        }

        s = I2S(R2I(GetUnitCurrentMana(u))) + " +(" + R2SW(GetUnitManaRegen(u), 0, 1) + ")";
        if (GetFrameText(myframe[27]) != s)
        {
            SetFrameText(myframe[27], s);
        }

        s = I2S(GetUnitBaseDamageByIndex(u, 0) + GetUnitBonusDamageByIndex(u, 0));
        if (GetFrameText(myframe[2]) != s)
        {
            SetFrameText(myframe[2], s);
        }

        s = R2SW(GetUnitAttackCooldownByIndex(u, 0) / GetUnitAttackSpeed(u), 0, 2);
        if (GetFrameText(myframe[4]) != s)
        {
            SetFrameText(myframe[4], s);
        }

        s = R2SW(GetUnitArmour(u), 0, 2);
        if (IsUnitInvulnerable(u)) { s = "|cffFF0000INVULNERABLE"; }
        if (GetFrameText(myframe[6]) != s)
        {
            SetFrameText(myframe[6], s);
        }

        s = I2S(R2I(GetUnitMoveSpeed(u)));
        if (GetFrameText(myframe[8]) != s)
        {
            SetFrameText(myframe[8], s);
        }

        s = R2SW(GetUnitAttackSpeed(u) * 100, 0, 1) + "%";
        if (GetFrameText(myframe[10]) != s)
        {
            SetFrameText(myframe[10], s);
        }

        s = I2S(R2I(BASE_RESIST*100)) + "%";
        if (GetFrameText(myframe[12]) != s)
        {
            SetFrameText(myframe[12], s);
        }

        s = GetFrameTexture(myframe[13], 0);
        if (GetHeroPrimaryAttribute(u) != HERO_ATTRIBUTE_STR) 
        { 
            s = StringContains(s, "DISBTN", false) ? s : StringReplace(s, "\\BTN", "disabled\\DISBTN", false); 
        }
        else
        {
            s = StringContains(s, "DISBTN", false) ? StringReplace(s, "disabled\\DISBTN", "\\BTN", false) : s;
        }
        if (GetFrameTexture(myframe[13], 0) != s)
        {
            SetFrameTexture(myframe[13], s, 0, false);
        }

        s = I2S(GetHeroStr(u, true));
        if (GetFrameText(myframe[14]) != s)
        {
            SetFrameText(myframe[14], s);
        }

        s = GetFrameTexture(myframe[15], 0);
        if (GetHeroPrimaryAttribute(u) != HERO_ATTRIBUTE_AGI) 
        { 
            s = StringContains(s, "DISBTN", false) ? s : StringReplace(s, "\\BTN", "disabled\\DISBTN", false); 
        }
        else
        {
            s = StringContains(s, "DISBTN", false) ? StringReplace(s, "disabled\\DISBTN", "\\BTN", false) : s;
        }
        if (GetFrameTexture(myframe[15], 0) != s)
        {
            SetFrameTexture(myframe[15], s, 0, false);
        }

        s = I2S(GetHeroAgi(u, true));
        if (GetFrameText(myframe[16]) != s)
        {
            SetFrameText(myframe[16], s);
        }

        s = GetFrameTexture(myframe[17], 0);
        if (GetHeroPrimaryAttribute(u) != HERO_ATTRIBUTE_INT) 
        { 
            s = StringContains(s, "DISBTN", false) ? s : StringReplace(s, "\\BTN", "disabled\\DISBTN", false); 
        }
        else
        {
            s = StringContains(s, "DISBTN", false) ? StringReplace(s, "disabled\\DISBTN", "\\BTN", false) : s;
        }
        if (GetFrameTexture(myframe[17], 0) != s)
        {
            SetFrameTexture(myframe[17], s, 0, false);
        }

        s = I2S(GetHeroInt(u, true));
        if (GetFrameText(myframe[18]) != s)
        {
            SetFrameText(myframe[18], s);
        }

        s = "UI\\Widgets\\EscMenu\\Human\\blank-background.blp";

        if (MemoHero[pid] != -1)
        {
            PORTRAIT_COUNTER++;

            if (HeroPortrait[MemoHero[pid]] == 1)
            {
                s = StringReplace(GetUnitModel(u), ".mdx", "_portrait.blp", false);
            }

            if (HeroPortrait[MemoHero[pid]] > 1)
            {
                s = "Portrait\\";
                if (GetUnitTypeId(u) == 'H006') { s += "Salter (" + I2S(PORTRAIT_COUNTER) + ").blp"; }
                if (GetUnitTypeId(u) == 'H00D') { s += "Akame (" + I2S(PORTRAIT_COUNTER) + ").blp"; }
                if (GetUnitTypeId(u) == 'H002') { s += "AlphaLucia (" + I2S(PORTRAIT_COUNTER) + ").blp"; }
                if (GetUnitTypeId(u) == 'H00A') { s += "BellCranel (" + I2S(PORTRAIT_COUNTER) + ").blp"; }
                if (GetUnitTypeId(u) == 'H00B') { s += "Ichigo (" + I2S(PORTRAIT_COUNTER) + ").blp"; }
                if (GetUnitTypeId(u) == 'H004') { s += "Jellal (" + I2S(PORTRAIT_COUNTER) + ").blp"; }
                if (GetUnitTypeId(u) == 'H007') { s += "Sabo (" + I2S(PORTRAIT_COUNTER) + ").blp"; }
                if (GetUnitTypeId(u) == 'H008') { s += "Yomi (" + I2S(PORTRAIT_COUNTER) + ").blp"; }
                if (GetUnitTypeId(u) == 'H019') { s += "Firefly (" + I2S(PORTRAIT_COUNTER) + ").blp"; }
            }

            if (PORTRAIT_COUNTER >= HeroPortrait[MemoHero[pid]] || PORTRAIT_UNIT != u)
            {
                PORTRAIT_COUNTER = 0;
            }
        }
        
        if (GetFrameTexture(myframe[19], 0) != s)
        {
            SetFrameTexture(myframe[19], s, 0, false);
        }

        PORTRAIT_UNIT = u;
    }
}

void CreateHeroSelection(int id, string imag, string pick, string item10k, int gifimage = 1)
{
    string btn = GetUnitBaseStringFieldById(id, UNIT_SF_ICON_NORMAL);

    HeroCount++;
    HeroRawId[HeroCount] = id;
    HeroPickImg[HeroCount] = imag;
    HeroPortrait[HeroCount] = gifimage;
    if (!pick.isEmpty())
    {
        SaveStr(GameHT, id, StringHash("picksound"), pick);
    }
    if (!item10k.isEmpty())
    {
        SaveStr(GameHT, id, StringHash("10ksound"), item10k);
    }

    pickframe[100] = CreateFrameByType("SIMPLEBUTTON", "pickframe100", pickframe[0], "SIMPLEBUTTONTEMPLATE", HeroCount);
    ClearFrameAllPoints(pickframe[100]);
    SetFrameSize(pickframe[100], 0.0246f, 0.0328f);
    SetFrameTexture(pickframe[100], StringReplace(btn, "buttons\\", "buttonsdisabled\\dis", false), 0, false);
    SetFrameTexture(pickframe[100], btn, 1, false);
    if (GetUnitBaseIntegerFieldById(id, UNIT_IF_PRIMARY_ATTRIBUTE) == HERO_ATTRIBUTE_STR)
    {
        SetFrameRelativePoint(pickframe[100], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.016f + 0.0286f * HeroCountWidth[0], -0.09f - 0.0368f * HeroCountHeight[0]);
        HeroCountWidth[0]++;
        if (HeroCountWidth[0] >= 15)
        {
            HeroCountWidth[0] = 0;
            HeroCountHeight[0]++;
        }
    }
    else if (GetUnitBaseIntegerFieldById(id, UNIT_IF_PRIMARY_ATTRIBUTE) == HERO_ATTRIBUTE_AGI)
    {
        SetFrameRelativePoint(pickframe[100], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.016f + 0.0286f * HeroCountWidth[1], -0.238f - 0.0368f * HeroCountHeight[1]);
        HeroCountWidth[1]++;
        if (HeroCountWidth[1] >= 15)
        {
            HeroCountWidth[1] = 0;
            HeroCountHeight[1]++;
        }
    }
    else
    {
        SetFrameRelativePoint(pickframe[100], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.016f + 0.0286f * HeroCountWidth[2], -0.386f - 0.0368f * HeroCountHeight[2]);
        HeroCountWidth[2]++;
        if (HeroCountWidth[2] >= 15)
        {
            HeroCountWidth[2] = 0;
            HeroCountHeight[2]++;
        }
    }
    

    SaveInteger(GameHT, GetHandleId(pickframe[100]), 'fid+', HeroCount);
    SaveStr(GameHT, GetHandleId(pickframe[100]), 'img+', imag);
    TriggerRegisterFrameEvent(SelectHeroIcon, pickframe[100], FRAMEEVENT_CONTROL_CLICK);
    HandleListAddHandle(HeroSelectList, pickframe[100]);
}

void HeroIconSelected()
{
    framehandle f = GetTriggerFrame();
    player p = GetTriggerPlayer();
    int pid = GetPlayerId(p);
    int fid = LoadInteger(GameHT, GetHandleId(f), 'fid+');
    string img = LoadStr(GameHT, GetHandleId(f), 'img+');
    string pname = StringCase(GetPlayerName(p), false);

    if (!HeroGone[fid] && !SelectYet[pid] && p != Player(3) && p != Player(7) && p != Player(11))
    {
            if (HeroPickTime <= 50.f || HeroPickTime > 60.f || (pname == "rayslazer" || fid != 6))
            {
            MemoHero[pid] = fid;
            if (p == GetLocalPlayer())
            {
                SetFrameTexture(pickframe[2], img, 0, false);
            }
        }
    }
}

void heropickfunc()
{
    int randomInt = 0;
    int i = 0;
    int forward = 0;
    framehandle fh = nil;
    string s = "";
    textfilehandle mmrfile = nil;

    HeroPickTime -= .1f;
    if (HeroPickTime > .0f) 
    {
        SetFrameText(pickframe[1], "|cffFFDC00Selection Time Left : " + I2S(R2I(HeroPickTime)));
        PICKBAN_COUNTER++;
        if (PICKBAN_COUNTER > 6)
        {
            PICKBAN_WIDTH += 0.001f;
            PICKBAN_HEIGHT += 0.001f;
        }
        else
        {
            PICKBAN_WIDTH -= 0.001f;
            PICKBAN_HEIGHT -= 0.001f;
        }
        if (PICKBAN_COUNTER >= 12) { PICKBAN_COUNTER = 0; }
        SetFrameSize(pickframe[14], PICKBAN_WIDTH, PICKBAN_HEIGHT);
    } 
    else 
    {
        if (GetFrameText(pickframe[1]) != "")
        {
            SetFrameText(pickframe[1], "");
            ShowFrame(pickframe[14], false);
        }
    }
    
    for (i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        PanCameraToTimedForPlayer(Player(i), GetRectCenterX(pickcam), GetRectCenterY(pickcam), .0f);
        if (IsPlaying[i] && SelectYet[i] && !forwardpick)
        {
            forward++;
            if (forward == PlayerCount)
            {
                forwardpick = true;
                HeroPickTime = .0f;
            }
        }
    }

    if (HeroPickTime >= 59.9f && HeroPickTime <= 60.01f && BAN_TIME)
    {
        fh = HandleListGetFrameByIndex(BanList, GetRandomInt(0, HandleListGetFrameCount(BanList) - 1));
        if (fh != nil)
        {
            HeroGone[LoadInteger(GameHT, GetHandleId(fh), 'fid+')] = true;
            SetFrameEnabled(fh, false);
            pickframe[101] = CreateFrameByType("SIMPLEFRAME", "pickframe101", fh, "", 0);
            ClearFrameAllPoints(pickframe[101]);
            SetFrameTexture(pickframe[101], "banX.tga", 0, false);
            SetFrameRelativePoint(pickframe[101], FRAMEPOINT_TOPLEFT, fh, FRAMEPOINT_TOPLEFT, .0f, .0f);
            SetFrameRelativePoint(pickframe[101], FRAMEPOINT_BOTTOMRIGHT, fh, FRAMEPOINT_BOTTOMRIGHT, .0f, .0f);
            ShowFrame(pickframe[101], true);
            HandleListRemoveHandle(BanList, fh);
        }

        fh = HandleListGetFrameByIndex(BanList, GetRandomInt(0, HandleListGetFrameCount(BanList) - 1));
        if (fh != nil)
        {
            HeroGone[LoadInteger(GameHT, GetHandleId(fh), 'fid+')] = true;
            SetFrameEnabled(fh, false);
            pickframe[102] = CreateFrameByType("SIMPLEFRAME", "pickframe102", fh, "", 0);
            ClearFrameAllPoints(pickframe[102]);
            SetFrameTexture(pickframe[102], "banX.tga", 0, false);
            SetFrameRelativePoint(pickframe[102], FRAMEPOINT_TOPLEFT, fh, FRAMEPOINT_TOPLEFT, .0f, .0f);
            SetFrameRelativePoint(pickframe[102], FRAMEPOINT_BOTTOMRIGHT, fh, FRAMEPOINT_BOTTOMRIGHT, .0f, .0f);
            ShowFrame(pickframe[102], true);
            HandleListRemoveHandle(BanList, fh);
        }

        fh = HandleListGetFrameByIndex(BanList, GetRandomInt(0, HandleListGetFrameCount(BanList) - 1));
        if (fh != nil)
        {
            HeroGone[LoadInteger(GameHT, GetHandleId(fh), 'fid+')] = true;
            SetFrameEnabled(fh, false);
            pickframe[103] = CreateFrameByType("SIMPLEFRAME", "pickframe103", fh, "", 0);
            ClearFrameAllPoints(pickframe[103]);
            SetFrameTexture(pickframe[103], "banX.tga", 0, false);
            SetFrameRelativePoint(pickframe[103], FRAMEPOINT_TOPLEFT, fh, FRAMEPOINT_TOPLEFT, .0f, .0f);
            SetFrameRelativePoint(pickframe[103], FRAMEPOINT_BOTTOMRIGHT, fh, FRAMEPOINT_BOTTOMRIGHT, .0f, .0f);
            ShowFrame(pickframe[103], true);
            HandleListRemoveHandle(BanList, fh);
        }

        SetFrameTexture(pickframe[3], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameTexture(pickframe[4], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameTexture(pickframe[5], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameTexture(pickframe[6], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameTexture(pickframe[7], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameTexture(pickframe[8], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameTexture(pickframe[9], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameTexture(pickframe[10], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameTexture(pickframe[11], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);

        BAN_TIME = false;
        SetFrameTexture(pickframe[14], "PICKTIME.tga", 0, false);
    }

    if (HeroPickTime >= -.01f && HeroPickTime <= .01f)
    {
        for (i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
        {
            if (i == 3 || i == 7 || i == 11)
            {
                continue;
            }
            if (IsPlaying[i])
            {
                while (!SelectYet[i])
                {
                    randomInt = GetRandomInt(0, HeroCount);
                    if (!HeroGone[randomInt])
                    {
                        MemoHero[i] = randomInt;
                        SelectYet[i] = true;
                        HeroGone[randomInt] = true;
                        if (Player(i) == GetLocalPlayer())
                        {
                            SetFrameTexture(pickframe[2], HeroPickImg[randomInt], 0, false);
                        }
                        switch (i)
                        {
                            case 0: SetFrameTexture(pickframe[3], GetUnitBaseStringFieldById(HeroRawId[MemoHero[i]], UNIT_SF_ICON_NORMAL), 0, false); break;
                            case 1: SetFrameTexture(pickframe[4], GetUnitBaseStringFieldById(HeroRawId[MemoHero[i]], UNIT_SF_ICON_NORMAL), 0, false); break;
                            case 2: SetFrameTexture(pickframe[5], GetUnitBaseStringFieldById(HeroRawId[MemoHero[i]], UNIT_SF_ICON_NORMAL), 0, false); break;
                            case 4: SetFrameTexture(pickframe[6], GetUnitBaseStringFieldById(HeroRawId[MemoHero[i]], UNIT_SF_ICON_NORMAL), 0, false); break;
                            case 5: SetFrameTexture(pickframe[7], GetUnitBaseStringFieldById(HeroRawId[MemoHero[i]], UNIT_SF_ICON_NORMAL), 0, false); break;
                            case 6: SetFrameTexture(pickframe[8], GetUnitBaseStringFieldById(HeroRawId[MemoHero[i]], UNIT_SF_ICON_NORMAL), 0, false); break;
                            case 8: SetFrameTexture(pickframe[9], GetUnitBaseStringFieldById(HeroRawId[MemoHero[i]], UNIT_SF_ICON_NORMAL), 0, false); break;
                            case 9: SetFrameTexture(pickframe[10], GetUnitBaseStringFieldById(HeroRawId[MemoHero[i]], UNIT_SF_ICON_NORMAL), 0, false); break;
                            case 10: SetFrameTexture(pickframe[11], GetUnitBaseStringFieldById(HeroRawId[MemoHero[i]], UNIT_SF_ICON_NORMAL), 0, false); break;
                        }
                        SetFrameEnabled(HandleListGetFrameByIndex(HeroSelectList, MemoHero[i]), false);
                    }
                }
            }
        }
    }

    if (HeroPickTime >= -3.01f && HeroPickTime <= -2.99f)
    {
        ShowFrame(pickframe[0], false);
        HideOriginFrames(false);

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 0));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 0), FromPixelX(40), FromPixelY(40));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 0), FRAMEPOINT_BOTTOMLEFT, FromPixelX(276), FromPixelY(224));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 1));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 1), FromPixelX(40), FromPixelY(40));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 1), FRAMEPOINT_BOTTOMLEFT, FromPixelX(276), FromPixelY(172));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 2));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 2), FromPixelX(40), FromPixelY(40));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 2), FRAMEPOINT_BOTTOMLEFT, FromPixelX(276), FromPixelY(120));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 3));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 3), FromPixelX(40), FromPixelY(40));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 3), FRAMEPOINT_BOTTOMLEFT, FromPixelX(276), FromPixelY(68));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 4));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 4), FromPixelX(40), FromPixelY(40));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_MINIMAP_BUTTON, 4), FRAMEPOINT_BOTTOMLEFT, FromPixelX(276), FromPixelY(16));

        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_PORTRAIT, 0), FRAMEPOINT_BOTTOMLEFT, FromPixelX(470), FromPixelY(5));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_PORTRAIT, 0), FRAMEPOINT_TOPRIGHT, FromPixelX(694), FromPixelY(229));

        SetFrameGridSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BAR, 0), 3, 5);
        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BAR, 0));
        
        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 0));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 0), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 0), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1550), FromPixelY(148));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 1));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 1), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 1), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1624), FromPixelY(148));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 2));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 2), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 2), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1698), FromPixelY(148));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 3));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 3), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 3), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1772), FromPixelY(148));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 4));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 4), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 4), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1846), FromPixelY(148));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 5));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 5), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 5), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1550), FromPixelY(78));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 6));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 6), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 6), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1624), FromPixelY(78));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 7));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 7), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 7), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1698), FromPixelY(78));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 8));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 8), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 8), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1772), FromPixelY(78));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 9));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 9), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 9), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1846), FromPixelY(78));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 10));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 10), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 10), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1550), FromPixelY(4));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 11));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 11), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 11), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1624), FromPixelY(4));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 12));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 12), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 12), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1698), FromPixelY(4));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 13));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 13), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 13), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1772), FromPixelY(4));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 14));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 14), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_COMMAND_BUTTON, 14), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1846), FromPixelY(4));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 0));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 0), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 0), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1226), FromPixelY(187));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 1));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 1), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 1), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1300), FromPixelY(187));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 2));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 2), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 2), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1226), FromPixelY(117));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 3));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 3), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 3), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1300), FromPixelY(117));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 4));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 4), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 4), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1226), FromPixelY(43));

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 5));
        SetFrameSize(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 5), FromPixelX(64), FromPixelY(64));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON, 5), FRAMEPOINT_BOTTOMLEFT, FromPixelX(1300), FromPixelY(43));

        SetFrameSpriteScale(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON_COOLDOWN_INDICATOR, 0), 1.f);
        SetFrameSpriteScale(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON_COOLDOWN_INDICATOR, 1), 1.f);
        SetFrameSpriteScale(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON_COOLDOWN_INDICATOR, 2), 1.f);
        SetFrameSpriteScale(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON_COOLDOWN_INDICATOR, 3), 1.f);
        SetFrameSpriteScale(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON_COOLDOWN_INDICATOR, 4), 1.f);
        SetFrameSpriteScale(GetOriginFrame(ORIGIN_FRAME_ITEM_BUTTON_COOLDOWN_INDICATOR, 5), 1.f);

        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_HERO_BAR, 0));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_HERO_BAR, 0), FRAMEPOINT_BOTTOMLEFT, 1.f, 1.f);

        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_MINIMAP, 0), FRAMEPOINT_BOTTOMLEFT, FromPixelX(10), FromPixelY(8));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_MINIMAP, 0), FRAMEPOINT_TOPRIGHT, FromPixelX(266), FromPixelY(264));

        SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_CONSOLE_UI, 0), FRAMEPOINT_TOPLEFT, GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), FRAMEPOINT_TOPLEFT, 1.f, .0f);
        SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_CONSOLE_UI, 0), FRAMEPOINT_TOPRIGHT, GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), FRAMEPOINT_TOPRIGHT, -1.f, .0f);
        ShowFrame(GetOriginFrame(ORIGIN_FRAME_TIME_OF_DAY_INDICATOR, 0), false);
        ShowFrame(GetOriginFrame(ORIGIN_FRAME_SYSTEM_BUTTON, 0), false);
        ShowFrame(GetOriginFrame(ORIGIN_FRAME_SYSTEM_BUTTON, 1), false);
        ShowFrame(GetOriginFrame(ORIGIN_FRAME_SYSTEM_BUTTON, 2), false);
        ShowFrame(GetOriginFrame(ORIGIN_FRAME_SYSTEM_BUTTON, 3), false);
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_RESOURCE_BAR, 0), FRAMEPOINT_TOPRIGHT, 1.f, 1.f);
        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_FPS_TEXT, 0));
        SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_FPS_TEXT, 0), FRAMEPOINT_TOP, GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), FRAMEPOINT_TOP, FromPixelX(-10), FromPixelY(-63));
        ShowFrame(GetOriginFrame(ORIGIN_FRAME_BUFF_BAR_TEXT, 0), false);
        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_BUFF_BAR, 0));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_BUFF_BAR, 0), FRAMEPOINT_BOTTOMLEFT, FromPixelX(770), FromPixelY(83));
        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_UBERTOOLTIP, 0));
        SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_UBERTOOLTIP, 0), FRAMEPOINT_BOTTOMRIGHT, GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), FRAMEPOINT_BOTTOMRIGHT, FromPixelX(-6), FromPixelY(264));
        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_CHAT_EDITBAR, 0));
        SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_CHAT_EDITBAR, 0), FRAMEPOINT_BOTTOMLEFT, GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), FRAMEPOINT_BOTTOMLEFT, FromPixelX(10), FromPixelY(274));
        SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_CHAT_EDITBAR, 0), FRAMEPOINT_TOPRIGHT, GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), FRAMEPOINT_BOTTOMLEFT, FromPixelX(610), FromPixelY(314));
        SetFramePriority(GetOriginFrame(ORIGIN_FRAME_CHAT_MESSAGE, 0), 0);
        ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_CHAT_MESSAGE, 0));
        SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_CHAT_MESSAGE, 0), FRAMEPOINT_BOTTOMLEFT, GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), FRAMEPOINT_BOTTOMLEFT, FromPixelX(10), FromPixelY(319));
        SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_CHAT_MESSAGE, 0), FRAMEPOINT_TOPRIGHT, GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), FRAMEPOINT_BOTTOMLEFT, FromPixelX(710), FromPixelY(809));
        SetFrameAbsolutePoint(GetOriginFrame(ORIGIN_FRAME_INVENTORY_COVER_FRAME, 0), FRAMEPOINT_BOTTOMLEFT, 1.f, 1.f);

        myframe[0] = CreateFrameByType("SIMPLEFRAME", "myframe0", GetOriginFrame(ORIGIN_FRAME_CONSOLE_UI, 0), "", 0);
        ClearFrameAllPoints(myframe[0]);
        SetFrameTexture(myframe[0], "defaultUI3.tga", 0, false);
        SetFrameAllPoints(myframe[0], GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0));
        ShowFrame(myframe[0], true);

        myframe[1] = CreateFrameByType("SIMPLETEXTURE", "myframe1", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[1]);
        SetFrameTexture(myframe[1], "ReplaceableTextures\\CommandButtons\\BTNDaggerOfEscape.blp", 0, false);
        SetFrameSize(myframe[1], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[1], FRAMEPOINT_BOTTOMLEFT, myframe[0], FRAMEPOINT_BOTTOMLEFT, FromPixelX(715), FromPixelY(211));
        ShowFrame(myframe[1], true);

        myframe[2] = CreateFrameByType("SIMPLETEXT", "myframe2", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[2]);
        SetFrameFont(myframe[2], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[2], "");
        SetFrameWidth(myframe[2], FromPixelX(128));
        SetFrameTextAlignment(myframe[2], TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_LEFT);
        SetFrameRelativePoint(myframe[2], FRAMEPOINT_LEFT, myframe[1], FRAMEPOINT_RIGHT, FromPixelX(5), .0f);
        ShowFrame(myframe[2], true);

        myframe[3] = CreateFrameByType("SIMPLETEXTURE", "myframe3", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[3]);
        SetFrameTexture(myframe[3], "ReplaceableTextures\\CommandButtons\\BTNGlove.blp", 0, false);
        SetFrameSize(myframe[3], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[3], FRAMEPOINT_TOPLEFT, myframe[1], FRAMEPOINT_BOTTOMLEFT, .0f, FromPixelY(-10));
        ShowFrame(myframe[3], true);

        myframe[4] = CreateFrameByType("SIMPLETEXT", "myframe4", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[4]);
        SetFrameFont(myframe[4], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[4], "");
        SetFrameWidth(myframe[4], FromPixelX(128));
        SetFrameTextAlignment(myframe[4], TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_LEFT);
        SetFrameRelativePoint(myframe[4], FRAMEPOINT_LEFT, myframe[3], FRAMEPOINT_RIGHT, FromPixelX(5), .0f);
        ShowFrame(myframe[4], true);

        myframe[5] = CreateFrameByType("SIMPLETEXTURE", "myframe5", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[5]);
        SetFrameTexture(myframe[5], "ReplaceableTextures\\CommandButtons\\BTNSteelArmor.blp", 0, false);
        SetFrameSize(myframe[5], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[5], FRAMEPOINT_TOPLEFT, myframe[3], FRAMEPOINT_BOTTOMLEFT, .0f, FromPixelY(-10));
        ShowFrame(myframe[5], true);

        myframe[6] = CreateFrameByType("SIMPLETEXT", "myframe6", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[6]);
        SetFrameFont(myframe[6], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[6], "");
        SetFrameWidth(myframe[6], FromPixelX(128));
        SetFrameTextAlignment(myframe[6], TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_LEFT);
        SetFrameRelativePoint(myframe[6], FRAMEPOINT_LEFT, myframe[5], FRAMEPOINT_RIGHT, FromPixelX(5), .0f);
        ShowFrame(myframe[6], true);

        myframe[7] = CreateFrameByType("SIMPLETEXTURE", "myframe7", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[7]);
        SetFrameTexture(myframe[7], "ReplaceableTextures\\CommandButtons\\BTNBootsOfSpeed.blp", 0, false);
        SetFrameSize(myframe[7], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[7], FRAMEPOINT_LEFT, myframe[2], FRAMEPOINT_RIGHT, FromPixelX(10), .0f);
        ShowFrame(myframe[7], true);

        myframe[8] = CreateFrameByType("SIMPLETEXT", "myframe8", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[8]);
        SetFrameFont(myframe[8], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[8], "");
        SetFrameWidth(myframe[8], FromPixelX(128));
        SetFrameTextAlignment(myframe[8], TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_LEFT);
        SetFrameRelativePoint(myframe[8], FRAMEPOINT_LEFT, myframe[7], FRAMEPOINT_RIGHT, FromPixelX(5), .0f);
        ShowFrame(myframe[8], true);

        myframe[9] = CreateFrameByType("SIMPLETEXTURE", "myframe9", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[9]);
        SetFrameTexture(myframe[9], "ReplaceableTextures\\CommandButtons\\BTNClawsOfAttack.blp", 0, false);
        SetFrameSize(myframe[9], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[9], FRAMEPOINT_TOPLEFT, myframe[7], FRAMEPOINT_BOTTOMLEFT, .0f, FromPixelY(-10));
        ShowFrame(myframe[9], true);

        myframe[10] = CreateFrameByType("SIMPLETEXT", "myframe10", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[10]);
        SetFrameFont(myframe[10], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[10], "");
        SetFrameWidth(myframe[10], FromPixelX(128));
        SetFrameTextAlignment(myframe[10], TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_LEFT);
        SetFrameRelativePoint(myframe[10], FRAMEPOINT_LEFT, myframe[9], FRAMEPOINT_RIGHT, FromPixelX(5), .0f);
        ShowFrame(myframe[10], true);

        myframe[11] = CreateFrameByType("SIMPLETEXTURE", "myframe11", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[11]);
        SetFrameTexture(myframe[11], "ReplaceableTextures\\CommandButtons\\BTNSpellShieldAmulet.blp", 0, false);
        SetFrameSize(myframe[11], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[11], FRAMEPOINT_TOPLEFT, myframe[9], FRAMEPOINT_BOTTOMLEFT, .0f, FromPixelY(-10));
        ShowFrame(myframe[11], true);

        myframe[12] = CreateFrameByType("SIMPLETEXT", "myframe12", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[12]);
        SetFrameFont(myframe[12], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[12], "");
        SetFrameWidth(myframe[12], FromPixelX(128));
        SetFrameTextAlignment(myframe[12], TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_LEFT);
        SetFrameRelativePoint(myframe[12], FRAMEPOINT_LEFT, myframe[11], FRAMEPOINT_RIGHT, FromPixelX(5), .0f);
        ShowFrame(myframe[12], true);

        myframe[13] = CreateFrameByType("SIMPLETEXTURE", "myframe13", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[13]);
        SetFrameTexture(myframe[13], "ReplaceableTextures\\CommandButtons\\BTNStrength.blp", 0, false);
        SetFrameSize(myframe[13], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[13], FRAMEPOINT_LEFT, myframe[8], FRAMEPOINT_RIGHT, FromPixelX(10), .0f);
        ShowFrame(myframe[13], true);

        myframe[14] = CreateFrameByType("SIMPLETEXT", "myframe14", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[14]);
        SetFrameFont(myframe[14], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[14], "");
        SetFrameWidth(myframe[14], FromPixelX(128));
        SetFrameTextAlignment(myframe[14], TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_LEFT);
        SetFrameRelativePoint(myframe[14], FRAMEPOINT_LEFT, myframe[13], FRAMEPOINT_RIGHT, FromPixelX(5), .0f);
        ShowFrame(myframe[14], true);

        myframe[15] = CreateFrameByType("SIMPLETEXTURE", "myframe15", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[15]);
        SetFrameTexture(myframe[15], "ReplaceableTextures\\CommandButtons\\BTNAgility.blp", 0, false);
        SetFrameSize(myframe[15], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[15], FRAMEPOINT_TOPLEFT, myframe[13], FRAMEPOINT_BOTTOMLEFT, .0f, FromPixelY(-10));
        ShowFrame(myframe[15], true);

        myframe[16] = CreateFrameByType("SIMPLETEXT", "myframe16", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[16]);
        SetFrameFont(myframe[16], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[16], "");
        SetFrameWidth(myframe[16], FromPixelX(128));
        SetFrameTextAlignment(myframe[16], TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_LEFT);
        SetFrameRelativePoint(myframe[16], FRAMEPOINT_LEFT, myframe[15], FRAMEPOINT_RIGHT, FromPixelX(5), .0f);
        ShowFrame(myframe[16], true);

        myframe[17] = CreateFrameByType("SIMPLETEXTURE", "myframe17", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[17]);
        SetFrameTexture(myframe[17], "ReplaceableTextures\\CommandButtons\\BTNIntelligence.blp", 0, false);
        SetFrameSize(myframe[17], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[17], FRAMEPOINT_TOPLEFT, myframe[15], FRAMEPOINT_BOTTOMLEFT, .0f, FromPixelY(-10));
        ShowFrame(myframe[17], true);

        myframe[18] = CreateFrameByType("SIMPLETEXT", "myframe18", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[18]);
        SetFrameFont(myframe[18], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[18], "");
        SetFrameWidth(myframe[18], FromPixelX(128));
        SetFrameTextAlignment(myframe[18], TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_LEFT);
        SetFrameRelativePoint(myframe[18], FRAMEPOINT_LEFT, myframe[17], FRAMEPOINT_RIGHT, FromPixelX(5), .0f);
        ShowFrame(myframe[18], true);

        myframe[19] = CreateFrameByType("SIMPLETEXTURE", "myframe19", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[19]);
        SetFrameTexture(myframe[19], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[19], FromPixelX(224), FromPixelY(224));
        SetFrameRelativePoint(myframe[19], FRAMEPOINT_BOTTOMLEFT, myframe[0], FRAMEPOINT_BOTTOMLEFT, FromPixelX(470), FromPixelY(5));
        ShowFrame(myframe[19], true);

        myframe[20] = CreateFrameByType("SIMPLESTATUSBAR", "myframe20", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[20]);
        SetFrameTexture(myframe[20], "ReplaceableTextures\\TeamColor\\TeamColor03.blp", 0, false);
        SetFrameSize(myframe[20], FromPixelX(224), FromPixelY(20));
        SetFrameRelativePoint(myframe[20], FRAMEPOINT_BOTTOMLEFT, myframe[19], FRAMEPOINT_TOPLEFT, .0f, FromPixelY(5));
        ShowFrame(myframe[20], true);

        myframe[21] = CreateFrameByType("SIMPLETEXT", "myframe21", myframe[20], "", 0);
        ClearFrameAllPoints(myframe[21]);
        SetFrameFont(myframe[21], "Fonts\\FRIZQT__.TTF", 0.008f, 0);
        SetFrameText(myframe[21], "");
        SetFrameAllPoints(myframe[21], myframe[20]);
        SetFrameTextAlignment(myframe[21], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[21], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[21], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[21], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[21], true);

        myframe[22] = CreateFrameByType("SIMPLESTATUSBAR", "myframe22", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[22]);
        SetFrameTexture(myframe[22], "ReplaceableTextures\\TeamColor\\TeamColor02.blp", 0, false);
        SetFrameSize(myframe[22], FromPixelX(256), FromPixelY(20));
        SetFrameRelativePoint(myframe[22], FRAMEPOINT_BOTTOMLEFT, myframe[0], FRAMEPOINT_BOTTOMLEFT, FromPixelX(704), FromPixelY(61));
        ShowFrame(myframe[22], true);

        myframe[23] = CreateFrameByType("SIMPLETEXT", "myframe23", myframe[22], "", 0);
        ClearFrameAllPoints(myframe[23]);
        SetFrameFont(myframe[23], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[23], "");
        SetFrameAllPoints(myframe[23], myframe[22]);
        SetFrameTextAlignment(myframe[23], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[23], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[23], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[23], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[23], true);

        myframe[24] = CreateFrameByType("SIMPLESTATUSBAR", "myframe24", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[24]);
        SetFrameTexture(myframe[24], "ReplaceableTextures\\TeamColor\\TeamColor06.blp", 0, false);
        SetFrameSize(myframe[24], FromPixelX(512), FromPixelY(20));
        SetFrameRelativePoint(myframe[24], FRAMEPOINT_TOPLEFT, myframe[22], FRAMEPOINT_BOTTOMLEFT, .0f, FromPixelY(-8));
        ShowFrame(myframe[24], true);

        myframe[25] = CreateFrameByType("SIMPLETEXT", "myframe25", myframe[24], "", 0);
        ClearFrameAllPoints(myframe[25]);
        SetFrameFont(myframe[25], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[25], "");
        SetFrameAllPoints(myframe[25], myframe[24]);
        SetFrameTextAlignment(myframe[25], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[25], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[25], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[25], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[25], true);

        myframe[26] = CreateFrameByType("SIMPLESTATUSBAR", "myframe26", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[26]);
        SetFrameTexture(myframe[26], "ReplaceableTextures\\TeamColor\\TeamColor01.blp", 0, false);
        SetFrameSize(myframe[26], FromPixelX(512), FromPixelY(20));
        SetFrameRelativePoint(myframe[26], FRAMEPOINT_TOPLEFT, myframe[24], FRAMEPOINT_BOTTOMLEFT, .0f, FromPixelY(-8));
        ShowFrame(myframe[26], true);

        myframe[27] = CreateFrameByType("SIMPLETEXT", "myframe27", myframe[26], "", 0);
        ClearFrameAllPoints(myframe[27]);
        SetFrameFont(myframe[27], "Fonts\\FRIZQT__.TTF", 0.009f, 0);
        SetFrameText(myframe[27], "");
        SetFrameAllPoints(myframe[27], myframe[26]);
        SetFrameTextAlignment(myframe[27], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[27], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[27], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[27], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[27], true);

        myframe[28] = CreateFrameByType("SIMPLETEXT", "myframe28", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[28]);
        SetFrameFont(myframe[28], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[28], "");
        SetFrameSize(myframe[28], FromPixelX(160), FromPixelY(32));
        SetFrameTextAlignment(myframe[28], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[28], FRAMEPOINT_BOTTOMRIGHT, myframe[0], FRAMEPOINT_BOTTOMRIGHT, FromPixelX(-10), FromPixelY(219));
        ShowFrame(myframe[28], true);

        myframe[29] = CreateFrameByType("SIMPLETEXT", "myframe29", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[29]);
        SetFrameFont(myframe[29], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[29], "");
        SetFrameSize(myframe[29], FromPixelX(128), FromPixelY(32));
        SetFrameTextAlignment(myframe[29], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[29], FRAMEPOINT_BOTTOMRIGHT, myframe[0], FRAMEPOINT_BOTTOMRIGHT, FromPixelX(-210), FromPixelY(219));
        ShowFrame(myframe[29], true);

        myframe[30] = CreateFrameByType("SIMPLEFRAME", "myframe30", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[30]);
        SetFrameTexture(myframe[30], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[30], FromPixelX(48), FromPixelY(48));
        SetFrameRelativePoint(myframe[30], FRAMEPOINT_TOPLEFT, myframe[0], FRAMEPOINT_TOPLEFT, FromPixelX(5), FromPixelY(-5));
        ShowFrame(myframe[30], true);

        myframe[31] = CreateFrameByType("SIMPLETEXT", "myframe31", myframe[30], "", 0);
        ClearFrameAllPoints(myframe[31]);
        SetFrameFont(myframe[31], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[31], "");
        SetFrameAllPoints(myframe[31], myframe[30]);
        SetFrameTextAlignment(myframe[31], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[31], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[31], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[31], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[31], true);

        myframe[32] = CreateFrameByType("SIMPLEFRAME", "myframe32", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[32]);
        SetFrameTexture(myframe[32], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[32], FromPixelX(48), FromPixelY(48));
        SetFrameRelativePoint(myframe[32], FRAMEPOINT_TOPLEFT, myframe[0], FRAMEPOINT_TOPLEFT, FromPixelX(58), FromPixelY(-5));
        ShowFrame(myframe[32], true);

        myframe[33] = CreateFrameByType("SIMPLETEXT", "myframe33", myframe[32], "", 0);
        ClearFrameAllPoints(myframe[33]);
        SetFrameFont(myframe[33], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[33], "");
        SetFrameAllPoints(myframe[33], myframe[32]);
        SetFrameTextAlignment(myframe[33], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[33], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[33], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[33], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[33], true);

        myframe[34] = CreateFrameByType("SIMPLEFRAME", "myframe34", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[34]);
        SetFrameTexture(myframe[34], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[34], FromPixelX(48), FromPixelY(48));
        SetFrameRelativePoint(myframe[34], FRAMEPOINT_TOPLEFT, myframe[0], FRAMEPOINT_TOPLEFT, FromPixelX(111), FromPixelY(-5));
        ShowFrame(myframe[34], true);

        myframe[35] = CreateFrameByType("SIMPLETEXT", "myframe35", myframe[34], "", 0);
        ClearFrameAllPoints(myframe[35]);
        SetFrameFont(myframe[35], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[35], "");
        SetFrameAllPoints(myframe[35], myframe[34]);
        SetFrameTextAlignment(myframe[35], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[35], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[35], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[35], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[35], true);

        myframe[36] = CreateFrameByType("SIMPLEFRAME", "myframe36", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[36]);
        SetFrameTexture(myframe[36], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[36], FromPixelX(48), FromPixelY(48));
        SetFrameRelativePoint(myframe[36], FRAMEPOINT_TOPLEFT, myframe[0], FRAMEPOINT_TOPLEFT, FromPixelX(883), FromPixelY(-5));
        ShowFrame(myframe[36], true);

        myframe[37] = CreateFrameByType("SIMPLETEXT", "myframe37", myframe[36], "", 0);
        ClearFrameAllPoints(myframe[37]);
        SetFrameFont(myframe[37], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[37], "");
        SetFrameAllPoints(myframe[37], myframe[36]);
        SetFrameTextAlignment(myframe[37], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[37], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[37], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[37], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[37], true);

        myframe[38] = CreateFrameByType("SIMPLEFRAME", "myframe38", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[38]);
        SetFrameTexture(myframe[38], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[38], FromPixelX(48), FromPixelY(48));
        SetFrameRelativePoint(myframe[38], FRAMEPOINT_TOPLEFT, myframe[0], FRAMEPOINT_TOPLEFT, FromPixelX(936), FromPixelY(-5));
        ShowFrame(myframe[38], true);

        myframe[39] = CreateFrameByType("SIMPLETEXT", "myframe39", myframe[38], "", 0);
        ClearFrameAllPoints(myframe[39]);
        SetFrameFont(myframe[39], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[39], "");
        SetFrameAllPoints(myframe[39], myframe[38]);
        SetFrameTextAlignment(myframe[39], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[39], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[39], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[39], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[39], true);

        myframe[40] = CreateFrameByType("SIMPLEFRAME", "myframe40", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[40]);
        SetFrameTexture(myframe[40], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[40], FromPixelX(48), FromPixelY(48));
        SetFrameRelativePoint(myframe[40], FRAMEPOINT_TOPLEFT, myframe[0], FRAMEPOINT_TOPLEFT, FromPixelX(989), FromPixelY(-5));
        ShowFrame(myframe[40], true);

        myframe[41] = CreateFrameByType("SIMPLETEXT", "myframe41", myframe[40], "", 0);
        ClearFrameAllPoints(myframe[41]);
        SetFrameFont(myframe[41], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[41], "");
        SetFrameAllPoints(myframe[41], myframe[40]);
        SetFrameTextAlignment(myframe[41], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[41], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[41], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[41], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[41], true);

        myframe[42] = CreateFrameByType("SIMPLEFRAME", "myframe42", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[42]);
        SetFrameTexture(myframe[42], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[42], FromPixelX(48), FromPixelY(48));
        SetFrameRelativePoint(myframe[42], FRAMEPOINT_TOPLEFT, myframe[0], FRAMEPOINT_TOPLEFT, FromPixelX(1761), FromPixelY(-5));
        ShowFrame(myframe[42], true);

        myframe[43] = CreateFrameByType("SIMPLETEXT", "myframe43", myframe[42], "", 0);
        ClearFrameAllPoints(myframe[43]);
        SetFrameFont(myframe[43], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[43], "");
        SetFrameAllPoints(myframe[43], myframe[42]);
        SetFrameTextAlignment(myframe[43], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[43], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[43], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[43], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[43], true);

        myframe[44] = CreateFrameByType("SIMPLEFRAME", "myframe44", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[44]);
        SetFrameTexture(myframe[44], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[44], FromPixelX(48), FromPixelY(48));
        SetFrameRelativePoint(myframe[44], FRAMEPOINT_TOPLEFT, myframe[0], FRAMEPOINT_TOPLEFT, FromPixelX(1814), FromPixelY(-5));
        ShowFrame(myframe[44], true);

        myframe[45] = CreateFrameByType("SIMPLETEXT", "myframe45", myframe[44], "", 0);
        ClearFrameAllPoints(myframe[45]);
        SetFrameFont(myframe[45], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[45], "");
        SetFrameAllPoints(myframe[45], myframe[44]);
        SetFrameTextAlignment(myframe[45], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[45], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[45], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[45], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[45], true);

        myframe[46] = CreateFrameByType("SIMPLEFRAME", "myframe46", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[46]);
        SetFrameTexture(myframe[46], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[46], FromPixelX(48), FromPixelY(48));
        SetFrameRelativePoint(myframe[46], FRAMEPOINT_TOPLEFT, myframe[0], FRAMEPOINT_TOPLEFT, FromPixelX(1867), FromPixelY(-5));
        ShowFrame(myframe[46], true);

        myframe[47] = CreateFrameByType("SIMPLETEXT", "myframe47", myframe[46], "", 0);
        ClearFrameAllPoints(myframe[47]);
        SetFrameFont(myframe[47], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[47], "");
        SetFrameAllPoints(myframe[47], myframe[46]);
        SetFrameTextAlignment(myframe[47], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[47], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[47], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[47], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[47], true);

        myframe[48] = CreateFrameByType("SIMPLEFRAME", "myframe48", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[48]);
        SetFrameTexture(myframe[48], "skorui2.tga", 0, false);
        SetFrameSize(myframe[48], FromPixelX(1076), FromPixelY(512));
        SetFrameRelativePoint(myframe[48], FRAMEPOINT_BOTTOM, myframe[0], FRAMEPOINT_BOTTOM, .0f, FromPixelY(402));
        ShowFrame(myframe[48], false);

        myframe[49] = CreateFrameByType("SIMPLETEXTURE", "myframe49", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[49]);
        SetFrameTexture(myframe[49], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[49], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[49], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(10), FromPixelY(-40));
        ShowFrame(myframe[49], true);

        myframe[50] = CreateFrameByType("SIMPLETEXTURE", "myframe50", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[50]);
        SetFrameTexture(myframe[50], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[50], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[50], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(10), FromPixelY(-88));
        ShowFrame(myframe[50], true);

        myframe[51] = CreateFrameByType("SIMPLETEXTURE", "myframe51", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[51]);
        SetFrameTexture(myframe[51], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[51], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[51], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(10), FromPixelY(-136));
        ShowFrame(myframe[51], true);

        myframe[52] = CreateFrameByType("SIMPLETEXTURE", "myframe52", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[52]);
        SetFrameTexture(myframe[52], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[52], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[52], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(10), FromPixelY(-208));
        ShowFrame(myframe[52], true);

        myframe[53] = CreateFrameByType("SIMPLETEXTURE", "myframe53", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[53]);
        SetFrameTexture(myframe[53], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[53], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[53], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(10), FromPixelY(-256));
        ShowFrame(myframe[53], true);

        myframe[54] = CreateFrameByType("SIMPLETEXTURE", "myframe54", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[54]);
        SetFrameTexture(myframe[54], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[54], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[54], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(10), FromPixelY(-304));
        ShowFrame(myframe[54], true);

        myframe[55] = CreateFrameByType("SIMPLETEXTURE", "myframe55", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[55]);
        SetFrameTexture(myframe[55], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[55], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[55], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(10), FromPixelY(-376));
        ShowFrame(myframe[55], true);

        myframe[56] = CreateFrameByType("SIMPLETEXTURE", "myframe56", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[56]);
        SetFrameTexture(myframe[56], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[56], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[56], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(10), FromPixelY(-424));
        ShowFrame(myframe[56], true);

        myframe[57] = CreateFrameByType("SIMPLETEXTURE", "myframe57", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[57]);
        SetFrameTexture(myframe[57], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
        SetFrameSize(myframe[57], FromPixelX(32), FromPixelY(32));
        SetFrameRelativePoint(myframe[57], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(10), FromPixelY(-472));
        ShowFrame(myframe[57], true);

        myframe[58] = CreateFrameByType("SIMPLETEXT", "myframe58", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[58]);
        SetFrameFont(myframe[58], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[58], "");
        SetFrameSize(myframe[58], FromPixelX(192), FromPixelY(32));
        SetFrameTextAlignment(myframe[58], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[58], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(50), FromPixelY(-40));
        ShowFrame(myframe[58], true);

        myframe[59] = CreateFrameByType("SIMPLETEXT", "myframe59", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[59]);
        SetFrameFont(myframe[59], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[59], "");
        SetFrameSize(myframe[59], FromPixelX(192), FromPixelY(32));
        SetFrameTextAlignment(myframe[59], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[59], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(50), FromPixelY(-88));
        ShowFrame(myframe[59], true);

        myframe[60] = CreateFrameByType("SIMPLETEXT", "myframe60", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[60]);
        SetFrameFont(myframe[60], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[60], "");
        SetFrameSize(myframe[60], FromPixelX(192), FromPixelY(32));
        SetFrameTextAlignment(myframe[60], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[60], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(50), FromPixelY(-136));
        ShowFrame(myframe[60], true);

        myframe[61] = CreateFrameByType("SIMPLETEXT", "myframe61", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[61]);
        SetFrameFont(myframe[61], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[61], "");
        SetFrameSize(myframe[61], FromPixelX(192), FromPixelY(32));
        SetFrameTextAlignment(myframe[61], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[61], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(50), FromPixelY(-208));
        ShowFrame(myframe[61], true);

        myframe[62] = CreateFrameByType("SIMPLETEXT", "myframe62", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[62]);
        SetFrameFont(myframe[62], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[62], "");
        SetFrameSize(myframe[62], FromPixelX(192), FromPixelY(32));
        SetFrameTextAlignment(myframe[62], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[62], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(50), FromPixelY(-256));
        ShowFrame(myframe[62], true);

        myframe[63] = CreateFrameByType("SIMPLETEXT", "myframe63", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[63]);
        SetFrameFont(myframe[63], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[63], "");
        SetFrameSize(myframe[63], FromPixelX(192), FromPixelY(32));
        SetFrameTextAlignment(myframe[63], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[63], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(50), FromPixelY(-304));
        ShowFrame(myframe[63], true);

        myframe[64] = CreateFrameByType("SIMPLETEXT", "myframe64", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[64]);
        SetFrameFont(myframe[64], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[64], "");
        SetFrameSize(myframe[64], FromPixelX(192), FromPixelY(32));
        SetFrameTextAlignment(myframe[64], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[64], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(50), FromPixelY(-376));
        ShowFrame(myframe[64], true);

        myframe[65] = CreateFrameByType("SIMPLETEXT", "myframe65", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[65]);
        SetFrameFont(myframe[65], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[65], "");
        SetFrameSize(myframe[65], FromPixelX(192), FromPixelY(32));
        SetFrameTextAlignment(myframe[65], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[65], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(50), FromPixelY(-424));
        ShowFrame(myframe[65], true);

        myframe[66] = CreateFrameByType("SIMPLETEXT", "myframe66", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[66]);
        SetFrameFont(myframe[66], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[66], "");
        SetFrameSize(myframe[66], FromPixelX(192), FromPixelY(32));
        SetFrameTextAlignment(myframe[66], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[66], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(50), FromPixelY(-472));
        ShowFrame(myframe[66], true);

        for (i = 0; i < 6; i++)
        {
            myframe[67+i] = CreateFrameByType("SIMPLETEXTURE", "myframe67", myframe[48], "", i);
            ClearFrameAllPoints(myframe[67+i]);
            SetFrameTexture(myframe[67+i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
            SetFrameSize(myframe[67+i], FromPixelX(32), FromPixelY(32));
            SetFrameRelativePoint(myframe[67+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(252 + 42 * i), FromPixelY(-40));
            ShowFrame(myframe[67+i], true);

            myframe[73+i] = CreateFrameByType("SIMPLETEXTURE", "myframe73", myframe[48], "", i);
            ClearFrameAllPoints(myframe[73+i]);
            SetFrameTexture(myframe[73+i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
            SetFrameSize(myframe[73+i], FromPixelX(32), FromPixelY(32));
            SetFrameRelativePoint(myframe[73+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(252 + 42 * i), FromPixelY(-88));
            ShowFrame(myframe[73+i], true);

            myframe[79+i] = CreateFrameByType("SIMPLETEXTURE", "myframe79", myframe[48], "", i);
            ClearFrameAllPoints(myframe[79+i]);
            SetFrameTexture(myframe[79+i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
            SetFrameSize(myframe[79+i], FromPixelX(32), FromPixelY(32));
            SetFrameRelativePoint(myframe[79+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(252 + 42 * i), FromPixelY(-136));
            ShowFrame(myframe[79+i], true);

            myframe[85+i] = CreateFrameByType("SIMPLETEXTURE", "myframe85", myframe[48], "", i);
            ClearFrameAllPoints(myframe[85+i]);
            SetFrameTexture(myframe[85+i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
            SetFrameSize(myframe[85+i], FromPixelX(32), FromPixelY(32));
            SetFrameRelativePoint(myframe[85+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(252 + 42 * i), FromPixelY(-208));
            ShowFrame(myframe[85+i], true);

            myframe[91+i] = CreateFrameByType("SIMPLETEXTURE", "myframe91", myframe[48], "", i);
            ClearFrameAllPoints(myframe[91+i]);
            SetFrameTexture(myframe[91+i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
            SetFrameSize(myframe[91+i], FromPixelX(32), FromPixelY(32));
            SetFrameRelativePoint(myframe[91+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(252 + 42 * i), FromPixelY(-256));
            ShowFrame(myframe[91+i], true);

            myframe[97+i] = CreateFrameByType("SIMPLETEXTURE", "myframe97", myframe[48], "", i);
            ClearFrameAllPoints(myframe[97+i]);
            SetFrameTexture(myframe[97+i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
            SetFrameSize(myframe[97+i], FromPixelX(32), FromPixelY(32));
            SetFrameRelativePoint(myframe[97+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(252 + 42 * i), FromPixelY(-304));
            ShowFrame(myframe[97+i], true);

            myframe[103+i] = CreateFrameByType("SIMPLETEXTURE", "myframe103", myframe[48], "", i);
            ClearFrameAllPoints(myframe[103+i]);
            SetFrameTexture(myframe[103+i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
            SetFrameSize(myframe[103+i], FromPixelX(32), FromPixelY(32));
            SetFrameRelativePoint(myframe[103+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(252 + 42 * i), FromPixelY(-376));
            ShowFrame(myframe[103+i], true);

            myframe[109+i] = CreateFrameByType("SIMPLETEXTURE", "myframe109", myframe[48], "", i);
            ClearFrameAllPoints(myframe[109+i]);
            SetFrameTexture(myframe[109+i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
            SetFrameSize(myframe[109+i], FromPixelX(32), FromPixelY(32));
            SetFrameRelativePoint(myframe[109+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(252 + 42 * i), FromPixelY(-424));
            ShowFrame(myframe[109+i], true);

            myframe[115+i] = CreateFrameByType("SIMPLETEXTURE", "myframe115", myframe[48], "", i);
            ClearFrameAllPoints(myframe[115+i]);
            SetFrameTexture(myframe[115+i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
            SetFrameSize(myframe[115+i], FromPixelX(32), FromPixelY(32));
            SetFrameRelativePoint(myframe[115+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(252 + 42 * i), FromPixelY(-472));
            ShowFrame(myframe[115+i], true);
        }

        for (i = 0; i < 3; i++)
        {
            myframe[121+i] = CreateFrameByType("SIMPLETEXT", "myframe121", myframe[48], "", i);
            ClearFrameAllPoints(myframe[121+i]);
            SetFrameFont(myframe[121+i], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
            SetFrameText(myframe[121+i], "");
            SetFrameSize(myframe[121+i], FromPixelX(48), FromPixelY(32));
            SetFrameTextAlignment(myframe[121+i], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
            SetFrameRelativePoint(myframe[121+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(504 + 58 * i), FromPixelY(-40));
            ShowFrame(myframe[121+i], true);

            myframe[124+i] = CreateFrameByType("SIMPLETEXT", "myframe124", myframe[48], "", i);
            ClearFrameAllPoints(myframe[124+i]);
            SetFrameFont(myframe[124+i], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
            SetFrameText(myframe[124+i], "");
            SetFrameSize(myframe[124+i], FromPixelX(48), FromPixelY(32));
            SetFrameTextAlignment(myframe[124+i], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
            SetFrameRelativePoint(myframe[124+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(504 + 58 * i), FromPixelY(-88));
            ShowFrame(myframe[124+i], true);

            myframe[127+i] = CreateFrameByType("SIMPLETEXT", "myframe127", myframe[48], "", i);
            ClearFrameAllPoints(myframe[127+i]);
            SetFrameFont(myframe[127+i], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
            SetFrameText(myframe[127+i], "");
            SetFrameSize(myframe[127+i], FromPixelX(48), FromPixelY(32));
            SetFrameTextAlignment(myframe[127+i], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
            SetFrameRelativePoint(myframe[127+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(504 + 58 * i), FromPixelY(-136));
            ShowFrame(myframe[127+i], true);

            myframe[130+i] = CreateFrameByType("SIMPLETEXT", "myframe130", myframe[48], "", i);
            ClearFrameAllPoints(myframe[130+i]);
            SetFrameFont(myframe[130+i], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
            SetFrameText(myframe[130+i], "");
            SetFrameSize(myframe[130+i], FromPixelX(48), FromPixelY(32));
            SetFrameTextAlignment(myframe[130+i], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
            SetFrameRelativePoint(myframe[130+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(504 + 58 * i), FromPixelY(-208));
            ShowFrame(myframe[130+i], true);

            myframe[133+i] = CreateFrameByType("SIMPLETEXT", "myframe133", myframe[48], "", i);
            ClearFrameAllPoints(myframe[133+i]);
            SetFrameFont(myframe[133+i], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
            SetFrameText(myframe[133+i], "");
            SetFrameSize(myframe[133+i], FromPixelX(48), FromPixelY(32));
            SetFrameTextAlignment(myframe[133+i], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
            SetFrameRelativePoint(myframe[133+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(504 + 58 * i), FromPixelY(-256));
            ShowFrame(myframe[133+i], true);

            myframe[136+i] = CreateFrameByType("SIMPLETEXT", "myframe136", myframe[48], "", i);
            ClearFrameAllPoints(myframe[136+i]);
            SetFrameFont(myframe[136+i], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
            SetFrameText(myframe[136+i], "");
            SetFrameSize(myframe[136+i], FromPixelX(48), FromPixelY(32));
            SetFrameTextAlignment(myframe[136+i], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
            SetFrameRelativePoint(myframe[136+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(504 + 58 * i), FromPixelY(-304));
            ShowFrame(myframe[136+i], true);

            myframe[139+i] = CreateFrameByType("SIMPLETEXT", "myframe139", myframe[48], "", i);
            ClearFrameAllPoints(myframe[139+i]);
            SetFrameFont(myframe[139+i], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
            SetFrameText(myframe[139+i], "");
            SetFrameSize(myframe[139+i], FromPixelX(48), FromPixelY(32));
            SetFrameTextAlignment(myframe[139+i], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
            SetFrameRelativePoint(myframe[139+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(504 + 58 * i), FromPixelY(-376));
            ShowFrame(myframe[139+i], true);

            myframe[142+i] = CreateFrameByType("SIMPLETEXT", "myframe142", myframe[48], "", i);
            ClearFrameAllPoints(myframe[142+i]);
            SetFrameFont(myframe[142+i], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
            SetFrameText(myframe[142+i], "");
            SetFrameSize(myframe[142+i], FromPixelX(48), FromPixelY(32));
            SetFrameTextAlignment(myframe[142+i], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
            SetFrameRelativePoint(myframe[142+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(504 + 58 * i), FromPixelY(-424));
            ShowFrame(myframe[142+i], true);

            myframe[145+i] = CreateFrameByType("SIMPLETEXT", "myframe145", myframe[48], "", i);
            ClearFrameAllPoints(myframe[145+i]);
            SetFrameFont(myframe[145+i], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
            SetFrameText(myframe[145+i], "");
            SetFrameSize(myframe[145+i], FromPixelX(48), FromPixelY(32));
            SetFrameTextAlignment(myframe[145+i], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
            SetFrameRelativePoint(myframe[145+i], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(504 + 58 * i), FromPixelY(-472));
            ShowFrame(myframe[145+i], true);
        }

        myframe[148] = CreateFrameByType("SIMPLETEXT", "myframe148", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[148]);
        SetFrameFont(myframe[148], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[148], "");
        SetFrameSize(myframe[148], FromPixelX(144), FromPixelY(32));
        SetFrameTextAlignment(myframe[148], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[148], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(678), FromPixelY(-40));
        ShowFrame(myframe[148], true);

        myframe[149] = CreateFrameByType("SIMPLETEXT", "myframe149", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[149]);
        SetFrameFont(myframe[149], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[149], "");
        SetFrameSize(myframe[149], FromPixelX(144), FromPixelY(32));
        SetFrameTextAlignment(myframe[149], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[149], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(678), FromPixelY(-88));
        ShowFrame(myframe[149], true);

        myframe[150] = CreateFrameByType("SIMPLETEXT", "myframe150", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[150]);
        SetFrameFont(myframe[150], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[150], "");
        SetFrameSize(myframe[150], FromPixelX(144), FromPixelY(32));
        SetFrameTextAlignment(myframe[150], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[150], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(678), FromPixelY(-136));
        ShowFrame(myframe[150], true);

        myframe[151] = CreateFrameByType("SIMPLETEXT", "myframe151", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[151]);
        SetFrameFont(myframe[151], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[151], "");
        SetFrameSize(myframe[151], FromPixelX(144), FromPixelY(32));
        SetFrameTextAlignment(myframe[151], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[151], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(678), FromPixelY(-208));
        ShowFrame(myframe[151], true);

        myframe[152] = CreateFrameByType("SIMPLETEXT", "myframe152", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[152]);
        SetFrameFont(myframe[152], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[152], "");
        SetFrameSize(myframe[152], FromPixelX(144), FromPixelY(32));
        SetFrameTextAlignment(myframe[152], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[152], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(678), FromPixelY(-256));
        ShowFrame(myframe[152], true);

        myframe[153] = CreateFrameByType("SIMPLETEXT", "myframe153", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[153]);
        SetFrameFont(myframe[153], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[153], "");
        SetFrameSize(myframe[153], FromPixelX(144), FromPixelY(32));
        SetFrameTextAlignment(myframe[153], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[153], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(678), FromPixelY(-304));
        ShowFrame(myframe[153], true);

        myframe[154] = CreateFrameByType("SIMPLETEXT", "myframe154", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[154]);
        SetFrameFont(myframe[154], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[154], "");
        SetFrameSize(myframe[154], FromPixelX(144), FromPixelY(32));
        SetFrameTextAlignment(myframe[154], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[154], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(678), FromPixelY(-376));
        ShowFrame(myframe[154], true);

        myframe[155] = CreateFrameByType("SIMPLETEXT", "myframe155", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[155]);
        SetFrameFont(myframe[155], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[155], "");
        SetFrameSize(myframe[155], FromPixelX(144), FromPixelY(32));
        SetFrameTextAlignment(myframe[155], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[155], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(678), FromPixelY(-424));
        ShowFrame(myframe[155], true);

        myframe[156] = CreateFrameByType("SIMPLETEXT", "myframe156", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[156]);
        SetFrameFont(myframe[156], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[156], "");
        SetFrameSize(myframe[156], FromPixelX(144), FromPixelY(32));
        SetFrameTextAlignment(myframe[156], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[156], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(678), FromPixelY(-472));
        ShowFrame(myframe[156], true);

        myframe[157] = CreateFrameByType("SIMPLETEXT", "myframe157", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[157]);
        SetFrameFont(myframe[157], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[157], "");
        SetFrameSize(myframe[157], FromPixelX(128), FromPixelY(32));
        SetFrameTextAlignment(myframe[157], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[157], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(832), FromPixelY(-40));
        ShowFrame(myframe[157], true);

        myframe[158] = CreateFrameByType("SIMPLETEXT", "myframe158", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[158]);
        SetFrameFont(myframe[158], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[158], "");
        SetFrameSize(myframe[158], FromPixelX(128), FromPixelY(32));
        SetFrameTextAlignment(myframe[158], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[158], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(832), FromPixelY(-88));
        ShowFrame(myframe[158], true);

        myframe[159] = CreateFrameByType("SIMPLETEXT", "myframe159", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[159]);
        SetFrameFont(myframe[159], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[159], "");
        SetFrameSize(myframe[159], FromPixelX(128), FromPixelY(32));
        SetFrameTextAlignment(myframe[159], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[159], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(832), FromPixelY(-136));
        ShowFrame(myframe[159], true);

        myframe[160] = CreateFrameByType("SIMPLETEXT", "myframe160", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[160]);
        SetFrameFont(myframe[160], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[160], "");
        SetFrameSize(myframe[160], FromPixelX(128), FromPixelY(32));
        SetFrameTextAlignment(myframe[160], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[160], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(832), FromPixelY(-208));
        ShowFrame(myframe[160], true);

        myframe[161] = CreateFrameByType("SIMPLETEXT", "myframe161", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[161]);
        SetFrameFont(myframe[161], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[161], "");
        SetFrameSize(myframe[161], FromPixelX(128), FromPixelY(32));
        SetFrameTextAlignment(myframe[161], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[161], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(832), FromPixelY(-256));
        ShowFrame(myframe[161], true);

        myframe[162] = CreateFrameByType("SIMPLETEXT", "myframe162", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[162]);
        SetFrameFont(myframe[162], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[162], "");
        SetFrameSize(myframe[162], FromPixelX(128), FromPixelY(32));
        SetFrameTextAlignment(myframe[162], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[162], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(832), FromPixelY(-304));
        ShowFrame(myframe[162], true);

        myframe[163] = CreateFrameByType("SIMPLETEXT", "myframe163", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[163]);
        SetFrameFont(myframe[163], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[163], "");
        SetFrameSize(myframe[163], FromPixelX(128), FromPixelY(32));
        SetFrameTextAlignment(myframe[163], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[163], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(832), FromPixelY(-376));
        ShowFrame(myframe[163], true);

        myframe[164] = CreateFrameByType("SIMPLETEXT", "myframe164", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[164]);
        SetFrameFont(myframe[164], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[164], "");
        SetFrameSize(myframe[164], FromPixelX(128), FromPixelY(32));
        SetFrameTextAlignment(myframe[164], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[164], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(832), FromPixelY(-424));
        ShowFrame(myframe[164], true);

        myframe[165] = CreateFrameByType("SIMPLETEXT", "myframe165", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[165]);
        SetFrameFont(myframe[165], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[165], "");
        SetFrameSize(myframe[165], FromPixelX(128), FromPixelY(32));
        SetFrameTextAlignment(myframe[165], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[165], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(832), FromPixelY(-472));
        ShowFrame(myframe[165], true);

        myframe[166] = CreateFrameByType("SIMPLEFRAME", "myframe166", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[166]);
        SetFrameTexture(myframe[166], "poinskor.tga", 0, false);
        SetFrameSize(myframe[166], FromPixelX(240), FromPixelY(287));
        SetFrameRelativePoint(myframe[166], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPRIGHT, FromPixelX(5), .0f);
        ShowFrame(myframe[166], true);

        myframe[167] = CreateFrameByType("SIMPLETEXT", "myframe167", myframe[166], "", 0);
        ClearFrameAllPoints(myframe[167]);
        SetFrameFont(myframe[167], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[167], "");
        SetFrameSize(myframe[167], FromPixelX(240), FromPixelY(32));
        SetFrameTextAlignment(myframe[167], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_RIGHT);
        SetFrameRelativePoint(myframe[167], FRAMEPOINT_TOPLEFT, myframe[166], FRAMEPOINT_TOPLEFT, .0f, FromPixelY(-48));
        ShowFrame(myframe[167], true);

        myframe[168] = CreateFrameByType("SIMPLETEXT", "myframe168", myframe[166], "", 0);
        ClearFrameAllPoints(myframe[168]);
        SetFrameFont(myframe[168], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[168], "");
        SetFrameSize(myframe[168], FromPixelX(240), FromPixelY(32));
        SetFrameTextAlignment(myframe[168], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_RIGHT);
        SetFrameRelativePoint(myframe[168], FRAMEPOINT_TOPLEFT, myframe[166], FRAMEPOINT_TOPLEFT, .0f, FromPixelY(-111));
        ShowFrame(myframe[168], true);

        myframe[169] = CreateFrameByType("SIMPLETEXT", "myframe169", myframe[166], "", 0);
        ClearFrameAllPoints(myframe[169]);
        SetFrameFont(myframe[169], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[169], "");
        SetFrameSize(myframe[169], FromPixelX(240), FromPixelY(32));
        SetFrameTextAlignment(myframe[169], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_RIGHT);
        SetFrameRelativePoint(myframe[169], FRAMEPOINT_TOPLEFT, myframe[166], FRAMEPOINT_TOPLEFT, .0f, FromPixelY(-174));
        ShowFrame(myframe[169], true);

        myframe[170] = CreateFrameByType("SIMPLETEXT", "myframe170", myframe[166], "", 0);
        ClearFrameAllPoints(myframe[170]);
        SetFrameFont(myframe[170], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[170], "");
        SetFrameSize(myframe[170], FromPixelX(240), FromPixelY(32));
        SetFrameTextAlignment(myframe[170], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_RIGHT);
        SetFrameRelativePoint(myframe[170], FRAMEPOINT_TOPLEFT, myframe[166], FRAMEPOINT_TOPLEFT, .0f, FromPixelY(-237));
        ShowFrame(myframe[170], true);

        myframe[171] = CreateFrameByType("SIMPLEFRAME", "myframe171", myframe[0], "", 0);
        ClearFrameAllPoints(myframe[171]);
        SetFrameTextureEx(myframe[171], 0, "UI\\Widgets\\ToolTips\\Human\\human-tooltip-background.blp", false, "UI\\Widgets\\ToolTips\\Human\\human-tooltip-border.blp", BORDER_FLAG_ALL);
        SetFrameSize(myframe[171], FromPixelX(512), FromPixelY(30));
        SetFrameRelativePoint(myframe[171], FRAMEPOINT_TOP, myframe[0], FRAMEPOINT_TOP, .0f, FromPixelY(-88));
        ShowFrame(myframe[171], false);

        myframe[172] = CreateFrameByType("SIMPLESTATUSBAR", "myframe172", myframe[171], "", 0);
        ClearFrameAllPoints(myframe[172]);
        SetFrameTexture(myframe[172], "ReplaceableTextures\\TeamColor\\TeamColor00.blp", 0, false);
        SetFrameRelativePoint(myframe[172], FRAMEPOINT_TOPLEFT, myframe[171], FRAMEPOINT_TOPLEFT, FromPixelX(6), FromPixelY(-6));
        SetFrameRelativePoint(myframe[172], FRAMEPOINT_BOTTOMRIGHT, myframe[171], FRAMEPOINT_BOTTOMRIGHT, FromPixelX(-6), FromPixelY(6));
        ShowFrame(myframe[172], true);

        myframe[173] = CreateFrameByType("SIMPLETEXTURE", "myframe173", myframe[172], "", 0);
        ClearFrameAllPoints(myframe[173]);
        SetFrameTexture(myframe[173], "replaceabletextures\\commandbuttons\\BTNGilgameshCaster.blp", 0, false);
        SetFrameSize(myframe[173], FromPixelX(48), FromPixelY(48));
        SetFrameRelativePoint(myframe[173], FRAMEPOINT_RIGHT, myframe[171], FRAMEPOINT_LEFT, FromPixelX(24), .0f);
        ShowFrame(myframe[173], true);

        myframe[174] = CreateFrameByType("SIMPLETEXT", "myframe174", myframe[172], "", 0);
        ClearFrameAllPoints(myframe[174]);
        SetFrameFont(myframe[174], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[174], "");
        SetFrameAllPoints(myframe[174], myframe[172]);
        SetFrameTextAlignment(myframe[174], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameTextAlignmentValue(myframe[174], 2, FromPixelX(1));
        SetFrameTextAlignmentValue(myframe[174], 3, FromPixelY(-1));
        SetFrameTextColourEx(myframe[174], 1, ConvertColour(255, 0, 0, 0));
        ShowFrame(myframe[174], true);

        myframe[175] = CreateFrameByType("SIMPLETEXT", "myframe175", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[175]);
        SetFrameFont(myframe[175], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[175], "");
        SetFrameSize(myframe[175], FromPixelX(96), FromPixelY(32));
        SetFrameTextAlignment(myframe[175], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[175], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(970), FromPixelY(-40));
        ShowFrame(myframe[175], true);

        myframe[176] = CreateFrameByType("SIMPLETEXT", "myframe176", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[176]);
        SetFrameFont(myframe[176], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[176], "");
        SetFrameSize(myframe[176], FromPixelX(96), FromPixelY(32));
        SetFrameTextAlignment(myframe[176], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[176], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(970), FromPixelY(-88));
        ShowFrame(myframe[176], true);

        myframe[177] = CreateFrameByType("SIMPLETEXT", "myframe177", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[177]);
        SetFrameFont(myframe[177], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[177], "");
        SetFrameSize(myframe[177], FromPixelX(96), FromPixelY(32));
        SetFrameTextAlignment(myframe[177], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[177], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(970), FromPixelY(-136));
        ShowFrame(myframe[177], true);

        myframe[178] = CreateFrameByType("SIMPLETEXT", "myframe178", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[178]);
        SetFrameFont(myframe[178], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[178], "");
        SetFrameSize(myframe[178], FromPixelX(96), FromPixelY(32));
        SetFrameTextAlignment(myframe[178], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[178], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(970), FromPixelY(-208));
        ShowFrame(myframe[178], true);

        myframe[179] = CreateFrameByType("SIMPLETEXT", "myframe179", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[179]);
        SetFrameFont(myframe[179], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[179], "");
        SetFrameSize(myframe[179], FromPixelX(96), FromPixelY(32));
        SetFrameTextAlignment(myframe[179], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[179], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(970), FromPixelY(-256));
        ShowFrame(myframe[179], true);

        myframe[180] = CreateFrameByType("SIMPLETEXT", "myframe180", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[180]);
        SetFrameFont(myframe[180], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[180], "");
        SetFrameSize(myframe[180], FromPixelX(96), FromPixelY(32));
        SetFrameTextAlignment(myframe[180], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[180], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(970), FromPixelY(-304));
        ShowFrame(myframe[180], true);

        myframe[181] = CreateFrameByType("SIMPLETEXT", "myframe181", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[181]);
        SetFrameFont(myframe[181], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[181], "");
        SetFrameSize(myframe[181], FromPixelX(96), FromPixelY(32));
        SetFrameTextAlignment(myframe[181], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[181], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(970), FromPixelY(-376));
        ShowFrame(myframe[181], true);

        myframe[182] = CreateFrameByType("SIMPLETEXT", "myframe182", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[182]);
        SetFrameFont(myframe[182], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[182], "");
        SetFrameSize(myframe[182], FromPixelX(96), FromPixelY(32));
        SetFrameTextAlignment(myframe[182], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[182], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(970), FromPixelY(-424));
        ShowFrame(myframe[182], true);

        myframe[183] = CreateFrameByType("SIMPLETEXT", "myframe183", myframe[48], "", 0);
        ClearFrameAllPoints(myframe[183]);
        SetFrameFont(myframe[183], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
        SetFrameText(myframe[183], "");
        SetFrameSize(myframe[183], FromPixelX(96), FromPixelY(32));
        SetFrameTextAlignment(myframe[183], TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE);
        SetFrameRelativePoint(myframe[183], FRAMEPOINT_TOPLEFT, myframe[48], FRAMEPOINT_TOPLEFT, FromPixelX(970), FromPixelY(-472));
        ShowFrame(myframe[183], true);

        mmrfile = TextFileOpen("networkio\\requests\\mmr.txt");
        TextFileClear(mmrfile);
        s = "\"{ \"url\": \"https://api.wc3stats.com/rpc/ratings?map=Fight%20of%20Anime%20RvE&ladder=Public&season=Season%205&mode=Global&";
        for (i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
        {
            if (IsPlaying[i])
            {
                s += "players[" + I2S(i) + "]=" + RealPlayerName[i] + "&";
            }
        }
        s += "format=kv\" }\"";
        TextFileWriteLine(mmrfile, s);
        TextFileClose(mmrfile);

        for (i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
        {
            TriggerRegisterPlayerSyncEvent(MMRtrig, Player(i), "X", false);
        }
        TriggerAddAction(MMRtrig, function()
        {
            player p = GetTriggerSyncPlayer();
            string s = GetTriggerSyncData();
            string s2 = "";
            string s3 = "";

            for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
            {
                s2 = RealPlayerName[i];
                if (s.findFirst(s2, 0) >= 0)
                {
                    s3 = "";
                    for (uint j = 1; j < 6; j++)
                    {
                        s3 = s.substr(s.findFirst(s2, 0) + s2.length() + 1, j);
                        if (s3.substr(s3.length()-1, 1) == "\\" || s3.substr(s3.length()-1, 1) == " ") { break; }
                    }
                    PlayerMMR[i] = S2I(s3); 
                }
            }
        });

        TimerStart(CreateTimer(), 5, false, function()
        {
            textfilehandle mmrfile = nil;

            DestroyTimer(GetExpiredTimer());
            mmrfile = TextFileOpen("networkio\\responses\\mmr.txt");
            if (TextFileRead(mmrfile) != "")
            {
                SendSyncData("X", TextFileRead(mmrfile));
            }
            TextFileClose(mmrfile);
        });

        for (i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
        {
            TriggerRegisterPlayerKeyEvent(TABtrig, Player(i), OSKEY_TAB, META_KEY_NONE, true);
            TriggerRegisterPlayerKeyEvent(TABtrig, Player(i), OSKEY_TAB, META_KEY_NONE, false);
        }
        TriggerAddAction(TABtrig, function()
        {
            player p = GetTriggerPlayer();
            int pid = GetPlayerId(p);
            float dmg = .0f;

            if (p == GetLocalPlayer())
            {
                ShowFrame(myframe[48], GetTriggerPlayerIsKeyDown());
            }

            if (MyHero[0] != nil)
            {
                dmg = LoadReal(GameHT, GetHandleId(MyHero[0]), StringHash("DamageDealt")) / 1000.f;
                if (p == GetLocalPlayer())
                {
                    SetFrameTexture(myframe[49], GetUnitStringField(MyHero[0], UNIT_SF_ICON_NORMAL), 0, false);
                    SetFrameText(myframe[58], GetPlayerName(Player(0)));
                    SetFrameText(myframe[121], I2S(HERO_KILL[0]));
                    SetFrameText(myframe[122], I2S(HERO_DEATH[0]));
                    SetFrameText(myframe[123], I2S(HERO_ASSIST[0]));
                    SetFrameText(myframe[148], I2S(GetPlayerState(Player(0), PLAYER_STATE_RESOURCE_GOLD)));
                    SetFrameText(myframe[157], R2SW(dmg, 0, 1) + "K");
                    SetFrameText(myframe[175], I2S(PlayerMMR[0]));
                }
                for (int i = 0; i < 6; i++)
                {
                    if (UnitItemInSlot(MyHero[0], i) != nil)
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[67 + i], GetItemStringField(UnitItemInSlot(MyHero[0], i), ITEM_SF_ICON), 0, false);
                        }
                    }
                    else
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[67 + i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
                        }
                    }
                }
            }

            if (MyHero[1] != nil)
            {
                dmg = LoadReal(GameHT, GetHandleId(MyHero[1]), StringHash("DamageDealt")) / 1000.f;
                if (p == GetLocalPlayer())
                {
                    SetFrameTexture(myframe[50], GetUnitStringField(MyHero[1], UNIT_SF_ICON_NORMAL), 0, false);
                    SetFrameText(myframe[59], GetPlayerName(Player(1)));
                    SetFrameText(myframe[124], I2S(HERO_KILL[1]));
                    SetFrameText(myframe[125], I2S(HERO_DEATH[1]));
                    SetFrameText(myframe[126], I2S(HERO_ASSIST[1]));
                    SetFrameText(myframe[149], I2S(GetPlayerState(Player(1), PLAYER_STATE_RESOURCE_GOLD)));
                    SetFrameText(myframe[158], R2SW(dmg, 0, 1) + "K");
                    SetFrameText(myframe[176], I2S(PlayerMMR[1]));
                }
                for (int i = 0; i < 6; i++)
                {
                    if (UnitItemInSlot(MyHero[1], i) != nil)
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[73 + i], GetItemStringField(UnitItemInSlot(MyHero[1], i), ITEM_SF_ICON), 0, false);
                        }
                    }
                    else
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[73 + i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
                        }
                    }
                }
            }

            if (MyHero[2] != nil)
            {
                dmg = LoadReal(GameHT, GetHandleId(MyHero[2]), StringHash("DamageDealt")) / 1000.f;
                if (p == GetLocalPlayer())
                {
                    SetFrameTexture(myframe[51], GetUnitStringField(MyHero[2], UNIT_SF_ICON_NORMAL), 0, false);
                    SetFrameText(myframe[60], GetPlayerName(Player(2)));
                    SetFrameText(myframe[127], I2S(HERO_KILL[2]));
                    SetFrameText(myframe[128], I2S(HERO_DEATH[2]));
                    SetFrameText(myframe[129], I2S(HERO_ASSIST[2]));
                    SetFrameText(myframe[150], I2S(GetPlayerState(Player(2), PLAYER_STATE_RESOURCE_GOLD)));
                    SetFrameText(myframe[159], R2SW(dmg, 0, 1) + "K");
                    SetFrameText(myframe[177], I2S(PlayerMMR[2]));
                }
                for (int i = 0; i < 6; i++)
                {
                    if (UnitItemInSlot(MyHero[2], i) != nil)
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[79 + i], GetItemStringField(UnitItemInSlot(MyHero[2], i), ITEM_SF_ICON), 0, false);
                        }
                    }
                    else
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[79 + i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
                        }
                    }
                }
            }

            if (MyHero[4] != nil)
            {
                dmg = LoadReal(GameHT, GetHandleId(MyHero[4]), StringHash("DamageDealt")) / 1000.f;
                if (p == GetLocalPlayer())
                {
                    SetFrameTexture(myframe[52], GetUnitStringField(MyHero[4], UNIT_SF_ICON_NORMAL), 0, false);
                    SetFrameText(myframe[61], GetPlayerName(Player(4)));
                    SetFrameText(myframe[130], I2S(HERO_KILL[4]));
                    SetFrameText(myframe[131], I2S(HERO_DEATH[4]));
                    SetFrameText(myframe[132], I2S(HERO_ASSIST[4]));
                    SetFrameText(myframe[151], I2S(GetPlayerState(Player(4), PLAYER_STATE_RESOURCE_GOLD)));
                    SetFrameText(myframe[160], R2SW(dmg, 0, 1) + "K");
                    SetFrameText(myframe[178], I2S(PlayerMMR[4]));
                }
                for (int i = 0; i < 6; i++)
                {
                    if (UnitItemInSlot(MyHero[4], i) != nil)
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[85 + i], GetItemStringField(UnitItemInSlot(MyHero[4], i), ITEM_SF_ICON), 0, false);
                        }
                    }
                    else
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[85 + i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
                        }
                    }
                }
            }

            if (MyHero[5] != nil)
            {
                dmg = LoadReal(GameHT, GetHandleId(MyHero[5]), StringHash("DamageDealt")) / 1000.f;
                if (p == GetLocalPlayer())
                {
                    SetFrameTexture(myframe[53], GetUnitStringField(MyHero[5], UNIT_SF_ICON_NORMAL), 0, false);
                    SetFrameText(myframe[62], GetPlayerName(Player(5)));
                    SetFrameText(myframe[133], I2S(HERO_KILL[5]));
                    SetFrameText(myframe[134], I2S(HERO_DEATH[5]));
                    SetFrameText(myframe[135], I2S(HERO_ASSIST[5]));
                    SetFrameText(myframe[152], I2S(GetPlayerState(Player(5), PLAYER_STATE_RESOURCE_GOLD)));
                    SetFrameText(myframe[161], R2SW(dmg, 0, 1) + "K");
                    SetFrameText(myframe[179], I2S(PlayerMMR[5]));
                }
                for (int i = 0; i < 6; i++)
                {
                    if (UnitItemInSlot(MyHero[5], i) != nil)
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[91 + i], GetItemStringField(UnitItemInSlot(MyHero[5], i), ITEM_SF_ICON), 0, false);
                        }
                    }
                    else
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[91 + i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
                        }
                    }
                }
            }

            if (MyHero[6] != nil)
            {
                dmg = LoadReal(GameHT, GetHandleId(MyHero[6]), StringHash("DamageDealt")) / 1000.f;
                if (p == GetLocalPlayer())
                {
                    SetFrameTexture(myframe[54], GetUnitStringField(MyHero[6], UNIT_SF_ICON_NORMAL), 0, false);
                    SetFrameText(myframe[63], GetPlayerName(Player(6)));
                    SetFrameText(myframe[136], I2S(HERO_KILL[6]));
                    SetFrameText(myframe[137], I2S(HERO_DEATH[6]));
                    SetFrameText(myframe[138], I2S(HERO_ASSIST[6]));
                    SetFrameText(myframe[153], I2S(GetPlayerState(Player(6), PLAYER_STATE_RESOURCE_GOLD)));
                    SetFrameText(myframe[162], R2SW(dmg, 0, 1) + "K");
                    SetFrameText(myframe[180], I2S(PlayerMMR[6]));
                }
                for (int i = 0; i < 6; i++)
                {
                    if (UnitItemInSlot(MyHero[6], i) != nil)
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[97 + i], GetItemStringField(UnitItemInSlot(MyHero[6], i), ITEM_SF_ICON), 0, false);
                        }
                    }
                    else
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[97 + i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
                        }
                    }
                }
            }

            if (MyHero[8] != nil)
            {
                dmg = LoadReal(GameHT, GetHandleId(MyHero[8]), StringHash("DamageDealt")) / 1000.f;
                if (p == GetLocalPlayer())
                {
                    SetFrameTexture(myframe[55], GetUnitStringField(MyHero[8], UNIT_SF_ICON_NORMAL), 0, false);
                    SetFrameText(myframe[64], GetPlayerName(Player(8)));
                    SetFrameText(myframe[139], I2S(HERO_KILL[8]));
                    SetFrameText(myframe[140], I2S(HERO_DEATH[8]));
                    SetFrameText(myframe[141], I2S(HERO_ASSIST[8]));
                    SetFrameText(myframe[154], I2S(GetPlayerState(Player(8), PLAYER_STATE_RESOURCE_GOLD)));
                    SetFrameText(myframe[163], R2SW(dmg, 0, 1) + "K");
                    SetFrameText(myframe[181], I2S(PlayerMMR[8]));
                }
                for (int i = 0; i < 6; i++)
                {
                    if (UnitItemInSlot(MyHero[8], i) != nil)
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[103 + i], GetItemStringField(UnitItemInSlot(MyHero[8], i), ITEM_SF_ICON), 0, false);
                        }
                    }
                    else
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[103 + i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
                        }
                    }
                }
            }

            if (MyHero[9] != nil)
            {
                dmg = LoadReal(GameHT, GetHandleId(MyHero[9]), StringHash("DamageDealt")) / 1000.f;
                if (p == GetLocalPlayer())
                {
                    SetFrameTexture(myframe[56], GetUnitStringField(MyHero[9], UNIT_SF_ICON_NORMAL), 0, false);
                    SetFrameText(myframe[65], GetPlayerName(Player(9)));
                    SetFrameText(myframe[142], I2S(HERO_KILL[9]));
                    SetFrameText(myframe[143], I2S(HERO_DEATH[9]));
                    SetFrameText(myframe[144], I2S(HERO_ASSIST[9]));
                    SetFrameText(myframe[155], I2S(GetPlayerState(Player(9), PLAYER_STATE_RESOURCE_GOLD)));
                    SetFrameText(myframe[164], R2SW(dmg, 0, 1) + "K");
                    SetFrameText(myframe[182], I2S(PlayerMMR[9]));
                }
                for (int i = 0; i < 6; i++)
                {
                    if (UnitItemInSlot(MyHero[9], i) != nil)
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[109 + i], GetItemStringField(UnitItemInSlot(MyHero[9], i), ITEM_SF_ICON), 0, false);
                        }
                    }
                    else
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[109 + i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
                        }
                    }
                }
            }

            if (MyHero[10] != nil)
            {
                dmg = LoadReal(GameHT, GetHandleId(MyHero[10]), StringHash("DamageDealt")) / 1000.f;
                if (p == GetLocalPlayer())
                {
                    SetFrameTexture(myframe[57], GetUnitStringField(MyHero[10], UNIT_SF_ICON_NORMAL), 0, false);
                    SetFrameText(myframe[66], GetPlayerName(Player(10)));
                    SetFrameText(myframe[145], I2S(HERO_KILL[10]));
                    SetFrameText(myframe[146], I2S(HERO_DEATH[10]));
                    SetFrameText(myframe[147], I2S(HERO_ASSIST[10]));
                    SetFrameText(myframe[156], I2S(GetPlayerState(Player(10), PLAYER_STATE_RESOURCE_GOLD)));
                    SetFrameText(myframe[165], R2SW(dmg, 0, 1) + "K");
                    SetFrameText(myframe[183], I2S(PlayerMMR[10]));
                }
                for (int i = 0; i < 6; i++)
                {
                    if (UnitItemInSlot(MyHero[10], i) != nil)
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[115 + i], GetItemStringField(UnitItemInSlot(MyHero[10], i), ITEM_SF_ICON), 0, false);
                        }
                    }
                    else
                    {
                        if (p == GetLocalPlayer())
                        {
                            SetFrameTexture(myframe[115 + i], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
                        }
                    }
                }
            }
        });

        for (i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
        {
            if (i == 3 || i == 7 || i == 11)
            {
                continue;
            }
            if (IsPlaying[i])
            {
                if (i >= 0 && i <= 2)
                {
                    MyHero[i] = CreateUnit(Player(i), HeroRawId[MemoHero[i]], GetRectCenterX(revive_team1), GetRectCenterY(revive_team1), 0);
                } 
                else if (i >= 4 && i <= 6)
                {
                    MyHero[i] = CreateUnit(Player(i), HeroRawId[MemoHero[i]], GetRectCenterX(revive_team2), GetRectCenterY(revive_team2), 0);
                } 
                else
                {
                    MyHero[i] = CreateUnit(Player(i), HeroRawId[MemoHero[i]], GetRectCenterX(revive_team3), GetRectCenterY(revive_team3), 0);
                }
                if (TEST_MODE)
                {
                    SetHeroLevel(MyHero[i], 50, false);
                    SetPlayerState(Player(i), PLAYER_STATE_RESOURCE_GOLD, 1000000);
                }
                switch (i)
                {
                    case 0: SetFrameTexture(myframe[30], GetUnitStringField(MyHero[i], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 1: SetFrameTexture(myframe[32], GetUnitStringField(MyHero[i], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 2: SetFrameTexture(myframe[34], GetUnitStringField(MyHero[i], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 4: SetFrameTexture(myframe[36], GetUnitStringField(MyHero[i], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 5: SetFrameTexture(myframe[38], GetUnitStringField(MyHero[i], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 6: SetFrameTexture(myframe[40], GetUnitStringField(MyHero[i], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 8: SetFrameTexture(myframe[42], GetUnitStringField(MyHero[i], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 9: SetFrameTexture(myframe[44], GetUnitStringField(MyHero[i], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 10: SetFrameTexture(myframe[46], GetUnitStringField(MyHero[i], UNIT_SF_ICON_NORMAL), 0, false); break;
                }
                PanCameraToTimedForPlayer(Player(i), GetUnitX(MyHero[i]), GetUnitY(MyHero[i]), .0f);
                MMD::updateValue("Heroes", Player(i), "=", GetUnitStringField(MyHero[i], UNIT_SF_NAME), "string");
            }
        }
        TimerStart(CreateTimer(), 0.1f, true, @UIBehavior);
        GenericSystem();
        Indexer::IndexEvent(@TowerInit);
        Indexer::onInit();
        PauseTimer(GetExpiredTimer());
        DestroyTimer(GetExpiredTimer());
    }
}

void HeroPicked()
{
    framehandle f = GetTriggerFrame();
    player p = GetTriggerPlayer();
    int pid = GetPlayerId(p);

    if (MemoHero[pid] != -1 && !SelectYet[pid])
    {
        if (!HeroGone[MemoHero[pid]])
        {
            if (HeroPickTime < 60)
            {
                if (HaveSavedString(GameHT, HeroRawId[MemoHero[pid]], StringHash("picksound"))) 
                {
                    SoundStart(LoadStr(GameHT, HeroRawId[MemoHero[pid]], StringHash("picksound")));
                }
                SelectYet[pid] = true;
                HeroGone[MemoHero[pid]] = true;
                switch (pid)
                {
                    case 0: SetFrameTexture(pickframe[3], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 1: SetFrameTexture(pickframe[4], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 2: SetFrameTexture(pickframe[5], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 4: SetFrameTexture(pickframe[6], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 5: SetFrameTexture(pickframe[7], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 6: SetFrameTexture(pickframe[8], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 8: SetFrameTexture(pickframe[9], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 9: SetFrameTexture(pickframe[10], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 10: SetFrameTexture(pickframe[11], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                }
                SetFrameEnabled(HandleListGetFrameByIndex(HeroSelectList, MemoHero[pid]), false);
            }
            else
            {
                if (!BanYet[pid])
                {
                    BanYet[pid] = true;
                    switch (pid)
                    {
                        case 0: SetFrameTexture(pickframe[3], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                        case 1: SetFrameTexture(pickframe[4], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                        case 2: SetFrameTexture(pickframe[5], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                        case 4: SetFrameTexture(pickframe[6], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                        case 5: SetFrameTexture(pickframe[7], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                        case 6: SetFrameTexture(pickframe[8], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                        case 8: SetFrameTexture(pickframe[9], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                        case 9: SetFrameTexture(pickframe[10], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                        case 10: SetFrameTexture(pickframe[11], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    }
                    HandleListAddHandle(BanList, HandleListGetFrameByIndex(HeroSelectList, MemoHero[pid]));
                }
            }
        }
    }
}

void HeroRandomed()
{
    framehandle f = GetTriggerFrame();
    player p = GetTriggerPlayer();
    int pid = GetPlayerId(p);
    int randomInt = 0;

    if (IsPlaying[pid] && !SelectYet[pid] && p != Player(3) && p != Player(7) && p != Player(11) && HeroPickTime < 60)
    {
        while (!SelectYet[pid])
        {
            randomInt = GetRandomInt(0, HeroCount);
            if (!HeroGone[randomInt])
            {
                if (HaveSavedString(GameHT, HeroRawId[randomInt], StringHash("picksound"))) 
                {
                    SoundStart(LoadStr(GameHT, HeroRawId[randomInt], StringHash("picksound")));
                }
                SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) + 200);
                MemoHero[pid] = randomInt;
                SelectYet[pid] = true;
                HeroGone[randomInt] = true;
                if (p == GetLocalPlayer())
                {
                    SetFrameTexture(pickframe[2], HeroPickImg[randomInt], 0, false);
                }
                switch (pid)
                {
                    case 0: SetFrameTexture(pickframe[3], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 1: SetFrameTexture(pickframe[4], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 2: SetFrameTexture(pickframe[5], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 4: SetFrameTexture(pickframe[6], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 5: SetFrameTexture(pickframe[7], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 6: SetFrameTexture(pickframe[8], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 8: SetFrameTexture(pickframe[9], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 9: SetFrameTexture(pickframe[10], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                    case 10: SetFrameTexture(pickframe[11], GetUnitBaseStringFieldById(HeroRawId[MemoHero[pid]], UNIT_SF_ICON_NORMAL), 0, false); break;
                }
                SetFrameEnabled(HandleListGetFrameByIndex(HeroSelectList, MemoHero[pid]), false);
            }
        }
    }
}

void cframepick()
{
    LoadTOCFile("war3mapImported\\RVEUI.toc");
    HideOriginFrames(true);
    EditBlackBorders(.0f, .0f);

    pickframe[0] = CreateFrameByType("SIMPLEFRAME", "pickframe0", GetOriginFrame(ORIGIN_FRAME_CONSOLE_UI, 0), "", 0);
    ClearFrameAllPoints(pickframe[0]);
    SetFrameTexture(pickframe[0], "pickbg.tga", 0, false);
    SetFrameRelativePoint(pickframe[0], FRAMEPOINT_TOPLEFT, GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), FRAMEPOINT_TOPLEFT, .0f, .0f);
    SetFrameRelativePoint(pickframe[0], FRAMEPOINT_BOTTOMRIGHT, GetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), FRAMEPOINT_BOTTOMRIGHT, .0f, .0f);
    ShowFrame(pickframe[0], true);

    pickframe[1] = CreateFrameByType("SIMPLETEXT", "pickframe1", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[1]);
    SetFrameFont(pickframe[1], "Fonts\\FRIZQT__.TTF", 0.01f, 0);
    SetFrameText(pickframe[1], "|cffFFDC00Selection Time Left : 60.0");
    SetFrameRelativePoint(pickframe[1], FRAMEPOINT_TOP, pickframe[0], FRAMEPOINT_TOPLEFT, 0.39375f, -0.01f);
    ShowFrame(pickframe[1], true);

    pickframe[2] = CreateFrameByType("SIMPLEFRAME", "pickframe2", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[2]);
    SetFrameTexture(pickframe[2], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
    SetFrameSize(pickframe[2], 0.105f, 0.14f);
    SetFrameRelativePoint(pickframe[2], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.455f, -0.088f);
    ShowFrame(pickframe[2], true);

    pickframe[3] = CreateFrameByType("SIMPLEFRAME", "pickframe3", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[3]);
    SetFrameTexture(pickframe[3], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
    SetFrameSize(pickframe[3], 0.0258f, 0.034f);
    SetFrameRelativePoint(pickframe[3], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.5679f, -0.088f);
    ShowFrame(pickframe[3], true);

    pickframe[4] = CreateFrameByType("SIMPLEFRAME", "pickframe4", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[4]);
    SetFrameTexture(pickframe[4], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
    SetFrameSize(pickframe[4], 0.0258f, 0.034f);
    SetFrameRelativePoint(pickframe[4], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.60125f, -0.088f);
    ShowFrame(pickframe[4], true);

    pickframe[5] = CreateFrameByType("SIMPLEFRAME", "pickframe5", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[5]);
    SetFrameTexture(pickframe[5], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
    SetFrameSize(pickframe[5], 0.0258f, 0.034f);
    SetFrameRelativePoint(pickframe[5], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.6346f, -0.088f);
    ShowFrame(pickframe[5], true);

    pickframe[6] = CreateFrameByType("SIMPLEFRAME", "pickframe6", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[6]);
    SetFrameTexture(pickframe[6], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
    SetFrameSize(pickframe[6], 0.0258f, 0.034f);
    SetFrameRelativePoint(pickframe[6], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.5679f, -0.132f);
    ShowFrame(pickframe[6], true);

    pickframe[7] = CreateFrameByType("SIMPLEFRAME", "pickframe7", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[7]);
    SetFrameTexture(pickframe[7], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
    SetFrameSize(pickframe[7], 0.0258f, 0.034f);
    SetFrameRelativePoint(pickframe[7], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.60125f, -0.132f);
    ShowFrame(pickframe[7], true);

    pickframe[8] = CreateFrameByType("SIMPLEFRAME", "pickframe8", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[8]);
    SetFrameTexture(pickframe[8], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
    SetFrameSize(pickframe[8], 0.0258f, 0.034f);
    SetFrameRelativePoint(pickframe[8], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.6346f, -0.132f);
    ShowFrame(pickframe[8], true);

    pickframe[9] = CreateFrameByType("SIMPLEFRAME", "pickframe9", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[9]);
    SetFrameTexture(pickframe[9], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
    SetFrameSize(pickframe[9], 0.0258f, 0.034f);
    SetFrameRelativePoint(pickframe[9], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.5679f, -0.176f);
    ShowFrame(pickframe[9], true);

    pickframe[10] = CreateFrameByType("SIMPLEFRAME", "pickframe10", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[10]);
    SetFrameTexture(pickframe[10], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
    SetFrameSize(pickframe[10], 0.0258f, 0.034f);
    SetFrameRelativePoint(pickframe[10], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.60125f, -0.176f);
    ShowFrame(pickframe[10], true);

    pickframe[11] = CreateFrameByType("SIMPLEFRAME", "pickframe11", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[11]);
    SetFrameTexture(pickframe[11], "UI\\Widgets\\EscMenu\\Human\\blank-background.blp", 0, false);
    SetFrameSize(pickframe[11], 0.0258f, 0.034f);
    SetFrameRelativePoint(pickframe[11], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.6346f, -0.176f);
    ShowFrame(pickframe[11], true);

    pickframe[12] = CreateFrameByType("SIMPLEBUTTON", "pickframe12", pickframe[0], "SIMPLEBUTTONTEMPLATE", 0);
    ClearFrameAllPoints(pickframe[12]);
    SetFrameSize(pickframe[12], 0.1058f, 0.034f);
    SetFrameRelativePoint(pickframe[12], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.455f, -0.2355f);
    ShowFrame(pickframe[12], true);
    TriggerRegisterFrameEvent(SelectHeroConfirm, pickframe[12], FRAMEEVENT_CONTROL_CLICK);
    TriggerAddAction(SelectHeroConfirm, @HeroPicked);

    pickframe[13] = CreateFrameByType("SIMPLEBUTTON", "pickframe13", pickframe[0], "SIMPLEBUTTONTEMPLATE", 0);
    ClearFrameAllPoints(pickframe[13]);
    SetFrameSize(pickframe[13], 0.1058f, 0.034f);
    SetFrameRelativePoint(pickframe[13], FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.455f, -0.2766f);
    ShowFrame(pickframe[13], true);
    TriggerRegisterFrameEvent(SelectHeroRandom, pickframe[13], FRAMEEVENT_CONTROL_CLICK);
    TriggerAddAction(SelectHeroRandom, @HeroRandomed);

    pickframe[14] = CreateFrameByType("SIMPLEFRAME", "pickframe26", pickframe[0], "", 0);
    ClearFrameAllPoints(pickframe[14]);
    SetFrameTexture(pickframe[14], "BANTIME.tga", 0, false);
    SetFrameSize(pickframe[14], PICKBAN_WIDTH, PICKBAN_HEIGHT);
    SetFrameRelativePoint(pickframe[14], FRAMEPOINT_TOP, pickframe[0], FRAMEPOINT_TOPLEFT, 0.39375f, -0.03f);
    ShowFrame(pickframe[14], true);

    SetFramePriority(GetOriginFrame(ORIGIN_FRAME_CHAT_MESSAGE, 0), 2);
    ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_CHAT_MESSAGE, 0));
    SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_CHAT_MESSAGE, 0), FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.457f, -0.32f);
    SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_CHAT_MESSAGE, 0), FRAMEPOINT_BOTTOMRIGHT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.695f, -0.502f);

    ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_CHAT_EDITBAR, 0));
    SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_CHAT_EDITBAR, 0), FRAMEPOINT_TOPLEFT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.457f, -0.497f);
    SetFrameRelativePoint(GetOriginFrame(ORIGIN_FRAME_CHAT_EDITBAR, 0), FRAMEPOINT_BOTTOMRIGHT, pickframe[0], FRAMEPOINT_TOPLEFT, 0.695f, -0.52f);

    TriggerAddAction(SelectHeroIcon, @HeroIconSelected);

    CreateHeroSelection('H00L', "PickImage\\YugiPick.blp", "YugiPick.mp3", "Yugi10k.mp3");
    CreateHeroSelection('H002', "PickImage\\AlphaPick.blp", "alphapick.mp3", "alpha10k.mp3", 126);
    CreateHeroSelection('H004', "PickImage\\JellalPick.blp", "", "", 22);
    CreateHeroSelection('H00P', "PickImage\\MokuoPick.blp", "", "");
    CreateHeroSelection('H00A', "PickImage\\BellCranelPick.blp", "bellpick.mp3", "bell10k.mp3", 63);
    CreateHeroSelection('H005', "PickImage\\HydePick.blp", "Hydepick.mp3", "Hyde10k.mp3");
    CreateHeroSelection('H00T', "PickImage\\LeeSehaPick.blp", "Sehapick.mp3", "Seha10k.mp3");
    CreateHeroSelection('H00U', "PickImage\\EsdeathPick.blp", "Esdeathpick.mp3", "Esdeath10k.mp3");
    CreateHeroSelection('H00V', "PickImage\\MuramasaPick.blp", "Muramasapick.mp3", "Muramasa10k.mp3");
    CreateHeroSelection('H00W', "PickImage\\AcePick.blp", "", "");
    CreateHeroSelection('H00X', "PickImage\\FuxuanPick.blp", "fuxuanpick.mp3", "fuxuan10k.mp3");
    CreateHeroSelection('H006', "PickImage\\SaberAlterPick.blp", "salterpick.mp3", "salter10k.mp3", 31);
    CreateHeroSelection('H007', "PickImage\\SaboPick.blp", "", "", 62);
    CreateHeroSelection('H00H', "PickImage\\ArthurProtoPick.blp", "Arthurpick.mp3", "Arthur10k.mp3");
    CreateHeroSelection('H00Y', "PickImage\\JingliuPick.blp", "Jingliupick.mp3", "Jingliu10k.mp3");
    CreateHeroSelection('H00N', "PickImage\\Cronuspick.blp", "cronuspick.mp3", "cronus10k.mp3");
    CreateHeroSelection('H008', "PickImage\\Yomipick.blp", "yomipick.mp3", "", 13);
    CreateHeroSelection('H00G', "PickImage\\tsunayoshipick.blp", "tsunapick.mp3", "tsuna10k.mp3");
    CreateHeroSelection('H00I', "PickImage\\YamajiPick.blp", "yamajipick.mp3", "yamaji10k.mp3");
    CreateHeroSelection('H00J', "PickImage\\HutaoPick.blp", "hutaopick.mp3", "hutao10k.mp3");
    CreateHeroSelection('H00C', "PickImage\\Musashipick.blp", "musashipick.mp3", "musashi10k.mp3");
    CreateHeroSelection('H00M', "PickImage\\KianaPick.blp", "kianapick.mp3", "kiana10k.mp3");
    CreateHeroSelection('H00Z', "PickImage\\AstaPick.blp", "astapick.mp3", "asta10k.mp3");
    CreateHeroSelection('H00D', "PickImage\\AkamePick.blp", "akamepick.mp3", "akame10k.mp3", 48);
    CreateHeroSelection('H00F', "PickImage\\ShanaPick.blp", "shanapick.mp3", "shana10k.mp3");
    CreateHeroSelection('H00K', "PickImage\\Alicepick.blp", "alicepick.mp3", "alice10k.mp3");
    CreateHeroSelection('H00B', "PickImage\\Ichigopick.blp", "ichigopick.mp3", "ichigo10k.mp3", 34);
    CreateHeroSelection('H003', "PickImage\\MystoganPick.blp", "", "");
    CreateHeroSelection('H00E', "PickImage\\RyogiPick.blp", "ryougipick.mp3", "ryougi10k.mp3");
    CreateHeroSelection('H010', "PickImage\\GojoPick.blp", "gojopick.mp3", "gojo10k.mp3");
    CreateHeroSelection('H011', "PickImage\\GokuS4Pick.blp", "Gokus4pick.mp3", "gokus410k.mp3");
    CreateHeroSelection('H00O', "PickImage\\VegetaPick.blp", "vegetapick.mp3", "vegeta10k.mp3");
    CreateHeroSelection('H00Q', "PickImage\\OgitaPick.blp", "ogitapick.mp3", "ogita10k.mp3");
    CreateHeroSelection('H012', "PickImage\\HibariPick.blp", "hibaripick.mp3", "hibari10k.mp3");
    CreateHeroSelection('H013', "PickImage\\NatsuDragnelPick.blp", "natsupick.mp3", "natsu10k.mp3");
    CreateHeroSelection('H014', "PickImage\\CidKagenoPick.blp", "cidpick.mp3", "cid10k.mp3");
    CreateHeroSelection('H015', "PickImage\\AcheronPick.blp", "acheronpick.mp3", "acheron10k.mp3");
    CreateHeroSelection('H016', "PickImage\\BisgohanPick.blp", "bisgohanpick.mp3", "bisgohan10k.mp3");
    CreateHeroSelection('H017', "PickImage\\JotaroPick.blp", "jotaropick.mp3", "jotaro10k.mp3");
    CreateHeroSelection('H018', "PickImage\\ByakuranPick.blp", "byakuranpick.mp3", "byakuran10k.mp3");
    //CreateHeroSelection('H019', "PickImage\\FireflyPick.blp", "fireflypick.mp3", "firefly10k.mp3", 76);
    CreateHeroSelection('H01A', "PickImage\\ZweiPick.blp", "reinforcepick.mp3", "reinforce10k.mp3");

    TimerStart(CreateTimer(), 0.1f, true, @heropickfunc);
}

void dialogklik()
{
    button but = GetClickedButton();
    
    if (but == modebutton[0])
    {
        MAX_POIN_KILL = 30;
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r pick 30 poin kill");
    } 
    else if (but == modebutton[1])
    {
        MAX_POIN_KILL = 60;
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r pick 60 poin kill");
    } 
    else if (but == modebutton[2])
    {
        MAX_POIN_KILL = 90;
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r pick 90 poin kill");
    } 
    else if (but == modebutton[3])
    {
        MAX_POIN_KILL = 120;
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r pick 120 poin kill");
    }
    else if (but == modebutton[4])
    {
        BASE_RESIST = 0.2f;
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r pick 20% base resist");
    } 
    else if (but == modebutton[5])
    {
        BASE_RESIST = 0.25f;
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r pick 25% base resist");
    } 
    else if (but == modebutton[6])
    {
        BASE_RESIST = 0.3f;
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r pick 30% base resist");
    } 
    else if (but == modebutton[7])
    {
        BASE_RESIST = 0.35f;
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r pick 35% base resist");
    } 
    else if (but == modebutton[8])
    {
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r pick normal mode");
    } 
    else if (but == modebutton[9])
    {
        TEST_MODE = true;
        if (PlayerCount == 1) { HeroPickTime = 60; }
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r pick test mode");
    }
    if (but == modebutton[0] || but == modebutton[1] || but == modebutton[2] || but == modebutton[3])
    {
        TimerStart(CreateTimer(), 1.f, false, function()
        {
            DestroyTimer(GetExpiredTimer());
            DialogClear(modedialog);
            DialogSetMessage(modedialog, "Set Base Resist");
            modebutton[0] = nil;
            modebutton[1] = nil;
            modebutton[2] = nil;
            modebutton[3] = nil;
            modebutton[4] = DialogAddButton(modedialog, "20% resist", 0);
            modebutton[5] = DialogAddButton(modedialog, "25% resist", 0);
            modebutton[6] = DialogAddButton(modedialog, "30% resist", 0);
            modebutton[7] = DialogAddButton(modedialog, "35% resist", 0);
            DialogDisplay(Player(0), modedialog, true);
        });
    }
    if (but == modebutton[4] || but == modebutton[5] || but == modebutton[6] || but == modebutton[7])
    {
        TimerStart(CreateTimer(), 1.f, false, function()
        {
            DestroyTimer(GetExpiredTimer());
            DialogClear(modedialog);
            DialogSetMessage(modedialog, "Set Base Mode");
            modebutton[4] = nil;
            modebutton[5] = nil;
            modebutton[6] = nil;
            modebutton[7] = nil;
            modebutton[8] = DialogAddButton(modedialog, "normal", 0);
            modebutton[9] = DialogAddButton(modedialog, "test", 0);
            DialogDisplay(Player(0), modedialog, true);
        });
    }
    if (but == modebutton[8] || but == modebutton[9])
    {
        TimerStart(CreateTimer(), 1.f, false, function()
        {
            DestroyTimer(GetExpiredTimer());
            DialogClear(modedialog);
            DialogDisplay(Player(0), modedialog, false);
            cframepick();
            TriggerClear(GetTriggeringTrigger());
        });
        
    }
}

void dialogmodo()
{
    DestroyTimer(GetExpiredTimer());
    ClearMapMusic();
    PlayMusic("Music\\1.mp3;Music\\2.mp3;Music\\3.mp3;Music\\4.mp3;Music\\5.mp3;Music\\6.mp3;Music\\7.mp3;Music\\8.mp3;Music\\9.mp3");
    SetMapFlag(MAP_LOCK_RESOURCE_TRADING, true);
    FogEnable(false);
    FogMaskEnable(false);
    SetTimeOfDayScale( .0f );
	SuspendTimeOfDay( true );

    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        if (i == 3 || i == 7 || i == 11)
        {
            continue;
        }
        if (GetPlayerController(Player(i)) == MAP_CONTROL_USER && GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING)
        {
            IsPlaying[i] = true;
            RealPlayerName[i] = GetPlayerName(Player(i));
            PlayerCount++;
            SetPlayerState(Player(i), PLAYER_STATE_RESOURCE_GOLD, 700);
            dummy[i] = CreateUnit(Player(i), 'Hpal', .0f, .0f, .0f);
            SetPauseUnit(dummy[i], true);
            UnitAddItemById(dummy[i], 'I013');
            UnitAddItemById(dummy[i], 'I013');
            UnitAddItemById(dummy[i], 'I013');
            UnitAddItemById(dummy[i], 'I013');
            UnitAddItemById(dummy[i], 'I013');
            UnitAddItemById(dummy[i], 'I013');
            StartItemCooldown(dummy[i], UnitItemInSlot(dummy[i], 0), 10.f);
            if (Player(i) == GetLocalPlayer())
            {
                SelectUnit(dummy[i], true);
            }
            CreateFogModifierRectBJ(true, Player(i), FOG_OF_WAR_VISIBLE, area_boss);
        }
    }

    MMD::init();
    MMD::defineValue("Heroes", "string", "none", "none");
    MMD::defineValue("Kill", "int", "none", "none");
    MMD::defineValue("Death", "int", "none", "none");
    MMD::defineValue("Assist", "int", "none", "none");
    MMD::defineValue("DamageDealt", "real", "none", "none");

    TimerStart(CreateTimer(), 1.f, false, function()
    {
        for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
        {
            if (dummy[i] != nil)
            {
                RemoveUnit(dummy[i]);
            }
        }
        FogEnable(true);
        FogMaskEnable(true);
        modedialog = DialogCreate();
        DialogClear(modedialog);
        DialogSetMessage(modedialog, "Set Poin Mode");
        modebutton[0] = DialogAddButton(modedialog, "30 poin", 0);
        modebutton[1] = DialogAddButton(modedialog, "60 poin", 0);
        modebutton[2] = DialogAddButton(modedialog, "90 poin", 0);
        modebutton[3] = DialogAddButton(modedialog, "120 poin", 0);
        DialogDisplay(Player(0), modedialog, true);
        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "wait " + PLAYER_COLOR[0] + GetPlayerName(Player(0)) + "|r select game mode!");
        TriggerRegisterDialogEvent(modetrig, modedialog);
        TriggerAddAction(modetrig, @dialogklik);
        DestroyTimer(GetExpiredTimer());
    });
}

void MapDelayed()
{
    TimerStart(CreateTimer(), 1.f, false, @dialogmodo);
}

namespace Indexer 
{
    int abilId = 'Adef';
    array<int> iarray(AS_MAX_ARRAY_SIZE);
    int key = -1;
    int id = -1;
    unit unitt = nil;
    trigger onIndex = CreateTrigger();
    trigger onDeindex = CreateTrigger();

    void index(unit u) 
    {
        int newId;

        if (GetUnitUserData(u) == 0) {
            unitt = u;
            if (key > -1) {
                newId = iarray[key];
                iarray[key] = 0;
                key = key - 1;
            } 
            else {
                id = id + 1;
                newId = id;
            }

            if (GetUnitAbilityLevel(unitt, abilId) == 0) {
                UnitAddAbility(unitt, abilId);
                UnitMakeAbilityPermanent(unitt, true, abilId);
                DisableAbility(GetUnitAbility(unitt, abilId), true, true);
            }
            SetUnitUserData(unitt, newId);
            TriggerEvaluate(onIndex);
        }
    }

    bool onOrder() 
    {
        if (GetIssuedOrderId() == 852056) 
        {
            if (GetUnitAbilityLevel(GetTriggerUnit(), abilId) == 0) 
            {
                unitt = GetTriggerUnit();
                TriggerEvaluate(onDeindex);
                key = key + 1;
                iarray[key] = GetUnitUserData(unitt);
            }
        }
        return true;
    }

    bool onEnter() 
    {
        index(GetFilterUnit());
        return true;
    }

    void onInit() 
    {
        trigger t = CreateTrigger();
        region r = CreateRegion();
        group g = CreateGroup();

        RegionAddRect(r, GetWorldBounds());
        TriggerRegisterEnterRegion(CreateTrigger(), r, Filter(@onEnter));
        for (int i = 0; i <= PLAYER_NEUTRAL_PASSIVE; i++) 
        {
            GroupEnumUnitsOfPlayer(g, Player(i), nil);
            for (int j = 0; j < GroupGetCount(g); j++) 
            {
                unitt = GroupGetUnitByIndex(g, j);
                index(unitt);
            }
            TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_ISSUED_ORDER, nil);
        }
        DestroyGroup(g);
        TriggerAddCondition(t, Filter(@onOrder));
    }

    void IndexEvent(BoolexprFunc@ func)
    {
        TriggerAddCondition(onIndex, Filter(func));
    }

    void DeindexEvent(BoolexprFunc@ func)
    {
        TriggerAddCondition(onDeindex, Filter(func));
    }
}

namespace MMD
{
    string ESCAPED_CHARS = " \\";
    gamecache gc = nil;
    uint messageId = 0;
    bool ready = false;

    string pack(string value)
    {
        string result = "";
        string c = "";

        for (uint i = 0; i < value.length(); i++)
        {
            c = value.substr(i, 1);

            for (uint j = 0; j < ESCAPED_CHARS.length(); j++)
            {
                if (c == ESCAPED_CHARS.substr(j, 1))
                {
                    c = "\\" + c;
                    break;
                }
            }

            result += c;
        }

        return result;
    }

    void emit(string message)
    {
        uint thisMessageId = messageId++;
        player emitter = nil;
        uint remainingTries = 1000;
        player testPlayer = nil;
        int random = 0;
        
        if (!ready)
        {
            return;
        }

        while (emitter == nil && remainingTries > 0)
        {
            random = GetRandomInt(0, 11);
            testPlayer = Player(random);

            if (IsPlaying[random])
            {
                emitter = testPlayer;
            }

            remainingTries--;
        }

        if (emitter == GetLocalPlayer())
        {
            StoreInteger(gc, "val:" + I2S(thisMessageId), message, (thisMessageId * message.length()) % 127);
            SyncStoredInteger(gc, "val:" + I2S(thisMessageId), message);
        }
    }

    void setPlayerFlag(player p, string flag)
    {
        emit("FlagP " + I2S(GetPlayerId(p)) + " " + flag);
    }

    void defineEvent(string name, uint num_args, string format, string args_data)
    {
        emit("DefEvent " + pack(name) + " " + I2S(num_args) + " " + args_data + pack(format));
    }

    void LogEvent(string name, uint num_args, string data)
    {
        emit("Event " + pack(name) + data);
    }

    void defineValue(string name, string value, string goal, string suggest)
    {
        emit("DefVarP " + pack(name) + " " + value + " " + goal + " " + suggest);
    }

    void updateValue(string name, player p, string op, string value, string val_type = "")
    {
        if (val_type == "string") 
        { 
            value = "\"" + pack(value) + "\""; 
        }
        emit("VarP " + I2S(GetPlayerId(p)) + " " + pack(name) + " " + op + " " + value);
    }

    void init()
    {
        FlushGameCache(InitGameCache("MMD.dat"));
        gc = InitGameCache("MMD.dat");

        emit("init version 1 1");
        ready = true;

        for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
        {
            if (IsPlaying[i])
            {
                emit("init pid " + I2S(i) + " " + pack(GetPlayerName(Player(i))));
            }
        }
    }
}

bool RectContainsCoords( rect r, float x, float y )
{
    return ( GetRectMinX( r ) <= x ) && ( x <= GetRectMaxX( r ) ) && ( GetRectMinY( r ) <= y ) && ( y <= GetRectMaxY( r ) );
}

void SetPlayerAllianceStateAllyBJ( player sourcePlayer, player otherPlayer, bool flag )
{
    SetPlayerAlliance( sourcePlayer, otherPlayer, ALLIANCE_PASSIVE,       flag );
    SetPlayerAlliance( sourcePlayer, otherPlayer, ALLIANCE_HELP_REQUEST,  flag );
    SetPlayerAlliance( sourcePlayer, otherPlayer, ALLIANCE_HELP_RESPONSE, flag );
    SetPlayerAlliance( sourcePlayer, otherPlayer, ALLIANCE_SHARED_XP,     flag );
    SetPlayerAlliance( sourcePlayer, otherPlayer, ALLIANCE_SHARED_SPELLS, flag );
}

void SetPlayerAllianceStateBJ( player sourcePlayer, player otherPlayer, int allianceState )
{
    if ( sourcePlayer == otherPlayer )
	{
        return;
    }

    switch( allianceState )
    {
        case bj_ALLIANCE_UNALLIED:
        {
            SetPlayerAllianceStateAllyBJ(sourcePlayer, otherPlayer, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_VISION, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_CONTROL, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_ADVANCED_CONTROL, false);
            break;
        }
        case bj_ALLIANCE_UNALLIED_VISION:
        {
            SetPlayerAllianceStateAllyBJ(sourcePlayer, otherPlayer, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_VISION, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_CONTROL, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_ADVANCED_CONTROL, false);
            break;
        }
        case bj_ALLIANCE_ALLIED:
        {
            SetPlayerAllianceStateAllyBJ(sourcePlayer, otherPlayer, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_VISION, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_CONTROL, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_ADVANCED_CONTROL, false);
            break;
        }
        case bj_ALLIANCE_ALLIED_VISION:
        {
            SetPlayerAllianceStateAllyBJ(sourcePlayer, otherPlayer, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_VISION, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_CONTROL, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_ADVANCED_CONTROL, false);
            break;
        }
        case bj_ALLIANCE_ALLIED_UNITS:
        {
            SetPlayerAllianceStateAllyBJ(sourcePlayer, otherPlayer, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_VISION, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_CONTROL, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_ADVANCED_CONTROL, false);
            break;
        }
        case bj_ALLIANCE_ALLIED_ADVUNITS:
        {
            SetPlayerAllianceStateAllyBJ(sourcePlayer, otherPlayer, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_VISION, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_CONTROL, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_ADVANCED_CONTROL, true);
            break;
        }
        case bj_ALLIANCE_NEUTRAL:
        {
            SetPlayerAllianceStateAllyBJ(sourcePlayer, otherPlayer, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer,  ALLIANCE_SHARED_VISION,false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_CONTROL, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_ADVANCED_CONTROL, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_PASSIVE, true);
            break;
        }
        case bj_ALLIANCE_NEUTRAL_VISION:
        {
            SetPlayerAllianceStateAllyBJ(sourcePlayer, otherPlayer, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_VISION, true);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_CONTROL, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_ADVANCED_CONTROL, false);
            SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_PASSIVE, true);
            break;
        }
    }
}

item UnitAddItemByIdSwapped(int itemId, unit whichHero)
{
    dummy_item = CreateItem(itemId, GetUnitX(whichHero), GetUnitY(whichHero));
    UnitAddItem(whichHero, dummy_item);
    return dummy_item;
}

fogmodifier CreateFogModifierRectBJ( bool enabled, player whichPlayer, fogstate whichFogState, rect r )
{
    bj_lastCreatedFogModifier = CreateFogModifierRect( whichPlayer, whichFogState, r, true, false );

    if ( enabled )
	{
        FogModifierStart( bj_lastCreatedFogModifier );
    }

    return bj_lastCreatedFogModifier;
}

int PercentTo255( float percentage )
{
    int max = 255;
    int result = R2I( percentage * I2R( max ) * 0.01f );

    if ( result < 0 )
	{
        result = 0;
	}
    else if ( result > max )
	{
        result = max;
    }

    return result;
}

int GetInventoryIndexOfItemTypeBJ( unit whichUnit, int itemId )
{
	for ( int i = 0; i < 6; i++ )
	{
        item indexItem = UnitItemInSlot( whichUnit, i );
        if ( indexItem != nil && GetItemTypeId( indexItem ) == itemId )
		{
            return i + 1;
        }
	}

    return 0;
}

item GetItemOfTypeFromUnitBJ( unit whichUnit, int itemId )
{
    int i = GetInventoryIndexOfItemTypeBJ( whichUnit, itemId );

    if ( i > 0 )
	{
        return UnitItemInSlot( whichUnit, i - 1 );
	}
	
	return nil;
}

bool UnitHasItemOfTypeBJ( unit whichUnit, int itemId )
{
    return GetInventoryIndexOfItemTypeBJ( whichUnit, itemId ) > 0;
}

float GetParabolaZEx(float x, float d, float h, float z0 = .0f, float zd = .0f)
{
    if (z0 <= .0f && zd <= .0f)
    {
        return 4 * h * x * (d - x) / (d * d);
    }
    return 4 * h * x * (d - x) / (d * d) + x * (zd - z0) / d + z0;
}

void CinematicFilterGenericBJ( float duration, blendmode bmode, string tex, float red0, float green0, float blue0, float trans0, float red1, float green1, float blue1, float trans1 )
{
    SetCineFilterTexture( tex );
    SetCineFilterBlendMode( bmode );
    SetCineFilterTexMapFlags( TEXMAP_FLAG_NONE );
    SetCineFilterStartUV( 0, 0, 1, 1 );
    SetCineFilterEndUV( 0, 0, 1, 1 );
    SetCineFilterStartColor( PercentTo255( red0 ), PercentTo255( green0 ), PercentTo255( blue0 ), PercentTo255( 100.f - trans0 ) );
    SetCineFilterEndColor( PercentTo255( red1 ), PercentTo255( green1 ), PercentTo255( blue1 ), PercentTo255( 100.f - trans1 ) );
    SetCineFilterDuration( duration );
    DisplayCineFilter( true );
}

void PanCameraToTimedForPlayer( player whichPlayer, float x, float y, float duration )
{
    if ( GetLocalPlayer( ) == whichPlayer )
	{
        PanCameraToTimed( x, y, duration );
    }
}

void onCameraCommand()
{
    trigger t = CreateTrigger();

    SetMapFogZ(100000);
    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        TriggerRegisterPlayerChatEvent(t, Player(i), "-cam", false);
    }
    TriggerAddAction(t, function()
    {
        player p = GetTriggerPlayer();
        int pid = GetPlayerId(p);
        string chat = GetEventPlayerChatString();
        float val = S2R(chat.substr(5, 4));

        if (val > 7000.f)
        {
            val = 7000.f;
        } 
        else if (val < 1650.f)
        {
            val = 1650.f;
        }
        cam_dist[pid] = val;
        if (p == GetLocalPlayer())
        {
            ResetToGameCamera(0);
            SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, cam_dist[pid], .0f);
            SetCameraField(CAMERA_FIELD_FARZ, 100000.f, .0f);
        }
    });
}

void onAntiHek()
{
    trigger t = CreateTrigger();

    TriggerRegisterPlayerChatEvent(t, Player(0), "-ah", true);
    TriggerAddAction(t, function()
    {
        AntiHek = !AntiHek;
        if (AntiHek)
        {
            DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "AntiHack Status : Enable");
        }
        else
        {
            DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, "AntiHack Status : Disable");
        }
        AntiHackEnable(AntiHek);
        AntiHackEnableAddressCheck(AntiHek);
        AntiHackEnableBreakpointCheck(AntiHek);
        AntiHackEnableProcessCheck(AntiHek);
        AntiHackEnableModuleCheck(AntiHek);
    });
}

void onWideScreen()
{
    trigger t = CreateTrigger();

    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        TriggerRegisterPlayerChatEvent(t, Player(i), "-ws", true);
    }
    TriggerAddAction(t, function()
    {
        player p = GetTriggerPlayer();
        int pid = GetPlayerId(p);
        IsWideScreen[pid] = !IsWideScreen[pid];
        if (p == GetLocalPlayer())
        {
            SetWidescreenState(IsWideScreen[pid]);
        }
    });
}

void onTestCommand()
{
    trigger t = CreateTrigger();

    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        TriggerRegisterPlayerChatEvent(t, Player(i), "", false);
    }
    TriggerAddAction(t, function()
    {
        string Tchat = GetEventPlayerChatString();
        int mint; 
        float mfloat;
        player p = GetTriggerPlayer();
        int pid = GetPlayerId(p);
        string pname = StringCase(GetPlayerName(p), false);
        framehandle fh = nil;
        framehandle fh2 = nil;

        if (PlayerCount == 1)
        {
            if (Tchat.substr(0, 7) == "-create")
            {
                mint = String2Id(Tchat.substr(8, 4));
                CreateUnit(GetTriggerPlayer(), mint, GetMouseWorldX(), GetMouseWorldY(), .0f);
            }
            if (Tchat.substr(0, 6) == "-owner")
            {
                mint = S2I(Tchat.substr(7, 2));
                SetUnitOwner(GetUnitSelected(GetTriggerPlayer()), Player(mint), true);
            }
            if (Tchat.substr(0, 6) == "-sethp")
            {
                mfloat = S2R(Tchat.substr(7, 9));
                SetUnitMaxLife(GetUnitSelected(GetTriggerPlayer()), mfloat);
                SetUnitCurrentLife(GetUnitSelected(GetTriggerPlayer()), GetUnitMaxLife(GetUnitSelected(GetTriggerPlayer())));
            }
            if (Tchat.substr(0, 5) == "-tele")
            {
                SetUnitXY(GetUnitSelected(GetTriggerPlayer()), GetMouseWorldX(), GetMouseWorldY(), 0);
            }
            if (Tchat.substr(0, 6) == "-share")
            {
                mint = S2I(Tchat.substr(7, 2));
                SetPlayerAlliance(Player(mint), Player(0), ALLIANCE_SHARED_CONTROL, true);
                SetPlayerAlliance(Player(mint), Player(0), ALLIANCE_SHARED_ADVANCED_CONTROL, true);
            }
        }

        if (Tchat.substr(0, 7) == "-dmgtxt")
        {
            DMGTEXT[pid] = !DMGTEXT[pid];
        }

        if (Tchat.substr(0, 3) == "-ex")
        {
            if (pname == "rayslazer")
            {
                BabonExtra1[pid] = !BabonExtra1[pid];
            }
        }
    });

    t = CreateTrigger();
    
    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        TriggerRegisterPlayerKeyEvent(t, Player(i), OSKEY_ESCAPE, META_KEY_NONE, false);
    }
    TriggerAddAction(t, function()
    {
        unit u = nil;
        if (PlayerCount == 1)
        {
            u = GetUnitSelected(GetTriggerPlayer());
            SetPlayerState(GetTriggerPlayer(), PLAYER_STATE_RESOURCE_GOLD, 1000000);
            UnitResetCooldown(u);
            SetHeroLevel(u, 50, false);
            SetUnitCurrentLife(u, GetUnitMaxLife(u));
            SetUnitCurrentMana(u, GetUnitMaxMana(u));
        }
    });
}

void onMusicCommand()
{
    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        TriggerRegisterPlayerChatEvent(musicCommand, Player(i), "-music", false);
    }
    TriggerAddAction(musicCommand, function()
    {
        player p = GetTriggerPlayer();
        int pid = GetPlayerId(p);
        string chat = GetEventPlayerChatString();
        int mint = S2I(chat.substr(7, 2));

        if (mint >= 1 && mint <= 9)
        {
            CUR_MUSIC[pid] = mint;
            if (p == GetLocalPlayer())
            {
                PlayMusic("Music\\" + I2S(mint) + ".mp3");
            }
        }

        if (mint == 0)
        {
            CUR_MUSIC[pid] = mint;
            if (p == GetLocalPlayer())
            {
                PlayMusic("Music\\1.mp3;Music\\2.mp3;Music\\3.mp3;Music\\4.mp3;Music\\5.mp3;Music\\6.mp3;Music\\7.mp3;Music\\8.mp3;Music\\9.mp3");
            }
        }
    });
}

void leavegame()
{
    trigger t = CreateTrigger();
    
    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        TriggerRegisterPlayerEvent(t, Player(i), EVENT_PLAYER_LEAVE);
    }
    TriggerAddAction(t, function()
    {
        player p = GetTriggerPlayer();
        int pid = GetPlayerId(p);

        DisplayTimedTextToPlayer(GetLocalPlayer(), .0f, .0f, 5.f, PLAYER_COLOR[pid] + GetPlayerName(p) + " has left the game!");
        if (IsUnitInGroup(MyHero[pid], TOUR_GROUP))
        {
            GroupRemoveUnit(TOUR_GROUP, MyHero[pid]);
        }
        if (IsUnitInGroup(MyHero[pid], TOUR_GROUP_1))
        {
            GroupRemoveUnit(TOUR_GROUP_1, MyHero[pid]);
        }
        if (IsUnitInGroup(MyHero[pid], TOUR_GROUP_2))
        {
            GroupRemoveUnit(TOUR_GROUP_2, MyHero[pid]);
        }
        if (IsUnitInGroup(MyHero[pid], TOUR_GROUP_3))
        {
            GroupRemoveUnit(TOUR_GROUP_3, MyHero[pid]);
        }
        PlayerCount--;
        IsPlaying[pid] = false;
        RemoveUnit(MyHero[pid]);
        MyHero[pid] = nil;
        MMD::setPlayerFlag(p, "loser");
    });
}

void onBlockAlly()
{
    trigger t = CreateTrigger();

    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_ATTACKED, nil);
    }
    TriggerAddAction(t, function()
    {
        if (IsUnitAlly(GetTriggerUnit(), GetOwningPlayer(GetAttacker())))
        {
            IssueImmediateOrderById(GetAttacker(), 851972);
        }
    });
}

void onKillMeCommand()
{
    trigger t = CreateTrigger();

    for (int i = 0; i < PLAYER_NEUTRAL_AGGRESSIVE; i++)
    {
        TriggerRegisterPlayerChatEvent(t, Player(i), "killme", false);
    }
    TriggerAddAction(t, function()
    {
        player p = GetTriggerPlayer();
        int pid = GetPlayerId(p);
        int hid = GetHandleId(KILLME_TIMER[pid]);
        
        SavePlayerHandle(GameHT, hid, 'plyr', p);
        if (LoadInteger(GameHT, hid, 'coun') == 0)
        {
            SaveInteger(GameHT, hid, 'coun', 30);
        }
        TimerStart(KILLME_TIMER[pid], 1.f, true, function()
        {
            timer tmr = GetExpiredTimer();
            int hid = GetHandleId(tmr);
            player p = LoadPlayerHandle(GameHT, hid, 'plyr');
            int count = LoadInteger(GameHT, hid, 'coun');
            int pid = GetPlayerId(p);

            if (!IsUnitInvulnerable(MyHero[pid]) && !IsUnitPaused(MyHero[pid]))
            {
                count--;
                SaveInteger(GameHT, hid, 'coun', count);
                DisplayTimedTextToPlayer(p, .0f, .0f, 1.f, "Death Countdown : " + I2S(count));
            }

            if (count <= 0 || !IsUnitAlive(MyHero[pid]))
            {
                if (IsUnitAlive(MyHero[pid]))
                {
                    KillUnit(MyHero[pid]);
                }
                FlushChildHashtable(GameHT, hid);
                PauseTimer(tmr);
            }
        });
    });
}

bool TowerInit()
{
    unit u = Indexer::unitt;
        
    if (IsUnitTower(u))
    {
        if (u != PreUnit[4] && u != PreUnit[5] && u != PreUnit[6] && u != PreUnit[16] && u != PreUnit[17] && u != PreUnit[18] && u != PreUnit[33] && u != PreUnit[34] && u != PreUnit[35])
        {
            SetInvulUnit(u, true);
        }
    }

    return false;
}

void CreateRegions() {
    area_boss = Rect( -8192.f, -15360.f, -5120, -12800.f );
    Bot_Team1 = Rect( -8704.f, 6912.f, -8448.f, 7168.f );
    Bot_Team2 = Rect( 6400.f, 896.f, 6656.f, 1152.f );
    Left_Team3 = Rect( -4352.f, -6656.f, -4096.f, -6400.f );
    Map_Center = Rect( -2432.f, 1792.f, -2176.f, 2048.f );
    Map_Left = Rect( -8640.f, -5952.f, -8384.f, -5696.f );
    Map_Right = Rect( 6272.f, -6656.f, 6528.f, -6400.f );
    Map_Top = Rect( 5888.f, 8320.f, 6144.f, 8576.f );
    Mid_Team1 = Rect( -7168.f, 6912.f, -6912.f, 7168.f );
    Mid_Team2 = Rect( 4608.f, 2176.f, 4864.f, 2432.f );
    Mid_Team3 = Rect( -2944.f, -4864.f, -2688.f, -4608.f );
    revive_team1 = Rect( -8864.f, 8800.f, -8800.f, 8864.f );
    revive_team2 = Rect( 6752.f, 2272.f, 6816.f, 2336.f );
    revive_team3 = Rect( -2848.f, -6816.f, -2784.f, -6752.f );
    Right_Team3 = Rect( -1664.f, -6656.f, -1408.f, -6400.f );
    spawn_boss = Rect( -6688.f, -14112.f, -6624.f, -14048.f );
    Top_Team1 = Rect( -7168.f, 8448.f, -6912.f, 8704.f );
    Top_Team2 = Rect( 6400.f, 3584.f, 6656.f, 3840.f );
    TourDuo_1 = Rect( -256.f, -12672.f, -128.f, -12544.f );
    TourDuo_2 = Rect( 1152.f, -14876.f, 1280.f, -14848.f );
    TourDuo_3 = Rect( 2176.f, -12800.f, 2304.f, -12672.f );
    TourDuo_Area = Rect( -512.f, -15360.f, 2560.f, -12288.f );
    TourTeam_1 = Rect( 3840.f, -12672.f, 3968.f, -12544.f );
    TourTeam_2 = Rect( 5376.f, -14976.f, 5504.f, -14848.f );
    TourTeam_3 = Rect( 7296.f, -12672.f, 7424.f, -12544.f );
    TourTeam_Area = Rect( 3584.f, -15360.f, 7680.f, -12288.f );
    TourSolo_Area = Rect( -4096.f, -15360.f, -1536.f, -12800.f );
    TourDM_Area = Rect( 8704.f, -15360.f, 14848.f, -12288.f );
    pickcam = Rect(9952.f, 7904.f, 10016.f, 7968.f);
    Top1_Tele = Rect(-8160.f, 8480.f, -7968.f, 8672.f); 
    Mid1_Tele = Rect(-8416.f, 8224.f, -8224.f, 8416.f);
    Bot1_Tele = Rect(-8672.f, 7968.f, -8480.f, 8160.f);
    Top2_Tele = Rect(6176.f, 2592.f, 6368.f, 2784.f); 
    Mid2_Tele = Rect(6176.f, 2208.f, 6368.f, 2400.f);
    Bot2_Tele = Rect(6176.f, 1824.f, 6368.f, 2016.f);
    Left_Tele = Rect(-3296.f, -6240.f, -3104.f, -6048.f); 
    Mid3_Tele = Rect(-2912.f, -6240.f, -2720.f, -6048.f);
    Right_Tele = Rect(-2528.f, -6240.f, -2336.f, -6048.f);
    HibariArea = Rect(13824.f, -11264.f, 14848.f, -10240.f);
}

void CreateAllUnits() {
    player p = Player(3);

    PreUnit[0] = CreateUnit(p, 'nfnp', -9088.f, 9088.f, 330.f);
    PreUnit[1] = CreateUnit(p, 'n001', -8704.f, 9088.f, 270.f);
    PreUnit[2] = CreateUnit(p, 'n000', -8448.f, 9088.f, 270.f);
    PreUnit[3] = CreateUnit(p, 'n002', -9088.f, 8704.f, 270.f);
    PreUnit[4] = CreateUnit(p, 'o001', -4864.f, 5120.f, 270.f);
    PreUnit[5] = CreateUnit(p, 'o001', -8768.f, 1216.f, 270.f);
    PreUnit[6] = CreateUnit(p, 'o001', -2752.f, 8768.f, 270.f);
    PreUnit[7] = CreateUnit(p, 'o000', -8576.f, 7296.f, 270.f);
    PreUnit[8] = CreateUnit(p, 'o000', -7232.f, 7232.f, 270.f);
    PreUnit[9] = CreateUnit(p, 'o000', -7296.f, 8576.f, 270.f);
    PreUnit[10] = CreateUnit(p, 'o000', -8128.f, 8128.f, 270.f);
    PreUnit[11] = CreateUnit(p, 'n003', -9088.f, 8448.f, 270.f);
    PreUnit[40] = CreateUnit(p, 'n004', -8192.f, 9088.f, 270.f);

    p = Player(7);
    PreUnit[12] = CreateUnit(p, 'nfnp', 7040.f, 2304.f, 213.f);
    PreUnit[13] = CreateUnit(p, 'n001', 7040.f, 1920.f, 270.f);
    PreUnit[14] = CreateUnit(p, 'n000', 7040.f, 2688.f, 270.f);
    PreUnit[15] = CreateUnit(p, 'n002', 6784.f, 2688.f, 270.f);
    PreUnit[16] = CreateUnit(p, 'o001', 1856.f, 2496.f, 270.f);
    PreUnit[17] = CreateUnit(p, 'o001', 3904.f, 8768.f, 270.f);
    PreUnit[18] = CreateUnit(p, 'o001', 6528.f, -3264.f, 270.f);
    PreUnit[19] = CreateUnit(p, 'o000', 4992.f, 2304.f, 270.f);
    PreUnit[20] = CreateUnit(p, 'o000', 6528.f, 1280.f, 270.f);
    PreUnit[21] = CreateUnit(p, 'o000', 5248.f, 1280.f, 270.f);
    PreUnit[22] = CreateUnit(p, 'o000', 6528.f, 3328.f, 270.f);
    PreUnit[23] = CreateUnit(p, 'o000', 5248.f, 3328.f, 270.f);
    PreUnit[24] = CreateUnit(p, 'o000', 6016.f, 2304.f, 270.f);
    PreUnit[25] = CreateUnit(p, 'n003', 6784.f, 1920.f, 270.f);
    PreUnit[41] = CreateUnit(p, 'n004', 7040.f, 2944.f, 270.f);

    p = Player(11);
    PreUnit[26] = CreateUnit(p, 'nfnp', -2816.f, -7040.f, 112.f);
    PreUnit[27] = CreateUnit(p, 'n001', -3200.f, -7040.f, 270.f);
    PreUnit[28] = CreateUnit(p, 'n000', -2432.f, -7040.f, 270.f);
    PreUnit[29] = CreateUnit(p, 'n002', -2432.f, -6784.f, 270.f);
    PreUnit[30] = CreateUnit(p, 'o000', -1792.f, -6528.f, 270.f);
    PreUnit[31] = CreateUnit(p, 'o000', -2816.f, -4992.f, 270.f);
    PreUnit[32] = CreateUnit(p, 'o000', -3968.f, -6528.f, 270.f);
    PreUnit[33] = CreateUnit(p, 'o001', -7808.f, -6272.f, 270.f);
    PreUnit[34] = CreateUnit(p, 'o001', -2432.f, -2176.f, 270.f);
    PreUnit[35] = CreateUnit(p, 'o001', 1600.f, -6592.f, 270.f);
    PreUnit[36] = CreateUnit(p, 'o000', -1792.f, -5120.f, 270.f);
    PreUnit[37] = CreateUnit(p, 'o000', -3840.f, -5120.f, 270.f);
    PreUnit[38] = CreateUnit(p, 'o000', -2816.f, -5888.f, 270.f);
    PreUnit[39] = CreateUnit(p, 'n003', -3200.f, -6784.f, 270.f);
    PreUnit[42] = CreateUnit(p, 'n004', -2176.f, -7040.f, 270.f);
}

void CameraBoundRVE()
{
    float left = -9472.f + GetCameraMargin(CAMERA_MARGIN_LEFT);
    float bot = -15360.f + GetCameraMargin(CAMERA_MARGIN_BOTTOM);
    float right = 15104.f - GetCameraMargin(CAMERA_MARGIN_RIGHT);
    float top = 9216.f - GetCameraMargin(CAMERA_MARGIN_TOP);
    SetCameraBounds(left, bot, right, top, left, top, right, bot);
}

void MapData()
{
    PLAYER_COLOR[0] = "|c00ff0303";
    PLAYER_COLOR[1] = "|c000042ff";
    PLAYER_COLOR[2] = "|c001ce6b9";
    PLAYER_COLOR[3] = "|c00540081";
    PLAYER_COLOR[4] = "|c00fffc01";
    PLAYER_COLOR[5] = "|c00ff8000";
    PLAYER_COLOR[6] = "|c0020c000";
    PLAYER_COLOR[7] = "|c00e55bb0";
    PLAYER_COLOR[8] = "|c00959697";
    PLAYER_COLOR[9] = "|c007ebff1";
    PLAYER_COLOR[10] = "|c00106246";
    PLAYER_COLOR[11] = "|c004e2a04";
}

void MapTriggers()
{
    PickupItemEvent();
    DropItemEvent();
    SpellEvent();
    AbilityAddEvent();
    LearnAbilityEvent();
    OrderEvent();
    MouseClickEvent();
    UnitSelectEvent();
}

void main() {
    ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_MINIMAP, 0));
    ClearFrameAllPoints(GetOriginFrame(ORIGIN_FRAME_PORTRAIT, 0));
    CameraBoundRVE();
    CreateRegions();
    CreateAllUnits();
    MapData();
    MapDelayed();
    DeathEvent();
    onAntiHek();
    onWideScreen();
    onTestCommand();
    onMusicCommand();
    onCameraCommand();
    leavegame();
    onBlockAlly();
    onKillMeCommand();
    DamageEvent();
    MapTriggers();
}

void config() 
{
    SetPlayers( 12 );
    SetTeams( 12 );
    SetGamePlacement( MAP_PLACEMENT_TEAMS_TOGETHER );

    DefineStartLocation( 0, -8960.f, 8960.f );
    DefineStartLocation( 1, -8960.f, 8960.f );
    DefineStartLocation( 2, -8960.f, 8960.f );
    DefineStartLocation( 3, -8960.f, 8960.f );
    DefineStartLocation( 4, 6912.f, 2304.f );
    DefineStartLocation( 5, 6912.f, 2304.f );
    DefineStartLocation( 6, 6912.f, 2304.f );
    DefineStartLocation( 7, 6912.f, 2304.f );
    DefineStartLocation( 8, -2816.f, -6912.f );
    DefineStartLocation( 9, -2816.f, -6912.f );
    DefineStartLocation( 10, -2816.f, -6912.f );
    DefineStartLocation( 11, -2816.f, -6912.f );

    SetPlayerStartLocation( Player(0), 0 );
    ForcePlayerStartLocation( Player(0), 0 );
    SetPlayerColor( Player(0), ConvertPlayerColor(0) );
    SetPlayerRacePreference( Player(0), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(0), false );
    SetPlayerController( Player(0), MAP_CONTROL_USER );

    SetPlayerStartLocation( Player(1), 1 );
    ForcePlayerStartLocation( Player(1), 1 );
    SetPlayerColor( Player(1), ConvertPlayerColor(1) );
    SetPlayerRacePreference( Player(1), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(1), false );
    SetPlayerController( Player(1), MAP_CONTROL_USER );

    SetPlayerStartLocation( Player(2), 2 );
    ForcePlayerStartLocation( Player(2), 2 );
    SetPlayerColor( Player(2), ConvertPlayerColor(2) );
    SetPlayerRacePreference( Player(2), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(2), false );
    SetPlayerController( Player(2), MAP_CONTROL_USER );

    SetPlayerStartLocation( Player(3), 3 );
    ForcePlayerStartLocation( Player(3), 3 );
    SetPlayerColor( Player(3), ConvertPlayerColor(3) );
    SetPlayerRacePreference( Player(3), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(3), false );
    SetPlayerController( Player(3), MAP_CONTROL_COMPUTER );

    SetPlayerStartLocation( Player(4), 4 );
    ForcePlayerStartLocation( Player(4), 4 );
    SetPlayerColor( Player(4), ConvertPlayerColor(4) );
    SetPlayerRacePreference( Player(4), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(4), false );
    SetPlayerController( Player(4), MAP_CONTROL_USER );

    SetPlayerStartLocation( Player(5), 5 );
    ForcePlayerStartLocation( Player(5), 5 );
    SetPlayerColor( Player(5), ConvertPlayerColor(5) );
    SetPlayerRacePreference( Player(5), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(5), false );
    SetPlayerController( Player(5), MAP_CONTROL_USER );

    SetPlayerStartLocation( Player(6), 6 );
    ForcePlayerStartLocation( Player(6), 6 );
    SetPlayerColor( Player(6), ConvertPlayerColor(6) );
    SetPlayerRacePreference( Player(6), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(6), false );
    SetPlayerController( Player(6), MAP_CONTROL_USER );

    SetPlayerStartLocation( Player(7), 7 );
    ForcePlayerStartLocation( Player(7), 7 );
    SetPlayerColor( Player(7), ConvertPlayerColor(7) );
    SetPlayerRacePreference( Player(7), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(7), false );
    SetPlayerController( Player(7), MAP_CONTROL_COMPUTER );

    SetPlayerStartLocation( Player(8), 8 );
    ForcePlayerStartLocation( Player(8), 8 );
    SetPlayerColor( Player(8), ConvertPlayerColor(8) );
    SetPlayerRacePreference( Player(8), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(8), false );
    SetPlayerController( Player(8), MAP_CONTROL_USER );

    SetPlayerStartLocation( Player(9), 9 );
    ForcePlayerStartLocation( Player(9), 9 );
    SetPlayerColor( Player(9), ConvertPlayerColor(9) );
    SetPlayerRacePreference( Player(9), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(9), false );
    SetPlayerController( Player(9), MAP_CONTROL_USER );

    SetPlayerStartLocation( Player(10), 10 );
    ForcePlayerStartLocation( Player(10), 10 );
    SetPlayerColor( Player(10), ConvertPlayerColor(10) );
    SetPlayerRacePreference( Player(10), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(10), false );
    SetPlayerController( Player(10), MAP_CONTROL_USER );

    SetPlayerStartLocation( Player(11), 11 );
    ForcePlayerStartLocation( Player(11), 11 );
    SetPlayerColor( Player(11), ConvertPlayerColor(11) );
    SetPlayerRacePreference( Player(11), RACE_PREF_HUMAN );
    SetPlayerRaceSelectable( Player(11), false );
    SetPlayerController( Player(11), MAP_CONTROL_COMPUTER );

    SetPlayerTeam( Player(0), 0 );
    SetPlayerTeam( Player(1), 0 );
    SetPlayerTeam( Player(2), 0 );
    SetPlayerTeam( Player(3), 0 );

    SetPlayerAllianceStateAllyBJ( Player(0), Player(1), true );
    SetPlayerAllianceStateAllyBJ( Player(0), Player(2), true );
    SetPlayerAllianceStateAllyBJ( Player(0), Player(3), true );
    SetPlayerAllianceStateAllyBJ( Player(1), Player(0), true );
    SetPlayerAllianceStateAllyBJ( Player(1), Player(2), true );
    SetPlayerAllianceStateAllyBJ( Player(1), Player(3), true );
    SetPlayerAllianceStateAllyBJ( Player(2), Player(0), true );
    SetPlayerAllianceStateAllyBJ( Player(2), Player(1), true );
    SetPlayerAllianceStateAllyBJ( Player(2), Player(3), true );
    SetPlayerAllianceStateAllyBJ( Player(3), Player(0), true );
    SetPlayerAllianceStateAllyBJ( Player(3), Player(1), true );
    SetPlayerAllianceStateAllyBJ( Player(3), Player(2), true );

    SetPlayerAlliance( Player(0), Player(1), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(0), Player(2), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(0), Player(3), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(1), Player(0), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(1), Player(2), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(1), Player(3), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(2), Player(0), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(2), Player(1), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(2), Player(3), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(3), Player(0), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(3), Player(1), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(3), Player(2), ALLIANCE_SHARED_VISION, true );

    SetPlayerTeam( Player(4), 1 );
    SetPlayerTeam( Player(5), 1 );
    SetPlayerTeam( Player(6), 1 );
    SetPlayerTeam( Player(7), 1 );

    SetPlayerAllianceStateAllyBJ( Player(4), Player(5), true );
    SetPlayerAllianceStateAllyBJ( Player(4), Player(6), true );
    SetPlayerAllianceStateAllyBJ( Player(4), Player(7), true );
    SetPlayerAllianceStateAllyBJ( Player(5), Player(4), true );
    SetPlayerAllianceStateAllyBJ( Player(5), Player(6), true );
    SetPlayerAllianceStateAllyBJ( Player(5), Player(7), true );
    SetPlayerAllianceStateAllyBJ( Player(6), Player(4), true );
    SetPlayerAllianceStateAllyBJ( Player(6), Player(5), true );
    SetPlayerAllianceStateAllyBJ( Player(6), Player(7), true );
    SetPlayerAllianceStateAllyBJ( Player(7), Player(4), true );
    SetPlayerAllianceStateAllyBJ( Player(7), Player(5), true );
    SetPlayerAllianceStateAllyBJ( Player(7), Player(6), true );

    SetPlayerAlliance( Player(4), Player(5), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(4), Player(6), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(4), Player(7), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(5), Player(4), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(5), Player(6), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(5), Player(7), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(6), Player(4), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(6), Player(5), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(6), Player(7), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(7), Player(4), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(7), Player(5), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(7), Player(6), ALLIANCE_SHARED_VISION, true );

    SetPlayerTeam( Player(8), 2 );
    SetPlayerTeam( Player(9), 2 );
    SetPlayerTeam( Player(10), 2 );
    SetPlayerTeam( Player(11), 2 );

    SetPlayerAllianceStateAllyBJ( Player(8), Player(9), true );
    SetPlayerAllianceStateAllyBJ( Player(8), Player(10), true );
    SetPlayerAllianceStateAllyBJ( Player(8), Player(11), true );
    SetPlayerAllianceStateAllyBJ( Player(9), Player(8), true );
    SetPlayerAllianceStateAllyBJ( Player(9), Player(10), true );
    SetPlayerAllianceStateAllyBJ( Player(9), Player(11), true );
    SetPlayerAllianceStateAllyBJ( Player(10), Player(8), true );
    SetPlayerAllianceStateAllyBJ( Player(10), Player(9), true );
    SetPlayerAllianceStateAllyBJ( Player(10), Player(11), true );
    SetPlayerAllianceStateAllyBJ( Player(11), Player(8), true );
    SetPlayerAllianceStateAllyBJ( Player(11), Player(9), true );
    SetPlayerAllianceStateAllyBJ( Player(11), Player(10), true );

    SetPlayerAlliance( Player(8), Player(9), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(8), Player(10), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(8), Player(11), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(9), Player(8), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(9), Player(10), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(9), Player(11), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(10), Player(8), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(10), Player(9), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(10), Player(11), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(11), Player(8), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(11), Player(9), ALLIANCE_SHARED_VISION, true );
    SetPlayerAlliance( Player(11), Player(10), ALLIANCE_SHARED_VISION, true );

    PlayMusic("Music\\1.mp3;Music\\2.mp3;Music\\3.mp3;Music\\4.mp3;Music\\5.mp3;Music\\6.mp3;Music\\7.mp3;Music\\8.mp3;Music\\9.mp3");
}